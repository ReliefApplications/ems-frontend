{
    "pipes": [],
    "interfaces": [
        {
            "name": "CronToken",
            "id": "interface-CronToken-77d06f0ae4a3b4daaba9634977ada4fdc922b0e8497dafad50880bdb0bb3416f697a2937619d8f8d7e14c6d3083988c114309f247c7c72bd9666b9afc188aab9",
            "file": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Component,\n  Input,\n  OnInit,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  Optional,\n  Self,\n} from '@angular/core';\nimport { CronOptions, DefaultCronOptions } from './options/cron.options';\nimport { Days, MonthWeeks, Months } from './enum/enums';\nimport {\n  ControlValueAccessor,\n  FormBuilder,\n  NgControl,\n  Validators,\n} from '@angular/forms';\nimport { debounceTime, Subject, takeUntil } from 'rxjs';\nimport { TranslateService } from '@ngx-translate/core';\n\ntype CronType =\n  | 'minutely'\n  | 'hourly'\n  | 'daily'\n  | 'weekly'\n  | 'monthly'\n  | 'yearly'\n  | 'unknown';\n\n/** minutes regex */\nconst minutesExp = /\\d+ 0\\/\\d+ \\* 1\\/1 \\* [?*] \\*/;\n/** hourly regex */\nconst hourlyExp = /\\d+ \\d+ 0\\/\\d+ 1\\/1 \\* [?*] \\*/;\n/** daily regex */\nconst dailyExp = /\\d+ \\d+ \\d+ 1\\/\\d+ \\* [?*] \\*/;\n/** dailyWeekday regex */\nconst dailyWeekdayExp = /\\d+ \\d+ \\d+ [?*] \\* MON-FRI \\*/;\n/** weekly regex */\nconst weeklyExp =\n  /\\d+ \\d+ \\d+ [?*] \\* (MON|TUE|WED|THU|FRI|SAT|SUN)(,(MON|TUE|WED|THU|FRI|SAT|SUN))* \\*/;\n/** monthly regex */\nconst monthlyExpo = /\\d+ \\d+ \\d+ (\\d+|L|LW|1W) 1\\/\\d+ [?*] \\*/;\n/** MonthlyWeekday regex */\nconst monthlyWeekdayExpo =\n  /\\d+ \\d+ \\d+ [?*] 1\\/\\d+ (MON|TUE|WED|THU|FRI|SAT|SUN)((#[1-5])|L) \\*/;\n/** yearly regex */\nconst yearlyExp = /\\d+ \\d+ \\d+ (\\d+|L|LW|1W) \\d+ [?*] \\*/;\n/** yearlyMonthWeek regex */\nconst yearlyMonthWeekExp =\n  /\\d+ \\d+ \\d+ [?*] \\d+ (MON|TUE|WED|THU|FRI|SAT|SUN)((#[1-5])|L) \\*/;\n\n/** Interface declaration CronToken */\ninterface CronToken {\n  val: number;\n  inc: number;\n}\n\n/**\n * Parse CronNumber to token\n *\n * @param val value\n * @returns obj\n */\nfunction parseCronNumberToken(val: string): CronToken {\n  const v = val.split('/').map((x) => parseInt(x, 10));\n  if (v.length === 1) {\n    return { val: v[0], inc: 0 };\n  }\n  return { val: v[0], inc: v[1] };\n}\n\n/**\n * generate numbers in some range\n *\n * @param start start range\n * @param end end range\n * @yields i\n */\nfunction* range(start: number, end: number) {\n  for (let i = start; i <= end; i++) {\n    yield i;\n  }\n}\n\n/**\n * UI CronEditor Component\n * CronEditor is a UI component that allows users to switch between two mutually exclusive options (checked or unchecked, on or off) through a single click or tap.\n */\n@Component({\n  selector: 'ui-cron-editor',\n  templateUrl: './cron-editor.component.html',\n  styleUrls: ['./cron-editor.component.scss'],\n})\nexport class CronEditorComponent\n  implements OnInit, OnDestroy, ControlValueAccessor\n{\n  /** Subject to emit when the component is destroyed. */\n  destroy$: Subject<boolean> = new Subject<boolean>();\n  /** Arrays representing seconds */\n  public seconds = [...range(0, 59)];\n  /** Arrays representing minutes */\n  public minutes = [...range(0, 59)];\n  /** Arrays representing hours */\n  public hours = [...range(0, 23)];\n  /** Boolean indicating whether the component is disabled. */\n  @Input() public disabled = false;\n  /** Options for the cron editor. */\n  @Input() public options: CronOptions = DefaultCronOptions;\n  /** Event emitter for cron validation. */\n  @Output() cronValidEmitter: EventEmitter<boolean> =\n    new EventEmitter<boolean>();\n  /** The current value of the cron expression. */\n  public value: string | undefined | null;\n  /** The currently active tab in the cron editor. */\n  public activeTab!: string;\n  /** Options for select inputs in the cron editor. */\n  public selectOptions = this.getSelectOptions();\n  /** Boolean indicating whether the component has been touched. */\n  touched = false;\n  /** Form group for all form controls in the cron editor. */\n  allForm = this.fb.group({\n    cronType: [<CronType>'unknown', Validators.required],\n    seconds: [0],\n\n    minutes: [1],\n    minutesPer: [1],\n\n    hours: [this.getAmPmHour(1)],\n    hoursPer: [1],\n    hoursType: [this.getHourType(1)],\n\n    days: [1], // Days of Month\n    daysPer: [1],\n\n    months: [1],\n    monthsInc: [1],\n\n    day: ['MON'], // Day of week '1' or 'MON;\n    monthsWeek: ['#1'],\n\n    weekdaysOnly: [false],\n    specificWeekDay: [false],\n    specificMonthWeek: [false],\n    MON: [true],\n    TUE: [true],\n    WED: [true],\n    THU: [true],\n    FRI: [true],\n    SAT: [true],\n    SUN: [true],\n    expression: ['0 0 0 0 0'],\n  });\n\n  /**\n   * ControlValueAccessor\n   */\n  public onChange!: (value: any) => void;\n  /**\n   * ControlValueAccessor\n   */\n  public onTouched!: () => void;\n\n  /** @returns is cron Flavor Quartz */\n  get isCronFlavorQuartz() {\n    return this.options.cronFlavor === 'quartz';\n  }\n\n  /** @returns is cron Flavor Standard */\n  get isCronFlavorStandard() {\n    return this.options.cronFlavor === 'standard';\n  }\n\n  /** @returns year default */\n  get yearDefaultChar() {\n    return this.options.cronFlavor === 'quartz' ? '*' : '';\n  }\n\n  /** @returns weekday default */\n  get weekDayDefaultChar() {\n    return this.options.cronFlavor === 'quartz' ? '?' : '*';\n  }\n\n  /** @returns monthday default */\n  get monthDayDefaultChar() {\n    return this.options.cronFlavor === 'quartz' ? '?' : '*';\n  }\n\n  /**\n   * Ui CronEditor constructor\n   *\n   * @param fb FormBuilder\n   * @param translate angular Translate service\n   * @param ngControl Current control\n   */\n  constructor(\n    private fb: FormBuilder,\n    private translate: TranslateService,\n    @Optional() @Self() public ngControl: NgControl\n  ) {\n    if (this.ngControl != null) {\n      this.ngControl.valueAccessor = this;\n      if (this.ngControl.value) {\n        this.handleModelChange(this.ngControl.value);\n      }\n    }\n  }\n\n  public async ngOnInit() {\n    this.allForm.valueChanges\n      .pipe(debounceTime(1000), takeUntil(this.destroy$))\n      .subscribe(() => {\n        this.markAsTouched();\n        const cron = this.computeCron();\n        this.cronValidEmitter.emit(this.cronIsValid(cron));\n        this.onChange(cron);\n      });\n  }\n\n  /**\n   * Emit Destroy event, and unsubscribe to destroy\n   */\n  ngOnDestroy() {\n    this.destroy$.next(true);\n    this.destroy$.unsubscribe();\n  }\n\n  /**\n   * compute Cron\n   *\n   * @returns string cron\n   */\n  private computeCron(): string {\n    let cron: string;\n    switch (this.allForm.value.cronType) {\n      case 'minutely':\n        cron = this.computeMinutesCron();\n        break;\n      case 'hourly':\n        cron = this.computeHourlyCron();\n        break;\n      case 'daily':\n        cron = this.computeDailyCron();\n        break;\n      case 'weekly':\n        cron = this.computeWeeklyCron();\n        break;\n      case 'monthly':\n        cron = this.computeMonthlyCron();\n        break;\n      case 'yearly':\n        cron = this.computeYearlyCron();\n        break;\n      case 'unknown':\n        cron = this.computeAdvancedExpression();\n        break;\n      default:\n        throw Error('Unknown cron type ' + this.allForm.value.cronType);\n    }\n    return cron;\n  }\n\n  /**\n   * compute MinutesCron\n   *\n   * @returns string minutesCron\n   */\n  private computeMinutesCron(): string {\n    const state = this.allForm.value;\n\n    // tslint:disable-next-line:max-line-length\n    return `${this.isCronFlavorQuartz ? state.seconds : ''} 0/${\n      state.minutesPer\n    } * 1/1 * ${this.weekDayDefaultChar} ${this.yearDefaultChar}`.trim();\n  }\n\n  /**\n   * compute HourlyCron\n   *\n   * @returns string HourlyCron\n   */\n  private computeHourlyCron(): string {\n    const state = this.allForm.value;\n    return `${this.isCronFlavorQuartz ? state.seconds : ''} ${\n      state.minutes\n    } 0/${state.hoursPer} 1/1 * ${this.weekDayDefaultChar} ${\n      this.yearDefaultChar\n    }`.trim();\n  }\n\n  /**\n   * compute dailyCron\n   *\n   * @returns string dailyCron\n   */\n  private computeDailyCron(): string {\n    if (this.allForm.value.weekdaysOnly) {\n      return this.computeEveryWeekdayCron();\n    }\n    return this.computeEveryDaysCron();\n  }\n\n  /**\n   * compute EveryDaysCron\n   *\n   * @returns string EveryDayscron\n   */\n  private computeEveryDaysCron(): string {\n    const state: any = this.allForm.value;\n    return `${this.isCronFlavorQuartz ? state.seconds : ''} ${\n      state.minutes\n    } ${this.hourToCron(state?.hours, state.hoursType)} 1/${state.daysPer} * ${\n      this.weekDayDefaultChar\n    } ${this.yearDefaultChar}`.trim();\n  }\n\n  /**\n   * compute everyWeekdayCron\n   *\n   * @returns string everyWeekdayCron\n   */\n  private computeEveryWeekdayCron(): string {\n    const state: any = this.allForm.value;\n    return `${this.isCronFlavorQuartz ? state.seconds : ''} ${\n      state.minutes\n    } ${this.hourToCron(state.hours, state.hoursType)} ${\n      this.monthDayDefaultChar\n    } * MON-FRI ${this.yearDefaultChar}`.trim();\n  }\n\n  /**\n   * compute weeklyCron\n   *\n   * @returns string weeklyCron\n   */\n  private computeWeeklyCron(): string {\n    const state: any = this.allForm.value;\n    const days = this.selectOptions.days\n      .reduce(\n        (acc: any, day: any) => (state[day] ? acc.concat([day]) : acc),\n        []\n      )\n      .join(',');\n    return `${this.isCronFlavorQuartz ? state.seconds : ''} ${\n      state.minutes\n    } ${this.hourToCron(state.hours, state.hoursType)} ${\n      this.monthDayDefaultChar\n    } * ${days} ${this.yearDefaultChar}`.trim();\n  }\n\n  /**\n   * compute monthlyCron\n   *\n   * @returns string monthlyCron\n   */\n  private computeMonthlyCron(): string {\n    const state: any = this.allForm.value;\n    if (state.specificWeekDay) {\n      return `${this.isCronFlavorQuartz ? state.seconds : ''} ${\n        state.minutes\n      } ${this.hourToCron(state.hours, state.hoursType)} ${\n        this.monthDayDefaultChar\n      } 1/${state.monthsInc} ${state.day}${state.monthsWeek} ${\n        this.yearDefaultChar\n      }`.trim();\n    }\n    return `${this.isCronFlavorQuartz ? state.seconds : ''} ${\n      state.minutes\n    } ${this.hourToCron(state.hours, state.hoursType)} ${state.days} 1/${\n      state.monthsInc\n    } ${this.weekDayDefaultChar} ${this.yearDefaultChar}`.trim();\n  }\n\n  /**\n   * compute yearlyCron\n   *\n   * @returns string yearlyCron\n   */\n  private computeYearlyCron(): string {\n    const state: any = this.allForm.value;\n    if (state.specificMonthWeek) {\n      return `${this.isCronFlavorQuartz ? state.seconds : ''} ${\n        state.minutes\n      } ${this.hourToCron(state.hours, state.hoursType)} ${\n        this.monthDayDefaultChar\n      } ${state.months} ${state.day}${state.monthsWeek} ${\n        this.yearDefaultChar\n      }`.trim();\n    }\n    return `${this.isCronFlavorQuartz ? state.seconds : ''} ${\n      state.minutes\n    } ${this.hourToCron(state.hours, state.hoursType)} ${state.day} ${\n      state.months\n    } ${this.weekDayDefaultChar} ${this.yearDefaultChar}`.trim();\n  }\n\n  /**\n   * compute AdvancedExpression\n   *\n   * @returns state expression\n   */\n  private computeAdvancedExpression(): string {\n    const state: any = this.allForm.value;\n    return state.expression;\n  }\n\n  /**\n   * Display day\n   *\n   * @param day day\n   * @returns Days\n   */\n  public dayDisplay(day: string): string {\n    return this.translate.instant(Days[day]);\n  }\n\n  /**\n   * Display monthWeek\n   *\n   * @param monthWeekNumber monthWeekNumber\n   * @returns MonthWeeks\n   */\n  public monthWeekDisplay(monthWeekNumber: string): string {\n    return this.translate.instant(MonthWeeks[monthWeekNumber]);\n  }\n\n  /**\n   * Display month\n   *\n   * @param month month\n   * @returns Month\n   */\n  public monthDisplay(month: number): string {\n    return this.translate.instant(Months[month]);\n  }\n\n  /**\n   * Display monthDay\n   *\n   * @param month month\n   * @returns monthDay\n   */\n  public monthDayDisplay(month: string): string {\n    if (month === 'L') {\n      return this.translate.instant('common.cronEditor.lastDay');\n    } else if (month === 'LW') {\n      return this.translate.instant('common.cronEditor.lastWeekDay');\n    } else if (month === '1W') {\n      return this.translate.instant('common.cronEditor.firstWeekDay');\n    } else {\n      return `${month}${this.getOrdinalSuffix(month)}`;\n    }\n  }\n\n  /**\n   * Get AmPm hour\n   *\n   * @param hour hour\n   * @returns hour\n   */\n  private getAmPmHour(hour: number) {\n    return this.options.use24HourTime ? hour : ((hour + 11) % 12) + 1;\n  }\n\n  /**\n   * Get hour type\n   *\n   * @param hour hour\n   * @returns hour type\n   */\n  private getHourType(hour: number) {\n    return this.options.use24HourTime ? undefined : hour >= 12 ? 'PM' : 'AM';\n  }\n\n  /**\n   * Convert hour to cron\n   *\n   * @param hour hour\n   * @param hourType hour type\n   * @returns hour\n   */\n  private hourToCron(hour: number, hourType: string) {\n    if (this.options.use24HourTime) {\n      return hour;\n    } else {\n      return hourType === 'AM'\n        ? hour === 12\n          ? 0\n          : hour\n        : hour === 12\n        ? 12\n        : hour + 12;\n    }\n  }\n\n  /**\n   * Handle model change\n   *\n   * @param cron cron\n   */\n  private handleModelChange(cron: string) {\n    if (!this.cronIsValid(cron)) {\n      if (this.isCronFlavorQuartz) {\n        console.error('Invalid cron expression, there must be 6 or 7 segments');\n      }\n      if (this.isCronFlavorStandard) {\n        console.error('Invalid cron expression, there must be 5 segments');\n      }\n    }\n\n    // Store original cron expression here.\n    this.allForm.controls.expression.setValue(cron);\n\n    // Normalize cron so that second segment is included.\n    if (cron.split(' ').length === 5 && this.isCronFlavorStandard) {\n      cron = `0 ${cron} *`;\n    }\n\n    // Parse cron tokens\n    const t = cron.split(' ');\n\n    // Seconds\n    this.allForm.controls.seconds.setValue(parseInt(t[0], 10), {\n      emitEvent: false,\n    });\n\n    // Minutes\n    let x = parseCronNumberToken(t[1]);\n    this.allForm.controls.minutesPer.setValue(x.inc, {\n      emitEvent: false,\n    });\n    this.allForm.controls.minutes.setValue(x.val);\n\n    // Hours\n    x = parseCronNumberToken(t[2]);\n    this.allForm.controls.hoursPer.setValue(x.inc);\n    this.allForm.controls.hours.setValue(x.val);\n    if (this.allForm.value.hours) {\n      this.allForm.controls.hoursType.setValue(\n        this.getHourType(this.allForm.value.hours),\n        {\n          emitEvent: false,\n        }\n      );\n    }\n\n    // Day of Month\n    x = parseCronNumberToken(t[3]);\n    this.allForm.controls.days.setValue(x.val, { emitEvent: false });\n    this.allForm.controls.daysPer.setValue(x.val),\n      {\n        emitEvent: false,\n      };\n\n    // Month\n    x = parseCronNumberToken(t[4]);\n    this.allForm.controls.months.setValue(x.val, {\n      emitEvent: false,\n    });\n    this.allForm.controls.monthsInc.setValue(x.inc, {\n      emitEvent: false,\n    });\n\n    // Day of Week\n    this.allForm.controls.day.setValue(t[5]);\n    if (t[5].match('MON')) {\n      this.allForm.controls.MON.setValue(true, {\n        emitEvent: false,\n      });\n    } else {\n      this.allForm.controls.MON.setValue(false, {\n        emitEvent: false,\n      });\n    }\n\n    if (t[5].match('TUE')) {\n      this.allForm.controls.TUE.setValue(true, {\n        emitEvent: false,\n      });\n    } else {\n      this.allForm.controls.TUE.setValue(false, {\n        emitEvent: false,\n      });\n    }\n\n    if (t[5].match('WED')) {\n      this.allForm.controls.WED.setValue(true, {\n        emitEvent: false,\n      });\n    } else {\n      this.allForm.controls.WED.setValue(false, {\n        emitEvent: false,\n      });\n    }\n\n    if (t[5].match('THU')) {\n      this.allForm.controls.THU.setValue(true, {\n        emitEvent: false,\n      });\n    } else {\n      this.allForm.controls.THU.setValue(false, {\n        emitEvent: false,\n      });\n    }\n\n    if (t[5].match('FRI')) {\n      this.allForm.controls.FRI.setValue(true, { emitEvent: false });\n    } else {\n      this.allForm.controls.FRI.setValue(false, { emitEvent: false });\n    }\n\n    if (t[5].match('SAT')) {\n      this.allForm.controls.SAT.setValue(true, { emitEvent: false });\n    } else {\n      this.allForm.controls.SAT.setValue(false, { emitEvent: false });\n    }\n\n    if (t[5].match('SUN')) {\n      this.allForm.controls.SUN.setValue(true, { emitEvent: false });\n    } else {\n      this.allForm.controls.SUN.setValue(false, { emitEvent: false });\n    }\n\n    // Year\n    // Not supported\n\n    if (cron.match(minutesExp)) {\n      this.allForm.controls.cronType.setValue('minutely', { emitEvent: false });\n    } else if (cron.match(hourlyExp)) {\n      this.allForm.controls.cronType.setValue('hourly', { emitEvent: false });\n    } else if (cron.match(dailyExp)) {\n      this.allForm.controls.cronType.setValue('daily', { emitEvent: false });\n      this.allForm.controls.weekdaysOnly.setValue(false);\n    } else if (cron.match(dailyWeekdayExp)) {\n      this.allForm.controls.cronType.setValue('daily', { emitEvent: false });\n      this.allForm.controls.weekdaysOnly.setValue(true);\n    } else if (cron.match(weeklyExp)) {\n      this.allForm.controls.cronType.setValue('weekly', { emitEvent: false });\n    } else if (cron.match(monthlyExpo)) {\n      this.allForm.controls.cronType.setValue('monthly', { emitEvent: false });\n      this.allForm.controls.specificWeekDay.setValue(false);\n    } else if (cron.match(monthlyWeekdayExpo)) {\n      this.allForm.controls.cronType.setValue('monthly', { emitEvent: false });\n      this.allForm.controls.specificWeekDay.setValue(true);\n    } else if (cron.match(yearlyExp)) {\n      this.allForm.controls.cronType.setValue('yearly', { emitEvent: false });\n      this.allForm.controls.specificMonthWeek.setValue(false);\n    } else if (cron.match(yearlyMonthWeekExp)) {\n      this.allForm.controls.cronType.setValue('yearly', { emitEvent: false });\n      this.allForm.controls.specificMonthWeek.setValue(false);\n    } else {\n      this.allForm.controls.cronType.setValue('unknown', { emitEvent: false });\n    }\n    this.allForm.updateValueAndValidity({ onlySelf: true });\n  }\n\n  /**\n   * Cron is valid\n   *\n   * @param cron cron\n   * @returns boolean\n   */\n  private cronIsValid(cron: string): boolean {\n    if (cron) {\n      const cronParts = cron.split(' ');\n      return (\n        (this.isCronFlavorQuartz &&\n          (cronParts.length === 6 || cronParts.length === 7)) ||\n        (this.isCronFlavorStandard &&\n          cronParts.length === 5 &&\n          !cron.includes('undefined'))\n      );\n    }\n\n    return false;\n  }\n\n  /**\n   * Get Ordinal Suffix\n   *\n   * @param value value\n   * @returns string\n   */\n  private getOrdinalSuffix(value: string) {\n    if (value.length > 1) {\n      const secondToLastDigit = value.charAt(value.length - 2);\n      if (secondToLastDigit === '1') {\n        return 'th';\n      }\n    }\n\n    const lastDigit = value.charAt(value.length - 1);\n    switch (lastDigit) {\n      case '1':\n        return 'st';\n      case '2':\n        return 'nd';\n      case '3':\n        return 'rd';\n      default:\n        return 'th';\n    }\n  }\n\n  /**\n   * Get Select Options\n   *\n   * @returns select options\n   */\n  private getSelectOptions() {\n    return {\n      months: this.getRange(1, 12),\n      monthWeeks: ['#1', '#2', '#3', '#4', '#5', 'L'],\n      days: ['MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN'],\n      minutes: this.getRange(0, 59),\n      fullMinutes: this.getRange(0, 59),\n      seconds: this.getRange(0, 59),\n      hours: this.getRange(1, 23),\n      monthDays: this.getRange(1, 31),\n      monthDaysWithLasts: [\n        '1W',\n        ...[...this.getRange(1, 31).map(String)],\n        'LW',\n        'L',\n      ],\n      monthDaysWithOutLasts: [...[...this.getRange(1, 31).map(String)]],\n      hourTypes: ['AM', 'PM'],\n    };\n  }\n\n  /**\n   * Get Range\n   *\n   * @param start start value\n   * @param end end value\n   * @returns Days\n   */\n  private getRange(start: number, end: number): number[] {\n    const length = end - start + 1;\n    return [...Array(length)].map((_, i) => i + start);\n  }\n\n  /**\n   * Write value\n   *\n   * @param obj obj\n   */\n  writeValue(obj: string | null): void {\n    if (obj === null) {\n      return;\n    }\n    this.handleModelChange(obj);\n  }\n\n  /**\n   * RegisterOnChange\n   *\n   * @param fn fn\n   */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /**\n   * RegisterOnTouched\n   *\n   * @param fn fn\n   */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * setDisabledState\n   *\n   * @param isDisabled boolean\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /**\n   * markAsTouched\n   *\n   */\n  markAsTouched() {\n    if (!this.touched) {\n      this.onTouched();\n      this.touched = true;\n    }\n  }\n\n  /**\n   * Change the monthly radio\n   *\n   * @param val is specific week day\n   */\n  public monthRadioChange(val: boolean) {\n    this.allForm.get('specificWeekDay')?.setValue(val);\n  }\n\n  /**\n   * Change the yearly radio\n   *\n   *  @param val is specific month week\n   */\n  public yearlyRadioChange(val: any) {\n    this.allForm.get('day')?.setValue('1');\n    this.allForm.get('specificMonthWeek')?.setValue(val);\n  }\n}\n",
            "properties": [
                {
                    "name": "inc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "val",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 55
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "description": "<p>Interface declaration CronToken</p>\n",
            "rawdescription": "\nInterface declaration CronToken",
            "methods": []
        },
        {
            "name": "TimePickerModel",
            "id": "interface-TimePickerModel-6f7c973c8d5a4a32c5eb4113d0cc12c26dec9bae0ea577b0f0a1ba9368c4a6c37142bf16b55b267ebfea18883a15239e3d4b1ff0b0ad7d4549923c15bfd9e03f",
            "file": "libs/ui/src/lib/cron-editor/time-picker/time-picker.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { ControlContainer, FormGroup } from '@angular/forms';\n\n/** TimePicker interface declaration */\nexport interface TimePickerModel {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n}\n\n/**\n * generate numbers in some range\n *\n * @param start start range\n * @param end end range\n * @yields i\n */\nfunction* range(start: number, end: number) {\n  for (let i = start; i <= end; i++) {\n    yield i;\n  }\n}\n\n/**\n * UI TimePicker Component\n */\n@Component({\n  selector: 'ui-cron-time-picker',\n  templateUrl: './time-picker.component.html',\n  styleUrls: ['./time-picker.component.scss'],\n})\nexport class TimePickerComponent implements OnInit {\n  /** Whether time picker is disabled or not */\n  @Input() public disabled = false;\n  /** Whether to use 24 hour time or not */\n  @Input() public use24HourTime = true;\n  /** Whether to hide hours or not */\n  @Input() public hideHours = false;\n  /** Whether to hide minutes or not */\n  @Input() public hideMinutes = false;\n  /** Whether to hide seconds or not */\n  @Input() public hideSeconds = true;\n\n  /** Form group */\n  allForm!: FormGroup;\n\n  /** Minutes range */\n  public minutes = [...range(0, 59)];\n  /** Seconds range */\n  public seconds = [...range(0, 59)];\n  /** Hour types */\n  public hourTypes = ['AM', 'PM'];\n\n  /** @returns hours */\n  get hours(): number[] {\n    return this.use24HourTime ? [...range(0, 23)] : [...range(0, 12)];\n  }\n\n  /**\n   * Ui TimePicker constructor\n   *\n   * @param parent parent ControlContainer\n   */\n  constructor(public parent: ControlContainer) {}\n\n  ngOnInit(): void {\n    this.allForm = this.parent.control as FormGroup;\n  }\n}\n",
            "properties": [
                {
                    "name": "days",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "hours",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "minutes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "seconds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "description": "<p>TimePicker interface declaration</p>\n",
            "rawdescription": "\nTimePicker interface declaration",
            "methods": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AlertComponent",
            "id": "component-AlertComponent-13a26a6a5014630985e26cf8b9554d3710d6bcd0e5dd2dae0de1013af4273cf6c89d743a119a9bbdc33694ee9fc40402f91cfa34a3193253e0d96687800155a9",
            "file": "libs/ui/src/lib/alert/alert.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-alert",
            "styleUrls": [
                "./alert.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./alert.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "border",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDetermines if the alert component should have a border.",
                    "description": "<p>Determines if the alert component should have a border.</p>\n",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "closable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nControls whether the alert can be dismissed by the user.",
                    "description": "<p>Controls whether the alert can be dismissed by the user.</p>\n",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showIcon",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nControls the visibility of an icon in the alert component.",
                    "description": "<p>Controls the visibility of an icon in the alert component.</p>\n",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDefines the visual theme of the alert component.",
                    "description": "<p>Defines the visual theme of the alert component.</p>\n",
                    "line": 24,
                    "type": "AlertVariant",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "close",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEmits an event when the alert is closed.",
                    "description": "<p>Emits an event when the alert is closed.</p>\n",
                    "line": 33,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "closeTimeoutListener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NodeJS.Timeout",
                    "optional": false,
                    "description": "<p>Timeout to close</p>\n",
                    "line": 35,
                    "rawdescription": "\nTimeout to close",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCloses the alert and emits an event",
                    "description": "<p>Closes the alert and emits an event</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>UI Alert Component.\n The UI Alert Component is a user interface component that displays alert messages to the user.\n It can be used to display information, warning, error, or success messages.</p>\n",
            "rawdescription": "\n\nUI Alert Component.\n The UI Alert Component is a user interface component that displays alert messages to the user.\n It can be used to display information, warning, error, or success messages.\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  OnDestroy,\n} from '@angular/core';\nimport { AlertVariant } from './types/alert-variant';\nimport { Variant } from '../types/variant';\n\n/**\n * UI Alert Component.\n *  The UI Alert Component is a user interface component that displays alert messages to the user.\n *  It can be used to display information, warning, error, or success messages.\n */\n@Component({\n  selector: 'ui-alert',\n  templateUrl: './alert.component.html',\n  styleUrls: ['./alert.component.scss'],\n})\nexport class AlertComponent implements OnDestroy {\n  /** Defines the visual theme of the alert component. */\n  @Input() variant: AlertVariant = 'default';\n  /** Controls whether the alert can be dismissed by the user. */\n  @Input() closable = false;\n  /** Determines if the alert component should have a border. */\n  @Input() border = false;\n  /**  Controls the visibility of an icon in the alert component. */\n  @Input() showIcon = true;\n  /** Emits an event when the alert is closed. */\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() close = new EventEmitter<Event>();\n  /** Timeout to close */\n  private closeTimeoutListener!: NodeJS.Timeout;\n\n  /**\n   * UI Alert Component\n   *\n   * @param host Angular element ref\n   */\n  constructor(private host: ElementRef<HTMLElement>) {}\n\n  /** Closes the alert and emits an event */\n  onClose() {\n    if (this.closeTimeoutListener) {\n      clearTimeout(this.closeTimeoutListener);\n    }\n    this.closeTimeoutListener = setTimeout(() => {\n      this.close.emit();\n    }, 300);\n    this.host.nativeElement.remove();\n  }\n\n  /** @returns icon */\n  get resolveIcon(): string {\n    switch (this.variant) {\n      case 'default':\n        return 'info';\n      case 'primary':\n        return 'description';\n      case 'success':\n        return 'check_circle';\n      case 'danger':\n        return 'dangerous';\n      case 'warning':\n        return 'warning';\n    }\n  }\n\n  /** @returns button variant */\n  get resolveButtonVariant(): Variant {\n    switch (this.variant) {\n      case 'default':\n        return 'grey';\n      case 'primary':\n        return 'primary';\n      case 'success':\n        return 'success';\n      case 'danger':\n        return 'danger';\n      case 'warning':\n        return 'warning';\n    }\n  }\n\n  /** @returns get alert classes */\n  get resolveAlertClasses(): string[] {\n    const classes: string[] = [];\n    const borderClasses = ['border-l-4'];\n    switch (this.variant) {\n      case 'default': {\n        classes.push('bg-gray-50');\n        classes.push('text-gray-800');\n        if (this.border) {\n          classes.push(...borderClasses);\n          classes.push('border-gray-400');\n        }\n        break;\n      }\n      case 'primary': {\n        classes.push('bg-primary-50');\n        classes.push('text-primary-800');\n        if (this.border) {\n          classes.push(...borderClasses);\n          classes.push('border-primary-400');\n        }\n        break;\n      }\n      case 'success': {\n        classes.push('bg-green-50');\n        classes.push('text-green-800');\n        if (this.border) {\n          classes.push(...borderClasses);\n          classes.push('border-green-400');\n        }\n        break;\n      }\n      case 'danger': {\n        classes.push('bg-red-50');\n        classes.push('text-red-800');\n        if (this.border) {\n          classes.push(...borderClasses);\n          classes.push('border-red-400');\n        }\n        break;\n      }\n      case 'warning': {\n        classes.push('bg-yellow-50');\n        classes.push('text-yellow-800');\n        if (this.border) {\n          classes.push(...borderClasses);\n          classes.push('border-yellow-400');\n        }\n        break;\n      }\n    }\n    return classes;\n  }\n\n  ngOnDestroy(): void {\n    if (this.closeTimeoutListener) {\n      clearTimeout(this.closeTimeoutListener);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// $spacing-left: 0.8em;\n// $spacing-right: 0.8em;\n\n// :host {\n//   display: block;\n// }\n\n// .ui-alert-content {\n//   flex-grow: 1;\n//   padding: $spacing-left $spacing-right;\n//   display: flex;\n//   align-items: center;\n//   gap: 8px;\n// }\n\n// .close-alert {\n//   animation: close-sequence 300ms ease-in-out forwards;\n// }\n\n// .close-button {\n//   ::ng-deep button:not(:hover) {\n//     box-shadow: none;\n//   }\n// }\n\n// @keyframes close-sequence {\n//   100% {\n//     opacity: 0;\n//   }\n// }\n",
                    "styleUrl": "./alert.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>UI Alert Component</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "host",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "rawdescription": "\n\nUI Alert Component\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1261,
                            "end": 1265,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "host"
                        },
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1255,
                            "end": 1260,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Angular element ref</p>\n"
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ],
            "accessors": {
                "resolveIcon": {
                    "name": "resolveIcon",
                    "getSignature": {
                        "name": "resolveIcon",
                        "type": "string",
                        "returnType": "string",
                        "line": 56,
                        "rawdescription": "",
                        "description": "",
                        "jsdoctags": [
                            {
                                "pos": 1636,
                                "end": 1650,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 1637,
                                    "end": 1644,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>icon</p>\n"
                            }
                        ]
                    }
                },
                "resolveButtonVariant": {
                    "name": "resolveButtonVariant",
                    "getSignature": {
                        "name": "resolveButtonVariant",
                        "type": "",
                        "returnType": "Variant",
                        "line": 72,
                        "rawdescription": "",
                        "description": "",
                        "jsdoctags": [
                            {
                                "pos": 1975,
                                "end": 1999,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 1976,
                                    "end": 1983,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>button variant</p>\n"
                            }
                        ]
                    }
                },
                "resolveAlertClasses": {
                    "name": "resolveAlertClasses",
                    "getSignature": {
                        "name": "resolveAlertClasses",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 88,
                        "rawdescription": "",
                        "description": "",
                        "jsdoctags": [
                            {
                                "pos": 2322,
                                "end": 2349,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 2323,
                                    "end": 2330,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>get alert classes</p>\n"
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"rounded-md p-4\" [ngClass]=\"resolveAlertClasses\">\n  <div class=\"flex\">\n    <!-- Icon -->\n    <div *ngIf=\"showIcon\" class=\"flex-shrink-0\">\n      <ui-icon [icon]=\"resolveIcon\" [variant]=\"resolveButtonVariant\"></ui-icon>\n    </div>\n    <!-- Content -->\n    <div class=\"ml-3 text-sm\">\n      <ng-content></ng-content>\n    </div>\n    <!-- Dismiss -->\n    <div *ngIf=\"closable\" class=\"ml-auto pl-3\">\n      <ui-button\n        class=\"-mx-3 -my-2\"\n        [isIcon]=\"true\"\n        icon=\"close\"\n        [variant]=\"resolveButtonVariant\"\n        category=\"primary\"\n        (click)=\"onClose()\"\n        [uiTooltip]=\"'common.close' | translate\"\n      ></ui-button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "AutocompleteComponent",
            "id": "component-AutocompleteComponent-075b599e8c33042fbc8c21f35f8eb8d3c9e6c63dd218b33c8eef559ef38595cae3a963094789777004e9ce501feba52b6133576acf7d0020ffe0509fe07a35cf",
            "file": "libs/ui/src/lib/autocomplete/autocomplete.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-autocomplete",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./autocomplete.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "openPanel",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Boolean to control the visibility of the options panel.</p>\n",
                    "line": 25,
                    "rawdescription": "\nBoolean to control the visibility of the options panel."
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<OptionComponent>",
                    "optional": false,
                    "description": "<p>List of OptionComponent descendants.</p>\n",
                    "line": 23,
                    "rawdescription": "\nList of OptionComponent descendants.",
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "OptionComponent, {descendants: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "<p>Reference to the component&#39;s template.</p>\n",
                    "line": 20,
                    "rawdescription": "\nReference to the component's template.",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TemplateRef"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>UI Autocomplete component\nAutocomplete is a UI component that provides suggestions while you type into the field.</p>\n",
            "rawdescription": "\n\nUI Autocomplete component\nAutocomplete is a UI component that provides suggestions while you type into the field.\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ContentChildren,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { OptionComponent } from './components/option.component';\n\n/**\n * UI Autocomplete component\n * Autocomplete is a UI component that provides suggestions while you type into the field.\n */\n@Component({\n  selector: 'ui-autocomplete',\n  templateUrl: './autocomplete.component.html',\n})\nexport class AutocompleteComponent {\n  /** Reference to the component's template. */\n  @ViewChild(TemplateRef) templateRef!: TemplateRef<any>;\n  /** List of OptionComponent descendants. */\n  @ContentChildren(OptionComponent, { descendants: true })\n  options!: QueryList<OptionComponent>;\n  /** Boolean to control the visibility of the options panel. */\n  openPanel = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<ng-template>\n  <div class=\"relative w-full max-w-sm\">\n    <ul\n      id=\"autocompleteList\"\n      class=\"z-10 block max-h-60 w-full overflow-auto mt-2 rounded-md bg-white ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm\"\n    >\n      <ng-content></ng-content>\n    </ul>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "AvatarComponent",
            "id": "component-AvatarComponent-200fe5fe28bfb8e18b49ad8b43370897ad7cd2ef2b4d47bee7bf4634491714e82b102c9c2f6f3e2b04380180272a1a4496622405d98266486198f421330eb50c",
            "file": "libs/ui/src/lib/avatar/avatar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-avatar",
            "styleUrls": [
                "./avatar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./avatar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "image",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAvatar image",
                    "description": "<p>Avatar image</p>\n",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "initials",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nshort text",
                    "description": "<p>short text</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "shape",
                    "defaultValue": "'circle'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAvatar shape",
                    "description": "<p>Avatar shape</p>\n",
                    "line": 23,
                    "type": "AvatarShape",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSize of avatar",
                    "description": "<p>Size of avatar</p>\n",
                    "line": 17,
                    "type": "Size",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nVariant: defines the colors",
                    "description": "<p>Variant: defines the colors</p>\n",
                    "line": 19,
                    "type": "Category",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>UI Avatar Component\nDisplay an avatar with initials or image.</p>\n",
            "rawdescription": "\n\nUI Avatar Component\nDisplay an avatar with initials or image.\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Size } from '../types/size';\nimport { Category } from '../types/category';\nimport { AvatarShape } from './types/avatar-shape';\n\n/**\n * UI Avatar Component\n * Display an avatar with initials or image.\n */\n@Component({\n  selector: 'ui-avatar',\n  templateUrl: './avatar.component.html',\n  styleUrls: ['./avatar.component.scss'],\n})\nexport class AvatarComponent {\n  /** Size of avatar */\n  @Input() size: Size = 'medium';\n  /** Variant: defines the colors */\n  @Input() variant: Category = 'primary';\n  /** Avatar image */\n  @Input() image = '';\n  /** Avatar shape */\n  @Input() shape: AvatarShape = 'circle';\n  /** short text */\n  @Input() initials = '';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".avatar-small {\n  @apply h-6 w-6;\n}\n.avatar-medium {\n  @apply h-10 w-10;\n}\n.avatar-large {\n  @apply h-14 w-14;\n}\n.avatar-circle {\n  @apply rounded-full;\n}\n.avatar-rectangle {\n  @apply rounded-md;\n}\n.avatar-initials {\n  @apply inline-flex items-center justify-center;\n}\n.avatar-not-initials {\n  @apply block;\n}\n.avatar-secondary-background {\n  @apply bg-gray-500;\n}\n.avatar-primary-text {\n  @apply text-gray-500;\n}\n.avatar-secondary-text {\n  @apply text-white;\n}\n.avatar-tertiary-text {\n  @apply text-gray-500;\n}\n.avatar-tertiary-border {\n  @apply border-gray-500 border-2;\n}\n",
                    "styleUrl": "./avatar.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<span\n  [ngClass]=\"{\n    'avatar-small': size === 'small',\n    'avatar-medium': size === 'medium',\n    'avatar-large': size === 'large',\n    'avatar-circle': shape === 'circle',\n    'avatar-rectangle': shape === 'rectangle',\n    'avatar-initials': initials !== '',\n    'avatar-not-initials': initials === '',\n    'bg-white': variant !== 'secondary',\n    'bg-gray-500': variant === 'secondary',\n    'avatar-tertiary-border': variant === 'tertiary'\n  }\"\n  class=\"overflow-hidden ring-2 ring-transparent\"\n>\n  <ng-container *ngIf=\"image; else noIconTmpl\">\n    <img\n      [ngClass]=\"{\n        'avatar-circle': shape === 'circle',\n        'avatar-rectangle': shape === 'rectangle'\n      }\"\n      class=\"inline-block h-full w-full\"\n      src=\"{{ image }}\"\n      alt=\"\"\n    />\n  </ng-container>\n  <ng-template #noIconTmpl>\n    <ng-container *ngIf=\"initials !== ''\">\n      <span\n        [ngClass]=\"{\n          'avatar-primary-text': variant === 'primary',\n          'avatar-secondary-text': variant === 'secondary',\n          'avatar-tertiary-text': variant === 'tertiary'\n        }\"\n        class=\"text-base font-medium leading-none\"\n      >\n        {{ initials }}</span\n      >\n    </ng-container>\n\n    <ng-container *ngIf=\"initials === ''\">\n      <svg\n        class=\"h-full w-full text-gray-300\"\n        fill=\"currentColor\"\n        viewBox=\"0 0 24 24\"\n      >\n        <path\n          d=\"M24 20.993V24H0v-2.996A14.977 14.977 0 0112.004 15c4.904 0 9.26 2.354 11.996 5.993zM16.002 8.999a4 4 0 11-8 0 4 4 0 018 0z\"\n        />\n      </svg>\n    </ng-container>\n  </ng-template>\n</span>\n"
        },
        {
            "name": "AvatarGroupComponent",
            "id": "component-AvatarGroupComponent-b2259c755ab5547d81cd0433640eaff261688cc144352643261cb0c6bb934bc96ef756579bacd4f2129b5e357e8ee117d4a16bcba84ffb8ec9bcecc8806a09fc",
            "file": "libs/ui/src/lib/avatar-group/avatar-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-avatar-group",
            "styleUrls": [
                "./avatar-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./avatar-group.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "limit",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nLimit on the number of avatars displayed.",
                    "description": "<p>Limit on the number of avatars displayed.</p>\n",
                    "line": 32,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "shape",
                    "defaultValue": "'circle'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nShape of the avatars.",
                    "description": "<p>Shape of the avatars.</p>\n",
                    "line": 28,
                    "type": "AvatarShape",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSize of the avatars.",
                    "description": "<p>Size of the avatars.</p>\n",
                    "line": 26,
                    "type": "Size",
                    "decorators": []
                },
                {
                    "name": "stack",
                    "defaultValue": "'top'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nStack order of the avatars.",
                    "description": "<p>Stack order of the avatars.</p>\n",
                    "line": 30,
                    "type": "AvatarGroupStack",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "avatars",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<AvatarComponent>",
                    "optional": false,
                    "description": "<p>List of AvatarComponent children.</p>\n",
                    "line": 34,
                    "rawdescription": "\nList of AvatarComponent children.",
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "AvatarComponent"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>UI Avatar group component\nDisplay a group of avatars.</p>\n",
            "rawdescription": "\n\nUI Avatar group component\nDisplay a group of avatars.\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  AfterViewInit,\n  Renderer2,\n  ElementRef,\n  QueryList,\n  ContentChildren,\n} from '@angular/core';\nimport { AvatarGroupStack } from './types/avatar-group-stack';\nimport { AvatarComponent } from '../avatar/avatar.component';\nimport { Size } from '../types/size';\nimport { AvatarShape } from '../avatar/types/avatar-shape';\n\n/**\n * UI Avatar group component\n * Display a group of avatars.\n */\n@Component({\n  selector: 'ui-avatar-group',\n  templateUrl: './avatar-group.component.html',\n  styleUrls: ['./avatar-group.component.scss'],\n})\nexport class AvatarGroupComponent implements AfterViewInit {\n  /** Size of the avatars. */\n  @Input() size: Size = 'medium';\n  /** Shape of the avatars. */\n  @Input() shape: AvatarShape = 'circle';\n  /** Stack order of the avatars. */\n  @Input() stack: AvatarGroupStack = 'top';\n  /** Limit on the number of avatars displayed. */\n  @Input() limit = 5;\n  /** List of AvatarComponent children. */\n  @ContentChildren(AvatarComponent) avatars!: QueryList<AvatarComponent>;\n\n  /**\n   * Constructor of AvatarGroupComponent\n   *\n   * @param renderer Renderer2\n   * @param el The host element\n   */\n  constructor(private renderer: Renderer2, private el: ElementRef) {}\n\n  ngAfterViewInit(): void {\n    if (this.stack === 'top') {\n      const avatars = this.el.nativeElement.querySelectorAll('ui-avatar');\n      const total_avatars = avatars.length;\n      Array.from(avatars).forEach((avatar: any, index: number) => {\n        this.renderer.setStyle(avatar, 'z-index', `${total_avatars - index}`);\n      });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./avatar-group.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Constructor of AvatarGroupComponent</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "rawdescription": "\n\nConstructor of AvatarGroupComponent\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1100,
                            "end": 1108,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1094,
                            "end": 1099,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Renderer2</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1131,
                            "end": 1133,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "el"
                        },
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1125,
                            "end": 1130,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>The host element</p>\n"
                    }
                ]
            },
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div\n  class=\"flex -space-x-2 overflow-hidden\"\n  [ngClass]=\"{ isolate: stack === 'top' }\"\n>\n  <!-- Reinject avatars in the group -->\n  <ui-avatar\n    *ngFor=\"let avatar of avatars.toArray().slice(0, limit)\"\n    [image]=\"avatar.image\"\n    [initials]=\"avatar.initials\"\n    [variant]=\"avatar.variant\"\n    [shape]=\"shape\"\n    [size]=\"size\"\n  ></ui-avatar>\n  <!-- Display remaining avatars, based on limit -->\n  <ui-avatar\n    *ngIf=\"avatars.toArray().slice(limit).length > 0\"\n    [size]=\"size\"\n    variant=\"secondary\"\n    [shape]=\"shape\"\n    [initials]=\"'+' + avatars.toArray().slice(limit).length.toString()\"\n  >\n  </ui-avatar>\n</div>\n"
        },
        {
            "name": "BreadcrumbsComponent",
            "id": "component-BreadcrumbsComponent-eea971a6cd7e5eadeb1caa808bb7f21c16c4115d9604e0aa9ba044a03593af367f526cf4d1b5fee48b5c499a9a8feeee90dbef5109baa0a68a6e814b221b7a7b",
            "file": "libs/ui/src/lib/breadcrumbs/breadcrumbs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-breadcrumbs",
            "styleUrls": [
                "./breadcrumbs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./breadcrumbs.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "breadcrumbs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nArray of Breadcrumb objects.",
                    "description": "<p>Array of Breadcrumb objects.</p>\n",
                    "line": 26,
                    "type": "Breadcrumb[]",
                    "decorators": []
                },
                {
                    "name": "display",
                    "defaultValue": "'simple'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDisplay style of breadcrumbs.",
                    "description": "<p>Display style of breadcrumbs.</p>\n",
                    "line": 30,
                    "type": "BreadcrumbDisplay",
                    "decorators": []
                },
                {
                    "name": "separator",
                    "defaultValue": "'slash'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSeparator between breadcrumbs.",
                    "description": "<p>Separator between breadcrumbs.</p>\n",
                    "line": 28,
                    "type": "BreadcrumbSeparator",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "breadcrumbList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLOListElement>",
                    "optional": false,
                    "description": "<p>Reference to the breadcrumb list element.</p>\n",
                    "line": 33,
                    "rawdescription": "\nReference to the breadcrumb list element.",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'breadcrumbList', {static: true, read: ElementRef}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "expandedWidth",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Width of the expanded breadcrumb.</p>\n",
                    "line": 37,
                    "rawdescription": "\nWidth of the expanded breadcrumb."
                },
                {
                    "name": "isBreadcrumbOffLimits",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Boolean indicating if breadcrumb is off limits.</p>\n",
                    "line": 35,
                    "rawdescription": "\nBoolean indicating if breadcrumb is off limits."
                },
                {
                    "name": "loadBreadcrumbTimeoutListener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NodeJS.Timeout",
                    "optional": false,
                    "description": "<p>Timeout to load Breadcrumb</p>\n",
                    "line": 39,
                    "rawdescription": "\nTimeout to load Breadcrumb",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "loadBreadcrumb",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nKeep checking until breadcrumb is fully load\n",
                    "description": "<p>Keep checking until breadcrumb is fully load</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMethod to update off limit value when breadcrumbs change.",
                    "description": "<p>Method to update off limit value when breadcrumbs change.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onResize",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChange the display depending on windows size.\n\n",
                    "description": "<p>Change the display depending on windows size.</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3102,
                                "end": 3107,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3096,
                                "end": 3101,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Event that implies a change in window size</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateOffLimitValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate off limit value for the given breadcrumb\n",
                    "description": "<p>Update off limit value for the given breadcrumb</p>\n",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChange the display depending on windows size.\n\n",
                    "description": "<p>Change the display depending on windows size.</p>\n",
                    "jsdoctags": [
                        {
                            "pos": 3095,
                            "end": 3154,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 344,
                            "tagName": {
                                "pos": 3096,
                                "end": 3101,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Event that implies a change in window size</p>\n",
                            "name": {
                                "pos": 3102,
                                "end": 3107,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "line": 101
                }
            ],
            "standalone": false,
            "imports": [],
            "description": "<p>UI Breadcrumbs Component\nBreadcrumbs are a secondary navigation scheme that allows the user to see where the current page is in relation to the Web site&#39;s hierarchy.</p>\n",
            "rawdescription": "\n\nUI Breadcrumbs Component\nBreadcrumbs are a secondary navigation scheme that allows the user to see where the current page is in relation to the Web site's hierarchy.\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ElementRef,\n  HostListener,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { BreadcrumbDisplay } from './types/breadcrumb-display';\nimport { BreadcrumbSeparator } from './types/breadcrumb-separator';\nimport { Breadcrumb } from './interfaces/breadcrumb.interface';\nimport { isEqual } from 'lodash';\n/**\n * UI Breadcrumbs Component\n * Breadcrumbs are a secondary navigation scheme that allows the user to see where the current page is in relation to the Web site's hierarchy.\n */\n@Component({\n  selector: 'ui-breadcrumbs',\n  templateUrl: './breadcrumbs.component.html',\n  styleUrls: ['./breadcrumbs.component.scss'],\n})\nexport class BreadcrumbsComponent implements OnChanges, OnDestroy {\n  /** Array of Breadcrumb objects. */\n  @Input() breadcrumbs: Breadcrumb[] = [];\n  /** Separator between breadcrumbs. */\n  @Input() separator: BreadcrumbSeparator = 'slash';\n  /** Display style of breadcrumbs. */\n  @Input() display: BreadcrumbDisplay = 'simple';\n  /** Reference to the breadcrumb list element. */\n  @ViewChild('breadcrumbList', { static: true, read: ElementRef })\n  breadcrumbList!: ElementRef<HTMLOListElement>;\n  /** Boolean indicating if breadcrumb is off limits. */\n  isBreadcrumbOffLimits = false;\n  /** Width of the expanded breadcrumb. */\n  expandedWidth = 0;\n  /** Timeout to load Breadcrumb */\n  private loadBreadcrumbTimeoutListener!: NodeJS.Timeout;\n  /** Method to update off limit value when breadcrumbs change. */\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (\n      changes['breadcrumbs'] &&\n      !isEqual(\n        changes['breadcrumbs'].currentValue,\n        changes['breadcrumbs'].previousValue\n      )\n    ) {\n      this.updateOffLimitValue();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.loadBreadcrumbTimeoutListener) {\n      clearTimeout(this.loadBreadcrumbTimeoutListener);\n    }\n  }\n\n  /**\n   * Update off limit value for the given breadcrumb\n   */\n  private updateOffLimitValue(): void {\n    this.loadBreadcrumb().then(() => {\n      // Save the width with all the texts visible to handle minimal or full display later\n      this.expandedWidth = this.breadcrumbList?.nativeElement?.clientWidth;\n      // Check if the breadcrumb is within screen limits on load\n      this.isBreadcrumbOffLimits = window.innerWidth < this.expandedWidth;\n    });\n  }\n\n  /**\n   * Keep checking until breadcrumb is fully load\n   */\n  private loadBreadcrumb(): Promise<void> {\n    const checkAgain = (resolve: () => void) => {\n      if (this.breadcrumbs.every((bc) => bc.key || bc.text)) {\n        if (this.loadBreadcrumbTimeoutListener) {\n          clearTimeout(this.loadBreadcrumbTimeoutListener);\n        }\n        resolve();\n      } else {\n        if (this.loadBreadcrumbTimeoutListener) {\n          clearTimeout(this.loadBreadcrumbTimeoutListener);\n        }\n        this.loadBreadcrumbTimeoutListener = setTimeout(\n          () => checkAgain(resolve),\n          400\n        );\n      }\n    };\n    return new Promise(checkAgain);\n  }\n\n  /**\n   * Change the display depending on windows size.\n   *\n   * @param event Event that implies a change in window size\n   */\n  @HostListener('window:resize', ['$event'])\n  onResize(event: any): void {\n    this.isBreadcrumbOffLimits = event.target.innerWidth < this.expandedWidth;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".ui-breadcrumbs__simple {\n  @apply flex items-center;\n}\n.ui-breadcrumbs__contained {\n  @apply flex rounded-md bg-white px-6 shadow;\n}\n.ui-breadcrumbs__full {\n  @apply mx-auto flex w-full max-w-screen-xl px-4 sm:px-6 lg:px-8;\n}\n",
                    "styleUrl": "./breadcrumbs.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnChanges",
                "OnDestroy"
            ],
            "templateData": "<!-- Check the separator style and adapt accordingly -->\n<ng-template #separatorTmpl>\n  <ng-container [ngSwitch]=\"separator\">\n    <ng-container *ngSwitchCase=\"'chevron'\">\n      <svg\n        class=\"h-5 w-5 flex-shrink-0 text-gray-400\"\n        viewBox=\"-5 0 60 60\"\n        fill=\"currentColor\"\n        aria-hidden=\"true\"\n      >\n        <path d=\"M.293 0l22 22-22 22h1.414l22-22-22-22H.293z\" />\n      </svg>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'slash'\">\n      <svg\n        class=\"h-5 w-5 flex-shrink-0 text-gray-300\"\n        fill=\"currentColor\"\n        viewBox=\"0 0 20 20\"\n        aria-hidden=\"true\"\n      >\n        <path d=\"M5.555 17.776l8-16 .894.448-8 16-.894-.448z\" />\n      </svg>\n    </ng-container>\n  </ng-container>\n</ng-template>\n<nav\n  [ngClass]=\"{\n    'border-b border-gray-200 bg-white': display === 'full'\n  }\"\n  class=\"flex\"\n  aria-label=\"Breadcrumb\"\n>\n  <ol\n    #breadcrumbList\n    class=\"mb-2\"\n    role=\"list\"\n    [ngClass]=\"{\n      'ui-breadcrumbs__simple': display === 'simple',\n      'ui-breadcrumbs__contained': display === 'contained',\n      'ui-breadcrumbs__full': display === 'full'\n    }\"\n  >\n    <!-- For each breadcrumb in the breadcrumbs list -->\n    <li\n      *ngFor=\"let breadcrumb of breadcrumbs; let first = first; let last = last\"\n      (mouseenter)=\"breadcrumb.showLabel = true\"\n      (mouseleave)=\"breadcrumb.showLabel = false\"\n      class=\"flex pr-4\"\n    >\n      <div *ngIf=\"!first\">\n        <ng-container *ngTemplateOutlet=\"separatorTmpl\"></ng-container>\n      </div>\n      <!-- Breadcrumb link -->\n      <div [ngClass]=\"{ 'ml-4': !first }\" class=\"flex items-center\">\n        <a\n          *ngIf=\"breadcrumb.key || breadcrumb.text\"\n          [routerLink]=\"[breadcrumb.uri]\"\n          class=\"text-sm font-medium text-gray-500 hover:text-gray-700\"\n        >\n          <span\n            class=\"whitespace-nowrap\"\n            *ngIf=\"\n              !isBreadcrumbOffLimits ||\n                (isBreadcrumbOffLimits &&\n                  (first || last || breadcrumb.showLabel));\n              else dotTmpl\n            \"\n            >{{\n              breadcrumb.key ? (breadcrumb.key | translate) : breadcrumb.text\n            }}</span\n          >\n          <ng-template #dotTmpl>\n            <span class=\"text-sm font-medium text-gray-500\">...</span>\n          </ng-template>\n        </a>\n        <!-- Loading indicator if text not set -->\n        <kendo-skeleton\n          *ngIf=\"!breadcrumb.key && !breadcrumb.text\"\n          width=\"3em\"\n        ></kendo-skeleton>\n      </div>\n    </li>\n  </ol>\n</nav>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-124245a83d65c4d7f6925b1ba495a032e5fc5169fdb2faa9b1784dfbc933afa8cccb73d4101157112f507956a6b53fbaa27f0fe877b9e265b7d3d1afddd0f7e4",
            "file": "libs/ui/src/lib/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "category",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nButton category, define shape",
                    "description": "<p>Button category, define shape</p>\n",
                    "line": 25,
                    "type": "Category",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDisable interaction",
                    "description": "<p>Disable interaction</p>\n",
                    "line": 41,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nButton Icon",
                    "description": "<p>Button Icon</p>\n",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconPosition",
                    "defaultValue": "'prefix'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIcon position, either before or after text",
                    "description": "<p>Icon position, either before or after text</p>\n",
                    "line": 23,
                    "type": "ButtonIconPosition",
                    "decorators": []
                },
                {
                    "name": "isBlock",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nShould button appear as block",
                    "description": "<p>Should button appear as block</p>\n",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs button only icon",
                    "description": "<p>Is button only icon</p>\n",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isOutlined",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs button outlined",
                    "description": "<p>Is button outlined</p>\n",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nLoading indicator",
                    "description": "<p>Loading indicator</p>\n",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nButton size",
                    "description": "<p>Button size</p>\n",
                    "line": 27,
                    "type": "Size",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nButton variant, define color",
                    "description": "<p>Button variant, define color</p>\n",
                    "line": 29,
                    "type": "Variant",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "emittedEventSubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<string>",
                    "optional": false,
                    "description": "<p>Emit click event</p>\n",
                    "line": 45,
                    "rawdescription": "\nEmit click event",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>UI Button Component.\nEncapsulate a html button.\nButton can have various shapes / colors / sizes.\nIt can be only icon, or have one as prefix / suffix of its text.</p>\n",
            "rawdescription": "\n\nUI Button Component.\nEncapsulate a html button.\nButton can have various shapes / colors / sizes.\nIt can be only icon, or have one as prefix / suffix of its text.\n",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, Input } from '@angular/core';\nimport { ButtonIconPosition } from './types/button-icon-position';\nimport { Category } from '../types/category';\nimport { Variant } from '../types/variant';\nimport { Subject } from 'rxjs';\nimport { Size } from '../types/size';\n\n/**\n * UI Button Component.\n * Encapsulate a html button.\n * Button can have various shapes / colors / sizes.\n * It can be only icon, or have one as prefix / suffix of its text.\n */\n@Component({\n  selector: 'ui-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n})\nexport class ButtonComponent {\n  /** Button Icon */\n  @Input() icon = '';\n  /** Icon position, either before or after text */\n  @Input() iconPosition: ButtonIconPosition = 'prefix';\n  /** Button category, define shape */\n  @Input() category: Category = 'primary';\n  /** Button size */\n  @Input() size: Size = 'medium';\n  /** Button variant, define color */\n  @Input() variant: Variant = 'primary';\n  /** Is button only icon */\n  @Input() isIcon = false;\n  /** Should button appear as block */\n  @HostBinding('class.!w-full')\n  @Input()\n  isBlock = false;\n  /** Loading indicator */\n  @Input() loading = false;\n  /** Disable interaction */\n  @HostBinding('class.disabled')\n  @Input()\n  disabled = false;\n  /** Is button outlined */\n  @Input() isOutlined = false;\n  /** Emit click event */\n  public emittedEventSubject: Subject<string> = new Subject();\n\n  /**\n   * Map icon size as number for Size enum\n   *\n   * @returns size as number\n   */\n  get iconSize(): number {\n    switch (this.size) {\n      case 'small':\n        return 18;\n      case 'large':\n        return 24;\n      default:\n        return 21;\n    }\n  }\n\n  /** @returns general resolved classes and variant for button*/\n  get resolveButtonClasses(): string[] {\n    const classes = [];\n    if (this.isBlock) classes.push('!w-full');\n    classes.push(this.isIcon ? 'ui-button-icon' : 'ui-button');\n    classes.push(this.category);\n    classes.push(this.size);\n    classes.push('button-' + this.variant);\n    if ((this.icon || this.loading) && !this.isIcon) {\n      classes.push('inline-flex items-center gap-x-2');\n    }\n    if (this.disabled) {\n      classes.push('opacity-70');\n    }\n    return classes;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  width: max-content;\n}\n\n:host button > * {\n  pointer-events: none;\n}\n\n:host button {\n  pointer-events: inherit;\n}\n\n.ui-button {\n  &.primary {\n    @apply rounded-md text-sm font-medium shadow-sm ring-1 ring-inset ring-gray-300;\n  }\n  &.secondary {\n    @apply rounded-md text-sm font-medium shadow-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2;\n  }\n  &.tertiary {\n    @apply rounded-md bg-white text-sm font-medium shadow-sm shadow-gray-300;\n    box-shadow: 0 0 0 1px inset !important;\n  }\n  &.small {\n    @apply px-2.5 py-1.5;\n  }\n  &.medium {\n    @apply px-3 py-2;\n  }\n  &.large {\n    @apply px-3.5 py-2.5;\n  }\n}\n\n.ui-button-icon {\n  &.primary {\n    @apply rounded-full shadow-sm;\n  }\n  &.secondary {\n    @apply rounded-full shadow-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2;\n  }\n  &.tertiary {\n    @apply bg-white rounded-full shadow-sm shadow-gray-300;\n    box-shadow: 0 0 0 1px inset !important;\n  }\n  &.small {\n    @apply p-1.5;\n  }\n  &.medium,\n  &.large {\n    @apply p-2.5;\n  }\n}\n\n.button-default {\n  &.primary {\n    @apply text-gray-900;\n  }\n  &:not(:disabled) {\n    @apply hover:bg-gray-50;\n  }\n  &.secondary {\n    @apply bg-gray-900 text-white;\n  }\n  &.secondary:not(:disabled) {\n    @apply hover:bg-gray-500 focus-visible:outline-gray-600;\n  }\n  &.tertiary {\n    @apply shadow-gray-900 text-gray-900;\n  }\n}\n\n.button-primary {\n  &.primary {\n    @apply text-primary-400;\n  }\n  &:not(:disabled) {\n    @apply hover:bg-primary-50;\n  }\n  &.secondary {\n    @apply bg-primary-400 text-white;\n  }\n  &.secondary:not(:disabled) {\n    @apply hover:bg-primary-500 focus-visible:outline-primary-600;\n  }\n  &.tertiary {\n    @apply shadow-primary-400 text-primary-400;\n  }\n}\n\n.button-success {\n  &.primary {\n    @apply text-green-400;\n  }\n  &:not(:disabled) {\n    @apply hover:bg-green-50;\n  }\n  &.secondary {\n    @apply bg-green-400 text-white;\n  }\n  &.secondary:not(:disabled) {\n    @apply hover:bg-green-500 focus-visible:outline-green-600;\n  }\n  &.tertiary {\n    @apply shadow-green-400 text-green-400;\n  }\n}\n\n.button-danger {\n  &.primary {\n    @apply text-red-400;\n  }\n  &:not(:disabled) {\n    @apply hover:bg-red-50;\n  }\n  &.secondary {\n    @apply bg-red-400 text-white;\n  }\n  &.secondary:not(:disabled) {\n    @apply hover:bg-red-500 focus-visible:outline-red-600;\n  }\n  &.tertiary {\n    @apply shadow-red-400 text-red-400;\n  }\n}\n\n.button-warning {\n  &.primary {\n    @apply text-yellow-400;\n  }\n  &:not(:disabled) {\n    @apply hover:bg-yellow-50;\n  }\n  &.secondary {\n    @apply bg-yellow-400 text-white;\n  }\n  &.secondary:not(:disabled) {\n    @apply hover:bg-yellow-500 focus-visible:outline-yellow-600;\n  }\n  &.tertiary {\n    @apply shadow-yellow-400 text-yellow-400;\n  }\n}\n\n.button-grey {\n  &.primary {\n    @apply text-neutral-400;\n  }\n  &:not(:disabled) {\n    @apply hover:bg-neutral-200;\n  }\n  &.secondary {\n    @apply bg-neutral-400 text-white;\n  }\n  &.secondary:not(:disabled) {\n    @apply hover:bg-neutral-500 focus-visible:outline-neutral-600;\n  }\n  &.tertiary {\n    @apply shadow-neutral-400 text-neutral-400;\n  }\n}\n\n.button-light {\n  &.primary {\n    @apply text-neutral-400;\n  }\n  &:not(:disabled) {\n    @apply hover:bg-neutral-100 hover:bg-opacity-20;\n  }\n  &.secondary {\n    @apply bg-neutral-400 text-white;\n  }\n  &.secondary:not(:disabled) {\n    @apply hover:bg-neutral-500 focus-visible:outline-neutral-600;\n  }\n  &.tertiary {\n    @apply shadow-neutral-400 text-neutral-400;\n  }\n}\n\nbutton.ui-button:disabled {\n  @apply text-neutral-400 bg-neutral-500 bg-opacity-20;\n}\n\nbutton.ui-button-icon:disabled {\n  @apply text-neutral-400 bg-opacity-20;\n}\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "iconSize": {
                    "name": "iconSize",
                    "getSignature": {
                        "name": "iconSize",
                        "type": "number",
                        "returnType": "number",
                        "line": 52,
                        "rawdescription": "\n\nMap icon size as number for Size enum\n\n",
                        "description": "<p>Map icon size as number for Size enum</p>\n",
                        "jsdoctags": [
                            {
                                "pos": 1509,
                                "end": 1536,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 1510,
                                    "end": 1517,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>size as number</p>\n"
                            }
                        ]
                    }
                },
                "resolveButtonClasses": {
                    "name": "resolveButtonClasses",
                    "getSignature": {
                        "name": "resolveButtonClasses",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 64,
                        "rawdescription": "",
                        "description": "",
                        "jsdoctags": [
                            {
                                "pos": 1720,
                                "end": 1776,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 1721,
                                    "end": 1728,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>general resolved classes and variant for button</p>\n"
                            }
                        ]
                    }
                }
            },
            "templateData": "<button\n  type=\"button\"\n  [ngClass]=\"resolveButtonClasses\"\n  [disabled]=\"disabled\"\n  (click)=\"emittedEventSubject.next('click')\"\n>\n  <ng-container *ngIf=\"icon\">\n    <ui-icon\n      class=\"flex\"\n      [ngClass]=\"{\n        'order-1': iconPosition === 'prefix',\n        'order-2': iconPosition === 'suffix'\n      }\"\n      [icon]=\"icon\"\n      [size]=\"iconSize\"\n      [variant]=\"variant\"\n      [category]=\"category\"\n      [isOutlined]=\"isOutlined\"\n    ></ui-icon>\n  </ng-container>\n  <ng-container *ngIf=\"loading\">\n    <ui-spinner\n      [ngClass]=\"{\n        'order-1': iconPosition === 'prefix',\n        'order-2': iconPosition === 'suffix'\n      }\"\n      [size]=\"size\"\n      [variant]=\"variant\"\n      [category]=\"category\"\n    ></ui-spinner>\n  </ng-container>\n  <span\n    [ngClass]=\"{\n      'order-1': iconPosition === 'suffix',\n      'order-2': iconPosition === 'prefix'\n    }\"\n  >\n    <ng-container *ngIf=\"!isIcon\">\n      <ng-content></ng-content>\n    </ng-container>\n  </span>\n</button>\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-f81fa22578a4d211aad41e23d86d6cf0e1b6a6f52a1999cf90b5ee097438ef2a752cde52dc4af0c97873430587f4c1fd099281938cb8736d632cf5a9d32363b8",
            "file": "libs/ui/src/lib/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "CONTROL_VALUE_ACCESSOR"
                }
            ],
            "selector": "ui-checkbox",
            "styleUrls": [
                "./checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAria label for accessibility.",
                    "description": "<p>Aria label for accessibility.</p>\n",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nBoolean indicating whether the checkbox is checked.",
                    "description": "<p>Boolean indicating whether the checkbox is checked.</p>\n",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nBoolean indicating whether the checkbox is disabled.",
                    "description": "<p>Boolean indicating whether the checkbox is disabled.</p>\n",
                    "line": 40,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "indeterminate",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nBoolean indicating whether the checkbox is in an indeterminate state.",
                    "description": "<p>Boolean indicating whether the checkbox is in an indeterminate state.</p>\n",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nName of the checkbox.",
                    "description": "<p>Name of the checkbox.</p>\n",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nVariant of the checkbox.",
                    "description": "<p>Variant of the checkbox.</p>\n",
                    "line": 38,
                    "type": "Variant",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "onChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Function to handle value changes.</p>\n",
                    "line": 44,
                    "rawdescription": "\nFunction to handle value changes."
                },
                {
                    "name": "onTouch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Function to handle touch events.</p>\n",
                    "line": 46,
                    "rawdescription": "\nFunction to handle touch events."
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<boolean>",
                    "optional": false,
                    "description": "<p>Event emitter for value changes.</p>\n",
                    "line": 42,
                    "rawdescription": "\nEvent emitter for value changes."
                }
            ],
            "methodsClass": [
                {
                    "name": "onSelect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles the selection of a content\n",
                    "description": "<p>Handles the selection of a content</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "boolean",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister new method to call when control state change\n\n",
                    "description": "<p>Register new method to call when control state change</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2416,
                                "end": 2418,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "boolean",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "pos": 2410,
                                "end": 2415,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>callback function</p>\n"
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister new method to call when control touch state change\n\n",
                    "description": "<p>Register new method to call when control touch state change</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2658,
                                "end": 2660,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "pos": 2652,
                                "end": 2657,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>callback function</p>\n"
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet disabled state of the control\n\n",
                    "description": "<p>Set disabled state of the control</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2859,
                                "end": 2869,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "isDisabled"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2853,
                                "end": 2858,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>is control disabled</p>\n"
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWrite value of control.\n\n",
                    "description": "<p>Write value of control.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2237,
                                "end": 2242,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2231,
                                "end": 2236,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>new value</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>UI Checkbox Component\nCheckbox is a UI component that allows users to switch between two mutually exclusive options (checked or unchecked, on or off) through a single click or tap.</p>\n",
            "rawdescription": "\n\nUI Checkbox Component\nCheckbox is a UI component that allows users to switch between two mutually exclusive options (checked or unchecked, on or off) through a single click or tap.\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  Input,\n  Provider,\n  forwardRef,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Variant } from '../types/variant';\n\n/** A provider for the ControlValueAccessor interface. */\nconst CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => CheckboxComponent),\n  multi: true,\n};\n\n/**\n * UI Checkbox Component\n * Checkbox is a UI component that allows users to switch between two mutually exclusive options (checked or unchecked, on or off) through a single click or tap.\n */\n@Component({\n  selector: 'ui-checkbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.scss'],\n  providers: [CONTROL_VALUE_ACCESSOR],\n})\nexport class CheckboxComponent implements ControlValueAccessor {\n  /** Boolean indicating whether the checkbox is checked. */\n  @Input() checked = false;\n  /** Boolean indicating whether the checkbox is in an indeterminate state. */\n  @Input() indeterminate = false;\n  /** Aria label for accessibility. */\n  @Input() ariaLabel = '';\n  /** Name of the checkbox. */\n  @Input() name = '';\n  /** Variant of the checkbox. */\n  @Input() variant: Variant = 'primary';\n  /** Boolean indicating whether the checkbox is disabled. */\n  @Input() disabled = false;\n  /** Event emitter for value changes. */\n  valueChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n  /** Function to handle value changes. */\n  onChange!: (value: boolean) => void;\n  /** Function to handle touch events. */\n  onTouch!: () => void;\n\n  /** @returns shot toggle classes and variant */\n  get checkboxClasses(): string[] {\n    const classes = [\n      this.variant === 'default'\n        ? 'checkbox-primary'\n        : this.variant === 'light'\n        ? 'checkbox-grey'\n        : 'checkbox-' + this.variant,\n    ];\n    return classes;\n  }\n\n  /**\n   * Handles the selection of a content\n   */\n  public onSelect() {\n    this.checked = !this.checked;\n    this.indeterminate = false;\n    if (this.onTouch && this.onChange) {\n      this.onTouch();\n      this.onChange(this.checked);\n    }\n    this.valueChange.emit(this.checked);\n  }\n\n  /**\n   * Write value of control.\n   *\n   * @param value new value\n   */\n  public writeValue(value: boolean): void {\n    this.checked = value;\n  }\n\n  /**\n   * Register new method to call when control state change\n   *\n   * @param fn callback function\n   */\n  public registerOnChange(fn: (value: boolean) => void): void {\n    if (!this.onChange) {\n      this.onChange = fn;\n    }\n  }\n\n  /**\n   * Register new method to call when control touch state change\n   *\n   * @param fn callback function\n   */\n  public registerOnTouched(fn: () => void): void {\n    if (!this.onTouch) {\n      this.onTouch = fn;\n    }\n  }\n\n  /**\n   * Set disabled state of the control\n   *\n   * @param isDisabled is control disabled\n   */\n  public setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// === VARIANTS ===\n.checkbox-primary {\n  @apply text-primary-400 focus:ring-primary-600;\n}\n\n.checkbox-success {\n  @apply text-green-400 focus:ring-green-600;\n}\n\n.checkbox-danger {\n  @apply text-red-400 focus:ring-red-600;\n}\n\n.checkbox-grey {\n  @apply text-gray-400 focus:ring-gray-600;\n}\n",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "checkboxClasses": {
                    "name": "checkboxClasses",
                    "getSignature": {
                        "name": "checkboxClasses",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 49,
                        "rawdescription": "",
                        "description": "",
                        "jsdoctags": [
                            {
                                "pos": 1600,
                                "end": 1641,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 1601,
                                    "end": 1608,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>shot toggle classes and variant</p>\n"
                            }
                        ]
                    }
                }
            },
            "templateData": "<label for=\"{{ name }}\" class=\"inline-flex\">\n  <span class=\"mr-2 flex\">\n    <input\n      [attr.aria-describedby]=\"name + '-description'\"\n      [attr.aria-label]=\"ariaLabel\"\n      id=\"{{ name }}\"\n      name=\"{{ name }}\"\n      type=\"checkbox\"\n      [checked]=\"checked\"\n      [indeterminate]=\"indeterminate\"\n      [ngClass]=\"checkboxClasses\"\n      class=\"form-checkbox h-4 w-4 rounded border-gray-300 self-center\"\n      (click)=\"onSelect()\"\n      [disabled]=\"disabled\"\n    />\n  </span>\n  <span class=\"text-sm text-dark-100 font-medium leading-6 flex\">\n    <ng-content select=\"label\"></ng-content>\n    <ng-content select=\"icon\"></ng-content>\n    <p id=\"{{ name }}-description\" class=\"m-0 font-normal text-gray-500\">\n      <ng-content select=\"description\"></ng-content>\n    </p>\n  </span>\n</label>\n"
        },
        {
            "name": "ChipComponent",
            "id": "component-ChipComponent-47f807257ce90481b932106d2176cb57db854c1278367f5e266d7fcc21ef05025500bbb04f9fec86d864ae6bab5b18df245b16218257677f6183ae4f9cf5d4e9",
            "file": "libs/ui/src/lib/chip/chip.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-chip",
            "styleUrls": [
                "./chip.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chip.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nBoolean indicating whether the chip is disabled.",
                    "description": "<p>Boolean indicating whether the chip is disabled.</p>\n",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "removable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nBoolean indicating whether the chip is removable.",
                    "description": "<p>Boolean indicating whether the chip is removable.</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe value or label of the chip.",
                    "description": "<p>The value or label of the chip.</p>\n",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe variant or style of the chip.",
                    "description": "<p>The variant or style of the chip.</p>\n",
                    "line": 25,
                    "type": "Variant",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "removed",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEvent emitter for when the chip is removed.",
                    "description": "<p>Event emitter for when the chip is removed.</p>\n",
                    "line": 29,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "onClickTimeoutListener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NodeJS.Timeout",
                    "optional": false,
                    "description": "<p>Timeout to onClick</p>\n",
                    "line": 31,
                    "rawdescription": "\nTimeout to onClick",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd animation on click in the chip\n\n",
                    "description": "<p>Add animation on click in the chip</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2094,
                                "end": 2099,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2088,
                                "end": 2093,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>mouse event of the chip clicked</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>UI Chip Component\nDisplay a chip with text and optional remove button.</p>\n",
            "rawdescription": "\n\nUI Chip Component\nDisplay a chip with text and optional remove button.\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnDestroy,\n} from '@angular/core';\nimport { Variant } from '../types/variant';\n\n/**\n * UI Chip Component\n * Display a chip with text and optional remove button.\n */\n@Component({\n  selector: 'ui-chip',\n  templateUrl: './chip.component.html',\n  styleUrls: ['./chip.component.scss'],\n})\nexport class ChipComponent implements OnDestroy {\n  /** The value or label of the chip. */\n  @Input() value = '';\n  /** Boolean indicating whether the chip is removable. */\n  @Input() removable = false;\n  /** The variant or style of the chip. */\n  @Input() variant: Variant = 'default';\n  /** Boolean indicating whether the chip is disabled. */\n  @Input() disabled = false;\n  /** Event emitter for when the chip is removed. */\n  @Output() removed = new EventEmitter<void>();\n  /** Timeout to onClick */\n  private onClickTimeoutListener!: NodeJS.Timeout;\n\n  /** @returns general chip classes and variant */\n  get chipClasses(): string[] {\n    const classes: string[] = [];\n    // Disable state\n    if (this.disabled) {\n      classes.push('opacity-70 bg-gray-300 text-gray-400 pointer-events-none');\n    } else {\n      classes.push('cursor-pointer');\n      // Variants\n      switch (this.variant) {\n        case 'default':\n        case 'grey':\n          classes.push('bg-gray-300 hover:bg-gray-400 text-gray-500');\n          break;\n        case 'primary':\n          classes.push('bg-primary-100 hover:bg-primary-200 text-primary-400');\n          break;\n        case 'secondary':\n          classes.push('bg-primary-100 hover:bg-primary-200 text-primary-800');\n          break;\n        case 'success':\n          classes.push('bg-green-100 hover:bg-green-200 text-green-400');\n          break;\n        case 'danger':\n          classes.push('bg-red-100 hover:bg-red-200 text-red-400');\n          break;\n        case 'warning':\n          classes.push('bg-orange-100 hover:bg-orange-200 text-orange-400');\n          break;\n        default:\n          break;\n      }\n    }\n    return classes;\n  }\n\n  /**\n   * Add animation on click in the chip\n   *\n   * @param event mouse event of the chip clicked\n   */\n  onClick(event: MouseEvent): void {\n    if (this.disabled) {\n      return;\n    }\n    const chip = event.currentTarget as HTMLElement;\n    chip.style.transform = 'scale(0.95)';\n    if (this.onClickTimeoutListener) {\n      clearTimeout(this.onClickTimeoutListener);\n    }\n    this.onClickTimeoutListener = setTimeout(\n      () => (chip.style.transform = 'scale(1)'),\n      200\n    );\n  }\n\n  ngOnDestroy(): void {\n    if (this.onClickTimeoutListener) {\n      clearTimeout(this.onClickTimeoutListener);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./chip.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnDestroy"
            ],
            "accessors": {
                "chipClasses": {
                    "name": "chipClasses",
                    "getSignature": {
                        "name": "chipClasses",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 34,
                        "rawdescription": "",
                        "description": "",
                        "jsdoctags": [
                            {
                                "pos": 904,
                                "end": 946,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 905,
                                    "end": 912,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>general chip classes and variant</p>\n"
                            }
                        ]
                    }
                }
            },
            "templateData": "<div\n  class=\"will-change-transform inline-flex items-center gap-x-1.5 px-2 py-1 text-xs font-medium justify-between rounded-[16px]\"\n  [ngClass]=\"chipClasses\"\n  (click)=\"onClick($event)\"\n  [attr.value]=\"value\"\n>\n  <!-- CONTENT -->\n  <ng-content></ng-content>\n\n  <!-- REMOVE BUTTON ICON -->\n  <ui-icon\n    *ngIf=\"removable && !disabled\"\n    icon=\"close\"\n    [variant]=\"variant\"\n    [size]=\"12\"\n    (click)=\"removed.emit()\"\n    class=\"cursor-pointer\"\n  ></ui-icon>\n</div>\n"
        },
        {
            "name": "CronEditorComponent",
            "id": "component-CronEditorComponent-77d06f0ae4a3b4daaba9634977ada4fdc922b0e8497dafad50880bdb0bb3416f697a2937619d8f8d7e14c6d3083988c114309f247c7c72bd9666b9afc188aab9",
            "file": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-cron-editor",
            "styleUrls": [
                "./cron-editor.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./cron-editor.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nBoolean indicating whether the component is disabled.",
                    "description": "<p>Boolean indicating whether the component is disabled.</p>\n",
                    "line": 107,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "options",
                    "defaultValue": "DefaultCronOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptions for the cron editor.",
                    "description": "<p>Options for the cron editor.</p>\n",
                    "line": 109,
                    "type": "CronOptions",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "cronValidEmitter",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEvent emitter for cron validation.",
                    "description": "<p>Event emitter for cron validation.</p>\n",
                    "line": 111,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "activeTab",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The currently active tab in the cron editor.</p>\n",
                    "line": 116,
                    "rawdescription": "\nThe currently active tab in the cron editor.",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "allForm",
                    "defaultValue": "this.fb.group({\n    cronType: [<CronType>'unknown', Validators.required],\n    seconds: [0],\n\n    minutes: [1],\n    minutesPer: [1],\n\n    hours: [this.getAmPmHour(1)],\n    hoursPer: [1],\n    hoursType: [this.getHourType(1)],\n\n    days: [1], // Days of Month\n    daysPer: [1],\n\n    months: [1],\n    monthsInc: [1],\n\n    day: ['MON'], // Day of week '1' or 'MON;\n    monthsWeek: ['#1'],\n\n    weekdaysOnly: [false],\n    specificWeekDay: [false],\n    specificMonthWeek: [false],\n    MON: [true],\n    TUE: [true],\n    WED: [true],\n    THU: [true],\n    FRI: [true],\n    SAT: [true],\n    SUN: [true],\n    expression: ['0 0 0 0 0'],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Form group for all form controls in the cron editor.</p>\n",
                    "line": 122,
                    "rawdescription": "\nForm group for all form controls in the cron editor."
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "<p>Subject to emit when the component is destroyed.</p>\n",
                    "line": 99,
                    "rawdescription": "\nSubject to emit when the component is destroyed."
                },
                {
                    "name": "hours",
                    "defaultValue": "[...range(0, 23)]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "<p>Arrays representing hours</p>\n",
                    "line": 105,
                    "rawdescription": "\nArrays representing hours",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "minutes",
                    "defaultValue": "[...range(0, 59)]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "<p>Arrays representing minutes</p>\n",
                    "line": 103,
                    "rawdescription": "\nArrays representing minutes",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "Current control",
                    "line": 199,
                    "decorators": [
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        167,
                        167,
                        123
                    ]
                },
                {
                    "name": "onChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>ControlValueAccessor</p>\n",
                    "line": 158,
                    "rawdescription": "\n\nControlValueAccessor\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTouched",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>ControlValueAccessor</p>\n",
                    "line": 162,
                    "rawdescription": "\n\nControlValueAccessor\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "seconds",
                    "defaultValue": "[...range(0, 59)]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "<p>Arrays representing seconds</p>\n",
                    "line": 101,
                    "rawdescription": "\nArrays representing seconds",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "selectOptions",
                    "defaultValue": "this.getSelectOptions()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Options for select inputs in the cron editor.</p>\n",
                    "line": 118,
                    "rawdescription": "\nOptions for select inputs in the cron editor.",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Boolean indicating whether the component has been touched.</p>\n",
                    "line": 120,
                    "rawdescription": "\nBoolean indicating whether the component has been touched."
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined | null",
                    "optional": false,
                    "description": "<p>The current value of the cron expression.</p>\n",
                    "line": 114,
                    "rawdescription": "\nThe current value of the cron expression.",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "computeAdvancedExpression",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 402,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncompute AdvancedExpression\n\n",
                    "description": "<p>compute AdvancedExpression</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 10581,
                                "end": 10588,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>state expression</p>\n"
                        }
                    ]
                },
                {
                    "name": "computeCron",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 233,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncompute Cron\n\n",
                    "description": "<p>compute Cron</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 5965,
                                "end": 5972,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>string cron</p>\n"
                        }
                    ]
                },
                {
                    "name": "computeDailyCron",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 296,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncompute dailyCron\n\n",
                    "description": "<p>compute dailyCron</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 7510,
                                "end": 7517,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>string dailyCron</p>\n"
                        }
                    ]
                },
                {
                    "name": "computeEveryDaysCron",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 308,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncompute EveryDaysCron\n\n",
                    "description": "<p>compute EveryDaysCron</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 7763,
                                "end": 7770,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>string EveryDayscron</p>\n"
                        }
                    ]
                },
                {
                    "name": "computeEveryWeekdayCron",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 322,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncompute everyWeekdayCron\n\n",
                    "description": "<p>compute everyWeekdayCron</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 8168,
                                "end": 8175,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>string everyWeekdayCron</p>\n"
                        }
                    ]
                },
                {
                    "name": "computeHourlyCron",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 282,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncompute HourlyCron\n\n",
                    "description": "<p>compute HourlyCron</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 7168,
                                "end": 7175,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>string HourlyCron</p>\n"
                        }
                    ]
                },
                {
                    "name": "computeMinutesCron",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 268,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncompute MinutesCron\n\n",
                    "description": "<p>compute MinutesCron</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 6799,
                                "end": 6806,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>string minutesCron</p>\n"
                        }
                    ]
                },
                {
                    "name": "computeMonthlyCron",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 356,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncompute monthlyCron\n\n",
                    "description": "<p>compute monthlyCron</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 9110,
                                "end": 9117,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>string monthlyCron</p>\n"
                        }
                    ]
                },
                {
                    "name": "computeWeeklyCron",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 336,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncompute weeklyCron\n\n",
                    "description": "<p>compute weeklyCron</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 8562,
                                "end": 8569,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>string weeklyCron</p>\n"
                        }
                    ]
                },
                {
                    "name": "computeYearlyCron",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 379,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncompute yearlyCron\n\n",
                    "description": "<p>compute yearlyCron</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 9847,
                                "end": 9854,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>string yearlyCron</p>\n"
                        }
                    ]
                },
                {
                    "name": "cronIsValid",
                    "args": [
                        {
                            "name": "cron",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 663,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCron is valid\n\n",
                    "description": "<p>Cron is valid</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 17647,
                                "end": 17651,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "cron"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 17641,
                                "end": 17646,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>cron</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 17663,
                                "end": 17670,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>boolean</p>\n"
                        }
                    ]
                },
                {
                    "name": "dayDisplay",
                    "args": [
                        {
                            "name": "day",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 413,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDisplay day\n\n",
                    "description": "<p>Display day</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 10777,
                                "end": 10780,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "day"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 10771,
                                "end": 10776,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>day</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 10791,
                                "end": 10798,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Days</p>\n"
                        }
                    ]
                },
                {
                    "name": "getAmPmHour",
                    "args": [
                        {
                            "name": "hour",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 461,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet AmPm hour\n\n",
                    "description": "<p>Get AmPm hour</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 11881,
                                "end": 11885,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hour"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 11875,
                                "end": 11880,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>hour</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 11897,
                                "end": 11904,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>hour</p>\n"
                        }
                    ]
                },
                {
                    "name": "getHourType",
                    "args": [
                        {
                            "name": "hour",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"PM\" | \"AM\"",
                    "typeParameters": [],
                    "line": 471,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet hour type\n\n",
                    "description": "<p>Get hour type</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 12072,
                                "end": 12076,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hour"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 12066,
                                "end": 12071,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>hour</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 12088,
                                "end": 12095,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>hour type</p>\n"
                        }
                    ]
                },
                {
                    "name": "getOrdinalSuffix",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"th\" | \"st\" | \"nd\" | \"rd\"",
                    "typeParameters": [],
                    "line": 684,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet Ordinal Suffix\n\n",
                    "description": "<p>Get Ordinal Suffix</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 18104,
                                "end": 18109,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 18098,
                                "end": 18103,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>value</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 18122,
                                "end": 18129,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>string</p>\n"
                        }
                    ]
                },
                {
                    "name": "getRange",
                    "args": [
                        {
                            "name": "start",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "end",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number[]",
                    "typeParameters": [],
                    "line": 738,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet Range\n\n",
                    "description": "<p>Get Range</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 19330,
                                "end": 19335,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "start"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 19324,
                                "end": 19329,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>start value</p>\n"
                        },
                        {
                            "name": {
                                "pos": 19360,
                                "end": 19363,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "end"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 19354,
                                "end": 19359,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>end value</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 19380,
                                "end": 19387,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Days</p>\n"
                        }
                    ]
                },
                {
                    "name": "getSelectOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "{ months: {}; monthWeeks: {}; days: {}; minutes: {}; fullMinutes: {}; seconds: {}; hours: {}; monthDays: {}; monthDaysWithLasts: {}; monthDaysWithOutLasts: {}; hourTypes: {}; }",
                    "typeParameters": [],
                    "line": 710,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet Select Options\n\n",
                    "description": "<p>Get Select Options</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 18632,
                                "end": 18639,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>select options</p>\n"
                        }
                    ]
                },
                {
                    "name": "handleModelChange",
                    "args": [
                        {
                            "name": "cron",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 501,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandle model change\n\n",
                    "description": "<p>Handle model change</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 12672,
                                "end": 12676,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "cron"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 12666,
                                "end": 12671,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>cron</p>\n"
                        }
                    ]
                },
                {
                    "name": "hourToCron",
                    "args": [
                        {
                            "name": "hour",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hourType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 482,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConvert hour to cron\n\n",
                    "description": "<p>Convert hour to cron</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 12282,
                                "end": 12286,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hour"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 12276,
                                "end": 12281,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>hour</p>\n"
                        },
                        {
                            "name": {
                                "pos": 12304,
                                "end": 12312,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hourType"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 12298,
                                "end": 12303,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>hour type</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 12329,
                                "end": 12336,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>hour</p>\n"
                        }
                    ]
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 786,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nmarkAsTouched\n\n",
                    "description": "<p>markAsTouched</p>\n"
                },
                {
                    "name": "monthDayDisplay",
                    "args": [
                        {
                            "name": "month",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 443,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDisplay monthDay\n\n",
                    "description": "<p>Display monthDay</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 11370,
                                "end": 11375,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "month"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 11364,
                                "end": 11369,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>month</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 11388,
                                "end": 11395,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>monthDay</p>\n"
                        }
                    ]
                },
                {
                    "name": "monthDisplay",
                    "args": [
                        {
                            "name": "month",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 433,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDisplay month\n\n",
                    "description": "<p>Display month</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 11185,
                                "end": 11190,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "month"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 11179,
                                "end": 11184,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>month</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 11203,
                                "end": 11210,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Month</p>\n"
                        }
                    ]
                },
                {
                    "name": "monthRadioChange",
                    "args": [
                        {
                            "name": "val",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 798,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChange the monthly radio\n\n",
                    "description": "<p>Change the monthly radio</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 20330,
                                "end": 20333,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "val"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 20324,
                                "end": 20329,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>is specific week day</p>\n"
                        }
                    ]
                },
                {
                    "name": "monthWeekDisplay",
                    "args": [
                        {
                            "name": "monthWeekNumber",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 423,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDisplay monthWeek\n\n",
                    "description": "<p>Display monthWeek</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 10950,
                                "end": 10965,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "monthWeekNumber"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 10944,
                                "end": 10949,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>monthWeekNumber</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 10988,
                                "end": 10995,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>MonthWeeks</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 223,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmit Destroy event, and unsubscribe to destroy\n",
                    "description": "<p>Emit Destroy event, and unsubscribe to destroy</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 209,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        132
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 760,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegisterOnChange\n\n",
                    "description": "<p>RegisterOnChange</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 19777,
                                "end": 19779,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 19771,
                                "end": 19776,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>fn</p>\n"
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 769,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegisterOnTouched\n\n",
                    "description": "<p>RegisterOnTouched</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 19900,
                                "end": 19902,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 19894,
                                "end": 19899,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>fn</p>\n"
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 778,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nsetDisabledState\n\n",
                    "description": "<p>setDisabledState</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 20024,
                                "end": 20034,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "isDisabled"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 20018,
                                "end": 20023,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>boolean</p>\n"
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 748,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWrite value\n\n",
                    "description": "<p>Write value</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 19595,
                                "end": 19598,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "obj"
                            },
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 19589,
                                "end": 19594,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>obj</p>\n"
                        }
                    ]
                },
                {
                    "name": "yearlyRadioChange",
                    "args": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 807,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChange the yearly radio\n\n @param val is specific month week\n",
                    "description": "<p>Change the yearly radio</p>\n<p> @param val is specific month week</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 20517,
                                "end": 20520,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "val"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 20511,
                                "end": 20516,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>is specific month week</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>UI CronEditor Component\nCronEditor is a UI component that allows users to switch between two mutually exclusive options (checked or unchecked, on or off) through a single click or tap.</p>\n",
            "rawdescription": "\n\nUI CronEditor Component\nCronEditor is a UI component that allows users to switch between two mutually exclusive options (checked or unchecked, on or off) through a single click or tap.\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  OnInit,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  Optional,\n  Self,\n} from '@angular/core';\nimport { CronOptions, DefaultCronOptions } from './options/cron.options';\nimport { Days, MonthWeeks, Months } from './enum/enums';\nimport {\n  ControlValueAccessor,\n  FormBuilder,\n  NgControl,\n  Validators,\n} from '@angular/forms';\nimport { debounceTime, Subject, takeUntil } from 'rxjs';\nimport { TranslateService } from '@ngx-translate/core';\n\ntype CronType =\n  | 'minutely'\n  | 'hourly'\n  | 'daily'\n  | 'weekly'\n  | 'monthly'\n  | 'yearly'\n  | 'unknown';\n\n/** minutes regex */\nconst minutesExp = /\\d+ 0\\/\\d+ \\* 1\\/1 \\* [?*] \\*/;\n/** hourly regex */\nconst hourlyExp = /\\d+ \\d+ 0\\/\\d+ 1\\/1 \\* [?*] \\*/;\n/** daily regex */\nconst dailyExp = /\\d+ \\d+ \\d+ 1\\/\\d+ \\* [?*] \\*/;\n/** dailyWeekday regex */\nconst dailyWeekdayExp = /\\d+ \\d+ \\d+ [?*] \\* MON-FRI \\*/;\n/** weekly regex */\nconst weeklyExp =\n  /\\d+ \\d+ \\d+ [?*] \\* (MON|TUE|WED|THU|FRI|SAT|SUN)(,(MON|TUE|WED|THU|FRI|SAT|SUN))* \\*/;\n/** monthly regex */\nconst monthlyExpo = /\\d+ \\d+ \\d+ (\\d+|L|LW|1W) 1\\/\\d+ [?*] \\*/;\n/** MonthlyWeekday regex */\nconst monthlyWeekdayExpo =\n  /\\d+ \\d+ \\d+ [?*] 1\\/\\d+ (MON|TUE|WED|THU|FRI|SAT|SUN)((#[1-5])|L) \\*/;\n/** yearly regex */\nconst yearlyExp = /\\d+ \\d+ \\d+ (\\d+|L|LW|1W) \\d+ [?*] \\*/;\n/** yearlyMonthWeek regex */\nconst yearlyMonthWeekExp =\n  /\\d+ \\d+ \\d+ [?*] \\d+ (MON|TUE|WED|THU|FRI|SAT|SUN)((#[1-5])|L) \\*/;\n\n/** Interface declaration CronToken */\ninterface CronToken {\n  val: number;\n  inc: number;\n}\n\n/**\n * Parse CronNumber to token\n *\n * @param val value\n * @returns obj\n */\nfunction parseCronNumberToken(val: string): CronToken {\n  const v = val.split('/').map((x) => parseInt(x, 10));\n  if (v.length === 1) {\n    return { val: v[0], inc: 0 };\n  }\n  return { val: v[0], inc: v[1] };\n}\n\n/**\n * generate numbers in some range\n *\n * @param start start range\n * @param end end range\n * @yields i\n */\nfunction* range(start: number, end: number) {\n  for (let i = start; i <= end; i++) {\n    yield i;\n  }\n}\n\n/**\n * UI CronEditor Component\n * CronEditor is a UI component that allows users to switch between two mutually exclusive options (checked or unchecked, on or off) through a single click or tap.\n */\n@Component({\n  selector: 'ui-cron-editor',\n  templateUrl: './cron-editor.component.html',\n  styleUrls: ['./cron-editor.component.scss'],\n})\nexport class CronEditorComponent\n  implements OnInit, OnDestroy, ControlValueAccessor\n{\n  /** Subject to emit when the component is destroyed. */\n  destroy$: Subject<boolean> = new Subject<boolean>();\n  /** Arrays representing seconds */\n  public seconds = [...range(0, 59)];\n  /** Arrays representing minutes */\n  public minutes = [...range(0, 59)];\n  /** Arrays representing hours */\n  public hours = [...range(0, 23)];\n  /** Boolean indicating whether the component is disabled. */\n  @Input() public disabled = false;\n  /** Options for the cron editor. */\n  @Input() public options: CronOptions = DefaultCronOptions;\n  /** Event emitter for cron validation. */\n  @Output() cronValidEmitter: EventEmitter<boolean> =\n    new EventEmitter<boolean>();\n  /** The current value of the cron expression. */\n  public value: string | undefined | null;\n  /** The currently active tab in the cron editor. */\n  public activeTab!: string;\n  /** Options for select inputs in the cron editor. */\n  public selectOptions = this.getSelectOptions();\n  /** Boolean indicating whether the component has been touched. */\n  touched = false;\n  /** Form group for all form controls in the cron editor. */\n  allForm = this.fb.group({\n    cronType: [<CronType>'unknown', Validators.required],\n    seconds: [0],\n\n    minutes: [1],\n    minutesPer: [1],\n\n    hours: [this.getAmPmHour(1)],\n    hoursPer: [1],\n    hoursType: [this.getHourType(1)],\n\n    days: [1], // Days of Month\n    daysPer: [1],\n\n    months: [1],\n    monthsInc: [1],\n\n    day: ['MON'], // Day of week '1' or 'MON;\n    monthsWeek: ['#1'],\n\n    weekdaysOnly: [false],\n    specificWeekDay: [false],\n    specificMonthWeek: [false],\n    MON: [true],\n    TUE: [true],\n    WED: [true],\n    THU: [true],\n    FRI: [true],\n    SAT: [true],\n    SUN: [true],\n    expression: ['0 0 0 0 0'],\n  });\n\n  /**\n   * ControlValueAccessor\n   */\n  public onChange!: (value: any) => void;\n  /**\n   * ControlValueAccessor\n   */\n  public onTouched!: () => void;\n\n  /** @returns is cron Flavor Quartz */\n  get isCronFlavorQuartz() {\n    return this.options.cronFlavor === 'quartz';\n  }\n\n  /** @returns is cron Flavor Standard */\n  get isCronFlavorStandard() {\n    return this.options.cronFlavor === 'standard';\n  }\n\n  /** @returns year default */\n  get yearDefaultChar() {\n    return this.options.cronFlavor === 'quartz' ? '*' : '';\n  }\n\n  /** @returns weekday default */\n  get weekDayDefaultChar() {\n    return this.options.cronFlavor === 'quartz' ? '?' : '*';\n  }\n\n  /** @returns monthday default */\n  get monthDayDefaultChar() {\n    return this.options.cronFlavor === 'quartz' ? '?' : '*';\n  }\n\n  /**\n   * Ui CronEditor constructor\n   *\n   * @param fb FormBuilder\n   * @param translate angular Translate service\n   * @param ngControl Current control\n   */\n  constructor(\n    private fb: FormBuilder,\n    private translate: TranslateService,\n    @Optional() @Self() public ngControl: NgControl\n  ) {\n    if (this.ngControl != null) {\n      this.ngControl.valueAccessor = this;\n      if (this.ngControl.value) {\n        this.handleModelChange(this.ngControl.value);\n      }\n    }\n  }\n\n  public async ngOnInit() {\n    this.allForm.valueChanges\n      .pipe(debounceTime(1000), takeUntil(this.destroy$))\n      .subscribe(() => {\n        this.markAsTouched();\n        const cron = this.computeCron();\n        this.cronValidEmitter.emit(this.cronIsValid(cron));\n        this.onChange(cron);\n      });\n  }\n\n  /**\n   * Emit Destroy event, and unsubscribe to destroy\n   */\n  ngOnDestroy() {\n    this.destroy$.next(true);\n    this.destroy$.unsubscribe();\n  }\n\n  /**\n   * compute Cron\n   *\n   * @returns string cron\n   */\n  private computeCron(): string {\n    let cron: string;\n    switch (this.allForm.value.cronType) {\n      case 'minutely':\n        cron = this.computeMinutesCron();\n        break;\n      case 'hourly':\n        cron = this.computeHourlyCron();\n        break;\n      case 'daily':\n        cron = this.computeDailyCron();\n        break;\n      case 'weekly':\n        cron = this.computeWeeklyCron();\n        break;\n      case 'monthly':\n        cron = this.computeMonthlyCron();\n        break;\n      case 'yearly':\n        cron = this.computeYearlyCron();\n        break;\n      case 'unknown':\n        cron = this.computeAdvancedExpression();\n        break;\n      default:\n        throw Error('Unknown cron type ' + this.allForm.value.cronType);\n    }\n    return cron;\n  }\n\n  /**\n   * compute MinutesCron\n   *\n   * @returns string minutesCron\n   */\n  private computeMinutesCron(): string {\n    const state = this.allForm.value;\n\n    // tslint:disable-next-line:max-line-length\n    return `${this.isCronFlavorQuartz ? state.seconds : ''} 0/${\n      state.minutesPer\n    } * 1/1 * ${this.weekDayDefaultChar} ${this.yearDefaultChar}`.trim();\n  }\n\n  /**\n   * compute HourlyCron\n   *\n   * @returns string HourlyCron\n   */\n  private computeHourlyCron(): string {\n    const state = this.allForm.value;\n    return `${this.isCronFlavorQuartz ? state.seconds : ''} ${\n      state.minutes\n    } 0/${state.hoursPer} 1/1 * ${this.weekDayDefaultChar} ${\n      this.yearDefaultChar\n    }`.trim();\n  }\n\n  /**\n   * compute dailyCron\n   *\n   * @returns string dailyCron\n   */\n  private computeDailyCron(): string {\n    if (this.allForm.value.weekdaysOnly) {\n      return this.computeEveryWeekdayCron();\n    }\n    return this.computeEveryDaysCron();\n  }\n\n  /**\n   * compute EveryDaysCron\n   *\n   * @returns string EveryDayscron\n   */\n  private computeEveryDaysCron(): string {\n    const state: any = this.allForm.value;\n    return `${this.isCronFlavorQuartz ? state.seconds : ''} ${\n      state.minutes\n    } ${this.hourToCron(state?.hours, state.hoursType)} 1/${state.daysPer} * ${\n      this.weekDayDefaultChar\n    } ${this.yearDefaultChar}`.trim();\n  }\n\n  /**\n   * compute everyWeekdayCron\n   *\n   * @returns string everyWeekdayCron\n   */\n  private computeEveryWeekdayCron(): string {\n    const state: any = this.allForm.value;\n    return `${this.isCronFlavorQuartz ? state.seconds : ''} ${\n      state.minutes\n    } ${this.hourToCron(state.hours, state.hoursType)} ${\n      this.monthDayDefaultChar\n    } * MON-FRI ${this.yearDefaultChar}`.trim();\n  }\n\n  /**\n   * compute weeklyCron\n   *\n   * @returns string weeklyCron\n   */\n  private computeWeeklyCron(): string {\n    const state: any = this.allForm.value;\n    const days = this.selectOptions.days\n      .reduce(\n        (acc: any, day: any) => (state[day] ? acc.concat([day]) : acc),\n        []\n      )\n      .join(',');\n    return `${this.isCronFlavorQuartz ? state.seconds : ''} ${\n      state.minutes\n    } ${this.hourToCron(state.hours, state.hoursType)} ${\n      this.monthDayDefaultChar\n    } * ${days} ${this.yearDefaultChar}`.trim();\n  }\n\n  /**\n   * compute monthlyCron\n   *\n   * @returns string monthlyCron\n   */\n  private computeMonthlyCron(): string {\n    const state: any = this.allForm.value;\n    if (state.specificWeekDay) {\n      return `${this.isCronFlavorQuartz ? state.seconds : ''} ${\n        state.minutes\n      } ${this.hourToCron(state.hours, state.hoursType)} ${\n        this.monthDayDefaultChar\n      } 1/${state.monthsInc} ${state.day}${state.monthsWeek} ${\n        this.yearDefaultChar\n      }`.trim();\n    }\n    return `${this.isCronFlavorQuartz ? state.seconds : ''} ${\n      state.minutes\n    } ${this.hourToCron(state.hours, state.hoursType)} ${state.days} 1/${\n      state.monthsInc\n    } ${this.weekDayDefaultChar} ${this.yearDefaultChar}`.trim();\n  }\n\n  /**\n   * compute yearlyCron\n   *\n   * @returns string yearlyCron\n   */\n  private computeYearlyCron(): string {\n    const state: any = this.allForm.value;\n    if (state.specificMonthWeek) {\n      return `${this.isCronFlavorQuartz ? state.seconds : ''} ${\n        state.minutes\n      } ${this.hourToCron(state.hours, state.hoursType)} ${\n        this.monthDayDefaultChar\n      } ${state.months} ${state.day}${state.monthsWeek} ${\n        this.yearDefaultChar\n      }`.trim();\n    }\n    return `${this.isCronFlavorQuartz ? state.seconds : ''} ${\n      state.minutes\n    } ${this.hourToCron(state.hours, state.hoursType)} ${state.day} ${\n      state.months\n    } ${this.weekDayDefaultChar} ${this.yearDefaultChar}`.trim();\n  }\n\n  /**\n   * compute AdvancedExpression\n   *\n   * @returns state expression\n   */\n  private computeAdvancedExpression(): string {\n    const state: any = this.allForm.value;\n    return state.expression;\n  }\n\n  /**\n   * Display day\n   *\n   * @param day day\n   * @returns Days\n   */\n  public dayDisplay(day: string): string {\n    return this.translate.instant(Days[day]);\n  }\n\n  /**\n   * Display monthWeek\n   *\n   * @param monthWeekNumber monthWeekNumber\n   * @returns MonthWeeks\n   */\n  public monthWeekDisplay(monthWeekNumber: string): string {\n    return this.translate.instant(MonthWeeks[monthWeekNumber]);\n  }\n\n  /**\n   * Display month\n   *\n   * @param month month\n   * @returns Month\n   */\n  public monthDisplay(month: number): string {\n    return this.translate.instant(Months[month]);\n  }\n\n  /**\n   * Display monthDay\n   *\n   * @param month month\n   * @returns monthDay\n   */\n  public monthDayDisplay(month: string): string {\n    if (month === 'L') {\n      return this.translate.instant('common.cronEditor.lastDay');\n    } else if (month === 'LW') {\n      return this.translate.instant('common.cronEditor.lastWeekDay');\n    } else if (month === '1W') {\n      return this.translate.instant('common.cronEditor.firstWeekDay');\n    } else {\n      return `${month}${this.getOrdinalSuffix(month)}`;\n    }\n  }\n\n  /**\n   * Get AmPm hour\n   *\n   * @param hour hour\n   * @returns hour\n   */\n  private getAmPmHour(hour: number) {\n    return this.options.use24HourTime ? hour : ((hour + 11) % 12) + 1;\n  }\n\n  /**\n   * Get hour type\n   *\n   * @param hour hour\n   * @returns hour type\n   */\n  private getHourType(hour: number) {\n    return this.options.use24HourTime ? undefined : hour >= 12 ? 'PM' : 'AM';\n  }\n\n  /**\n   * Convert hour to cron\n   *\n   * @param hour hour\n   * @param hourType hour type\n   * @returns hour\n   */\n  private hourToCron(hour: number, hourType: string) {\n    if (this.options.use24HourTime) {\n      return hour;\n    } else {\n      return hourType === 'AM'\n        ? hour === 12\n          ? 0\n          : hour\n        : hour === 12\n        ? 12\n        : hour + 12;\n    }\n  }\n\n  /**\n   * Handle model change\n   *\n   * @param cron cron\n   */\n  private handleModelChange(cron: string) {\n    if (!this.cronIsValid(cron)) {\n      if (this.isCronFlavorQuartz) {\n        console.error('Invalid cron expression, there must be 6 or 7 segments');\n      }\n      if (this.isCronFlavorStandard) {\n        console.error('Invalid cron expression, there must be 5 segments');\n      }\n    }\n\n    // Store original cron expression here.\n    this.allForm.controls.expression.setValue(cron);\n\n    // Normalize cron so that second segment is included.\n    if (cron.split(' ').length === 5 && this.isCronFlavorStandard) {\n      cron = `0 ${cron} *`;\n    }\n\n    // Parse cron tokens\n    const t = cron.split(' ');\n\n    // Seconds\n    this.allForm.controls.seconds.setValue(parseInt(t[0], 10), {\n      emitEvent: false,\n    });\n\n    // Minutes\n    let x = parseCronNumberToken(t[1]);\n    this.allForm.controls.minutesPer.setValue(x.inc, {\n      emitEvent: false,\n    });\n    this.allForm.controls.minutes.setValue(x.val);\n\n    // Hours\n    x = parseCronNumberToken(t[2]);\n    this.allForm.controls.hoursPer.setValue(x.inc);\n    this.allForm.controls.hours.setValue(x.val);\n    if (this.allForm.value.hours) {\n      this.allForm.controls.hoursType.setValue(\n        this.getHourType(this.allForm.value.hours),\n        {\n          emitEvent: false,\n        }\n      );\n    }\n\n    // Day of Month\n    x = parseCronNumberToken(t[3]);\n    this.allForm.controls.days.setValue(x.val, { emitEvent: false });\n    this.allForm.controls.daysPer.setValue(x.val),\n      {\n        emitEvent: false,\n      };\n\n    // Month\n    x = parseCronNumberToken(t[4]);\n    this.allForm.controls.months.setValue(x.val, {\n      emitEvent: false,\n    });\n    this.allForm.controls.monthsInc.setValue(x.inc, {\n      emitEvent: false,\n    });\n\n    // Day of Week\n    this.allForm.controls.day.setValue(t[5]);\n    if (t[5].match('MON')) {\n      this.allForm.controls.MON.setValue(true, {\n        emitEvent: false,\n      });\n    } else {\n      this.allForm.controls.MON.setValue(false, {\n        emitEvent: false,\n      });\n    }\n\n    if (t[5].match('TUE')) {\n      this.allForm.controls.TUE.setValue(true, {\n        emitEvent: false,\n      });\n    } else {\n      this.allForm.controls.TUE.setValue(false, {\n        emitEvent: false,\n      });\n    }\n\n    if (t[5].match('WED')) {\n      this.allForm.controls.WED.setValue(true, {\n        emitEvent: false,\n      });\n    } else {\n      this.allForm.controls.WED.setValue(false, {\n        emitEvent: false,\n      });\n    }\n\n    if (t[5].match('THU')) {\n      this.allForm.controls.THU.setValue(true, {\n        emitEvent: false,\n      });\n    } else {\n      this.allForm.controls.THU.setValue(false, {\n        emitEvent: false,\n      });\n    }\n\n    if (t[5].match('FRI')) {\n      this.allForm.controls.FRI.setValue(true, { emitEvent: false });\n    } else {\n      this.allForm.controls.FRI.setValue(false, { emitEvent: false });\n    }\n\n    if (t[5].match('SAT')) {\n      this.allForm.controls.SAT.setValue(true, { emitEvent: false });\n    } else {\n      this.allForm.controls.SAT.setValue(false, { emitEvent: false });\n    }\n\n    if (t[5].match('SUN')) {\n      this.allForm.controls.SUN.setValue(true, { emitEvent: false });\n    } else {\n      this.allForm.controls.SUN.setValue(false, { emitEvent: false });\n    }\n\n    // Year\n    // Not supported\n\n    if (cron.match(minutesExp)) {\n      this.allForm.controls.cronType.setValue('minutely', { emitEvent: false });\n    } else if (cron.match(hourlyExp)) {\n      this.allForm.controls.cronType.setValue('hourly', { emitEvent: false });\n    } else if (cron.match(dailyExp)) {\n      this.allForm.controls.cronType.setValue('daily', { emitEvent: false });\n      this.allForm.controls.weekdaysOnly.setValue(false);\n    } else if (cron.match(dailyWeekdayExp)) {\n      this.allForm.controls.cronType.setValue('daily', { emitEvent: false });\n      this.allForm.controls.weekdaysOnly.setValue(true);\n    } else if (cron.match(weeklyExp)) {\n      this.allForm.controls.cronType.setValue('weekly', { emitEvent: false });\n    } else if (cron.match(monthlyExpo)) {\n      this.allForm.controls.cronType.setValue('monthly', { emitEvent: false });\n      this.allForm.controls.specificWeekDay.setValue(false);\n    } else if (cron.match(monthlyWeekdayExpo)) {\n      this.allForm.controls.cronType.setValue('monthly', { emitEvent: false });\n      this.allForm.controls.specificWeekDay.setValue(true);\n    } else if (cron.match(yearlyExp)) {\n      this.allForm.controls.cronType.setValue('yearly', { emitEvent: false });\n      this.allForm.controls.specificMonthWeek.setValue(false);\n    } else if (cron.match(yearlyMonthWeekExp)) {\n      this.allForm.controls.cronType.setValue('yearly', { emitEvent: false });\n      this.allForm.controls.specificMonthWeek.setValue(false);\n    } else {\n      this.allForm.controls.cronType.setValue('unknown', { emitEvent: false });\n    }\n    this.allForm.updateValueAndValidity({ onlySelf: true });\n  }\n\n  /**\n   * Cron is valid\n   *\n   * @param cron cron\n   * @returns boolean\n   */\n  private cronIsValid(cron: string): boolean {\n    if (cron) {\n      const cronParts = cron.split(' ');\n      return (\n        (this.isCronFlavorQuartz &&\n          (cronParts.length === 6 || cronParts.length === 7)) ||\n        (this.isCronFlavorStandard &&\n          cronParts.length === 5 &&\n          !cron.includes('undefined'))\n      );\n    }\n\n    return false;\n  }\n\n  /**\n   * Get Ordinal Suffix\n   *\n   * @param value value\n   * @returns string\n   */\n  private getOrdinalSuffix(value: string) {\n    if (value.length > 1) {\n      const secondToLastDigit = value.charAt(value.length - 2);\n      if (secondToLastDigit === '1') {\n        return 'th';\n      }\n    }\n\n    const lastDigit = value.charAt(value.length - 1);\n    switch (lastDigit) {\n      case '1':\n        return 'st';\n      case '2':\n        return 'nd';\n      case '3':\n        return 'rd';\n      default:\n        return 'th';\n    }\n  }\n\n  /**\n   * Get Select Options\n   *\n   * @returns select options\n   */\n  private getSelectOptions() {\n    return {\n      months: this.getRange(1, 12),\n      monthWeeks: ['#1', '#2', '#3', '#4', '#5', 'L'],\n      days: ['MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN'],\n      minutes: this.getRange(0, 59),\n      fullMinutes: this.getRange(0, 59),\n      seconds: this.getRange(0, 59),\n      hours: this.getRange(1, 23),\n      monthDays: this.getRange(1, 31),\n      monthDaysWithLasts: [\n        '1W',\n        ...[...this.getRange(1, 31).map(String)],\n        'LW',\n        'L',\n      ],\n      monthDaysWithOutLasts: [...[...this.getRange(1, 31).map(String)]],\n      hourTypes: ['AM', 'PM'],\n    };\n  }\n\n  /**\n   * Get Range\n   *\n   * @param start start value\n   * @param end end value\n   * @returns Days\n   */\n  private getRange(start: number, end: number): number[] {\n    const length = end - start + 1;\n    return [...Array(length)].map((_, i) => i + start);\n  }\n\n  /**\n   * Write value\n   *\n   * @param obj obj\n   */\n  writeValue(obj: string | null): void {\n    if (obj === null) {\n      return;\n    }\n    this.handleModelChange(obj);\n  }\n\n  /**\n   * RegisterOnChange\n   *\n   * @param fn fn\n   */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /**\n   * RegisterOnTouched\n   *\n   * @param fn fn\n   */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * setDisabledState\n   *\n   * @param isDisabled boolean\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /**\n   * markAsTouched\n   *\n   */\n  markAsTouched() {\n    if (!this.touched) {\n      this.onTouched();\n      this.touched = true;\n    }\n  }\n\n  /**\n   * Change the monthly radio\n   *\n   * @param val is specific week day\n   */\n  public monthRadioChange(val: boolean) {\n    this.allForm.get('specificWeekDay')?.setValue(val);\n  }\n\n  /**\n   * Change the yearly radio\n   *\n   *  @param val is specific month week\n   */\n  public yearlyRadioChange(val: any) {\n    this.allForm.get('day')?.setValue('1');\n    this.allForm.get('specificMonthWeek')?.setValue(val);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./cron-editor.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Ui CronEditor constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 187,
                "rawdescription": "\n\nUi CronEditor constructor\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 5030,
                            "end": 5032,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "fb"
                        },
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 5024,
                            "end": 5029,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>FormBuilder</p>\n"
                    },
                    {
                        "name": {
                            "pos": 5057,
                            "end": 5066,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "translate"
                        },
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 5051,
                            "end": 5056,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>angular Translate service</p>\n"
                    },
                    {
                        "name": {
                            "pos": 5105,
                            "end": 5114,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "ngControl"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 5099,
                            "end": 5104,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Current control</p>\n"
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "ControlValueAccessor"
            ],
            "accessors": {
                "isCronFlavorQuartz": {
                    "name": "isCronFlavorQuartz",
                    "getSignature": {
                        "name": "isCronFlavorQuartz",
                        "type": "",
                        "returnType": "",
                        "line": 165,
                        "rawdescription": "",
                        "description": "",
                        "jsdoctags": [
                            {
                                "pos": 4348,
                                "end": 4379,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 4349,
                                    "end": 4356,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>is cron Flavor Quartz</p>\n"
                            }
                        ]
                    }
                },
                "isCronFlavorStandard": {
                    "name": "isCronFlavorStandard",
                    "getSignature": {
                        "name": "isCronFlavorStandard",
                        "type": "",
                        "returnType": "",
                        "line": 170,
                        "rawdescription": "",
                        "description": "",
                        "jsdoctags": [
                            {
                                "pos": 4471,
                                "end": 4504,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 4472,
                                    "end": 4479,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>is cron Flavor Standard</p>\n"
                            }
                        ]
                    }
                },
                "yearDefaultChar": {
                    "name": "yearDefaultChar",
                    "getSignature": {
                        "name": "yearDefaultChar",
                        "type": "",
                        "returnType": "",
                        "line": 175,
                        "rawdescription": "",
                        "description": "",
                        "jsdoctags": [
                            {
                                "pos": 4600,
                                "end": 4622,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 4601,
                                    "end": 4608,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>year default</p>\n"
                            }
                        ]
                    }
                },
                "weekDayDefaultChar": {
                    "name": "weekDayDefaultChar",
                    "getSignature": {
                        "name": "weekDayDefaultChar",
                        "type": "",
                        "returnType": "",
                        "line": 180,
                        "rawdescription": "",
                        "description": "",
                        "jsdoctags": [
                            {
                                "pos": 4722,
                                "end": 4747,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 4723,
                                    "end": 4730,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>weekday default</p>\n"
                            }
                        ]
                    }
                },
                "monthDayDefaultChar": {
                    "name": "monthDayDefaultChar",
                    "getSignature": {
                        "name": "monthDayDefaultChar",
                        "type": "",
                        "returnType": "",
                        "line": 185,
                        "rawdescription": "",
                        "description": "",
                        "jsdoctags": [
                            {
                                "pos": 4851,
                                "end": 4877,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 4852,
                                    "end": 4859,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>monthday default</p>\n"
                            }
                        ]
                    }
                }
            },
            "templateData": "<section>\n  <ui-tabs>\n    <!-- Minute -->\n    <ui-tab [formGroup]=\"allForm\" *ngIf=\"!options.hideMinutesTab\" #minutesTab>\n      <ng-container ngProjectAs=\"label\">\n        <span>{{ 'common.cronEditor.minutely' | translate }}</span>\n      </ng-container>\n      <ng-template uiTabContent>\n        <div class=\"px-2\">\n          <div\n            class=\"inline-flex items-center gap-2\"\n            (click)=\"allForm.controls.cronType.setValue('minutely')\"\n          >\n            <span>{{ 'common.cronEditor.every.feminine' | translate }}</span>\n            <div class=\"w-32\">\n              <div uiFormFieldDirective>\n                <label>{{ 'common.cronEditor.minutes' | translate }}</label>\n                <ui-select-menu formControlName=\"minutesPer\">\n                  <ui-select-option\n                    *ngFor=\"let minute of minutes\"\n                    [value]=\"minute\"\n                    >{{ minute }}</ui-select-option\n                  >\n                </ui-select-menu>\n              </div>\n            </div>\n\n            <div *ngIf=\"isCronFlavorQuartz\">\n              <span>{{ 'common.cronEditor.atTime' | translate }}</span>\n              <ui-cron-time-picker\n                [formGroup]=\"allForm\"\n                [hideHours]=\"true\"\n                [hideMinutes]=\"true\"\n                [use24HourTime]=\"options.use24HourTime\"\n                [hideSeconds]=\"options.hideSeconds || !isCronFlavorQuartz\"\n              >\n              </ui-cron-time-picker>\n            </div>\n          </div>\n        </div>\n      </ng-template>\n    </ui-tab>\n\n    <!-- Hourly -->\n    <ui-tab *ngIf=\"!options.hideHourlyTab\" #hourlyTab>\n      <ng-container ngProjectAs=\"label\">\n        <span>{{ 'common.cronEditor.hourly' | translate }}</span>\n      </ng-container>\n      <ng-template uiTabContent>\n        <div class=\"px-2\">\n          <div\n            class=\"inline-flex items-center gap-2\"\n            (click)=\"allForm.controls.cronType.setValue('hourly')\"\n          >\n            <span>{{ 'common.cronEditor.every.feminine' | translate }}</span>\n            <div class=\"w-32\">\n              <div uiFormFieldDirective [formGroup]=\"allForm\">\n                <label>{{ 'common.cronEditor.hours' | translate }}</label>\n                <ui-select-menu formControlName=\"hoursPer\">\n                  <ui-select-option *ngFor=\"let hour of hours\" [value]=\"hour\">{{\n                    hour\n                  }}</ui-select-option>\n                </ui-select-menu>\n              </div>\n            </div>\n            <div>\n              <ui-cron-time-picker\n                [formGroup]=\"allForm\"\n                [hideHours]=\"true\"\n                [use24HourTime]=\"options.use24HourTime\"\n                [hideSeconds]=\"options.hideSeconds || !isCronFlavorQuartz\"\n              >\n              </ui-cron-time-picker>\n            </div>\n          </div>\n        </div>\n      </ng-template>\n    </ui-tab>\n\n    <!-- Daily-->\n    <ui-tab *ngIf=\"!options.hideDailyTab\" #dailyTab>\n      <ng-container ngProjectAs=\"label\">\n        <span>{{ 'common.cronEditor.daily' | translate }}</span>\n      </ng-container>\n      <ng-template uiTabContent>\n        <div class=\"px-2\">\n          <div\n            (click)=\"allForm.controls.cronType.setValue('daily')\"\n            class=\"flex flex-col gap-3\"\n          >\n            <!-- Selection of days -->\n            <div [formGroup]=\"allForm\" class=\"flex gap-2 items-center\">\n              <span>{{ 'common.cronEditor.every.masculine' | translate }}</span>\n              <div\n                class=\"flex flex-col\"\n                formControlName=\"weekdaysOnly\"\n                uiRadioGroupDirective=\"weekdaysOnlyOptions\"\n              >\n                <!-- Selection of days frequency -->\n                <ui-radio name=\"subTab\" [value]=\"false\" [checked]=\"true\">\n                  <ng-container ngProjectAs=\"label\">\n                    <div uiFormFieldDirective>\n                      <label>{{ 'common.cronEditor.days' | translate }}</label>\n                      <ui-select-menu formControlName=\"daysPer\">\n                        <ui-select-option\n                          *ngFor=\"let monthDay of selectOptions.monthDays\"\n                          [value]=\"monthDay\"\n                        >\n                          {{ monthDay }}\n                        </ui-select-option>\n                      </ui-select-menu>\n                    </div>\n                  </ng-container>\n                </ui-radio>\n                <!-- Working days -->\n                <ui-radio name=\"subTab\" [value]=\"true\">\n                  <ng-container ngProjectAs=\"label\">\n                    <span>{{ 'common.cronEditor.weekDay' | translate }} </span>\n                  </ng-container>\n                </ui-radio>\n              </div>\n            </div>\n            <!-- Selection of time -->\n            <div class=\"inline-flex gap-2 items-center\">\n              <span>{{ 'common.cronEditor.atTime' | translate }}:</span>\n              <ui-cron-time-picker\n                [formGroup]=\"allForm\"\n                [use24HourTime]=\"options.use24HourTime\"\n                [hideSeconds]=\"options.hideSeconds || !isCronFlavorQuartz\"\n              >\n              </ui-cron-time-picker>\n            </div>\n          </div>\n        </div>\n      </ng-template>\n    </ui-tab>\n\n    <!-- Weekly-->\n    <ui-tab *ngIf=\"!options.hideWeeklyTab\" #weeklyTab>\n      <ng-container ngProjectAs=\"label\">\n        <span>{{ 'common.cronEditor.weekly' | translate }}</span>\n      </ng-container>\n      <ng-template uiTabContent>\n        <div class=\"px-2\">\n          <div\n            (click)=\"allForm.controls.cronType.setValue('weekly')\"\n            class=\"flex flex-col gap-3\"\n          >\n            <div class=\"inline-flex items-center gap-2\">\n              <span>{{ 'common.cronEditor.every.masculine' | translate }}</span>\n\n              <div [formGroup]=\"allForm\" class=\"flex flex-col\">\n                <ui-checkbox formControlName=\"MON\">\n                  <ng-container ngProjectAs=\"label\">\n                    {{ 'common.cronEditor.weekDays.monday' | translate }}\n                  </ng-container>\n                </ui-checkbox>\n                <ui-checkbox formControlName=\"TUE\">\n                  <ng-container ngProjectAs=\"label\">\n                    {{ 'common.cronEditor.weekDays.tuesday' | translate }}\n                  </ng-container>\n                </ui-checkbox>\n                <ui-checkbox formControlName=\"WED\">\n                  <ng-container ngProjectAs=\"label\">\n                    {{\n                      'common.cronEditor.weekDays.wednesday' | translate\n                    }}</ng-container\n                  >\n                </ui-checkbox>\n                <ui-checkbox formControlName=\"THU\">\n                  <ng-container ngProjectAs=\"label\">\n                    {{ 'common.cronEditor.weekDays.thursday' | translate }}\n                  </ng-container>\n                </ui-checkbox>\n                <ui-checkbox formControlName=\"FRI\">\n                  <ng-container ngProjectAs=\"label\">\n                    {{ 'common.cronEditor.weekDays.friday' | translate }}\n                  </ng-container>\n                </ui-checkbox>\n                <ui-checkbox formControlName=\"SAT\">\n                  <ng-container ngProjectAs=\"label\">\n                    {{ 'common.cronEditor.weekDays.saturday' | translate }}\n                  </ng-container>\n                </ui-checkbox>\n                <ui-checkbox formControlName=\"SUN\">\n                  <ng-container ngProjectAs=\"label\">\n                    {{ 'common.cronEditor.weekDays.sunday' | translate }}\n                  </ng-container>\n                </ui-checkbox>\n              </div>\n            </div>\n\n            <div class=\"inline-flex items-center gap-2\">\n              <span>{{ 'common.cronEditor.atTime' | translate }}:</span>\n              <ui-cron-time-picker\n                [formGroup]=\"allForm\"\n                [use24HourTime]=\"options.use24HourTime\"\n                [hideSeconds]=\"options.hideSeconds || !isCronFlavorQuartz\"\n              >\n              </ui-cron-time-picker>\n            </div>\n          </div>\n        </div>\n      </ng-template>\n    </ui-tab>\n\n    <!-- Monthly-->\n    <ui-tab *ngIf=\"!options.hideMonthlyTab\" #monthlyTab>\n      <ng-container ngProjectAs=\"label\">\n        <span>{{ 'common.cronEditor.monthly' | translate }}</span>\n      </ng-container>\n      <ng-template uiTabContent>\n        <div class=\"px-2\">\n          <div\n            [formGroup]=\"allForm\"\n            (click)=\"allForm.controls.cronType.setValue('monthly')\"\n            class=\"flex flex-col gap-3\"\n          >\n            <div\n              formControlName=\"specificWeekDay\"\n              uiRadioGroupDirective=\"specificWeekDayOptions\"\n            >\n              <ui-radio\n                name=\"monthly-radio\"\n                [value]=\"false\"\n                (click)=\"monthRadioChange(false)\"\n              >\n                <!-- Specific day -->\n                <ng-container ngProjectAs=\"label\">\n                  <div class=\"inline-flex items-center gap-2\">\n                    <span>{{\n                      'common.cronEditor.onThe.masculine' | translate\n                    }}</span>\n                    <ng-container *ngIf=\"options.cronFlavor === 'quartz'\">\n                      <div uiFormFieldDirective>\n                        <label>{{ 'common.cronEditor.day' | translate }}</label>\n                        <ui-select-menu\n                          class=\"month-days\"\n                          formControlName=\"days\"\n                        >\n                          <ui-select-option\n                            *ngFor=\"\n                              let monthDaysWithLast of selectOptions.monthDaysWithLasts\n                            \"\n                            [value]=\"monthDaysWithLast\"\n                          >\n                            {{ monthDayDisplay(monthDaysWithLast) }}\n                          </ui-select-option>\n                        </ui-select-menu>\n                      </div>\n                    </ng-container>\n\n                    <ng-container *ngIf=\"options.cronFlavor === 'standard'\">\n                      <div uiFormFieldDirective>\n                        <label>{{ 'common.cronEditor.day' | translate }}</label>\n                        <ui-select-menu\n                          class=\"month-days\"\n                          formControlName=\"days\"\n                        >\n                          <ui-select-option\n                            *ngFor=\"\n                              let monthDaysWithOutLast of selectOptions.monthDaysWithOutLasts\n                            \"\n                            [value]=\"monthDaysWithOutLast\"\n                          >\n                            {{ monthDayDisplay(monthDaysWithOutLast) }}\n                          </ui-select-option>\n                        </ui-select-menu>\n                      </div>\n                    </ng-container>\n\n                    <span>{{ 'common.cronEditor.ofEvery' | translate }}</span>\n\n                    <div uiFormFieldDirective>\n                      <label>{{ 'common.cronEditor.month' | translate }}</label>\n                      <ui-select-menu\n                        class=\"months-small\"\n                        formControlName=\"monthsInc\"\n                      >\n                        <ui-select-option\n                          *ngFor=\"let month of selectOptions.months\"\n                          [value]=\"month\"\n                        >\n                          {{ month }}\n                        </ui-select-option>\n                      </ui-select-menu>\n                    </div>\n                  </div>\n                </ng-container>\n              </ui-radio>\n\n              <ui-radio\n                name=\"monthly-radio2\"\n                [value]=\"true\"\n                (click)=\"monthRadioChange(true)\"\n              >\n                <!-- Specific Week day -->\n                <ng-container ngProjectAs=\"label\">\n                  <div class=\"inline-flex items-center gap-2\">\n                    <span>{{\n                      'common.cronEditor.onThe.feminine' | translate\n                    }}</span>\n                    <div uiFormFieldDirective>\n                      <label>{{ 'common.cronEditor.week' | translate }}</label>\n                      <ui-select-menu\n                        class=\"day-order-in-month\"\n                        formControlName=\"monthsWeek\"\n                      >\n                        <ui-select-option\n                          *ngFor=\"let monthWeek of selectOptions.monthWeeks\"\n                          [value]=\"monthWeek\"\n                        >\n                          {{ monthWeekDisplay(monthWeek) }}\n                        </ui-select-option>\n                      </ui-select-menu>\n                    </div>\n\n                    <div uiFormFieldDirective class=\"w-36\">\n                      <label>{{ 'common.cronEditor.day' | translate }}</label>\n                      <ui-select-menu class=\"week-days\" formControlName=\"day\">\n                        <ui-select-option\n                          *ngFor=\"let day of selectOptions.days\"\n                          [value]=\"day\"\n                        >\n                          {{ dayDisplay(day) }}\n                        </ui-select-option>\n                      </ui-select-menu>\n                    </div>\n\n                    <span>{{ 'common.cronEditor.ofEvery' | translate }}</span>\n\n                    <div uiFormFieldDirective>\n                      <label>\n                        {{ 'common.cronEditor.month' | translate }}</label\n                      >\n                      <ui-select-menu\n                        class=\"months-small\"\n                        formControlName=\"monthsInc\"\n                      >\n                        <ui-select-option\n                          *ngFor=\"let month of selectOptions.months\"\n                          [value]=\"month\"\n                        >\n                          {{ month }}\n                        </ui-select-option>\n                      </ui-select-menu>\n                    </div>\n                  </div>\n                </ng-container>\n              </ui-radio>\n            </div>\n\n            <div class=\"inline-flex items-center gap-2\">\n              <span>{{ 'common.cronEditor.atTime' | translate }}:</span>\n              <ui-cron-time-picker\n                [formGroup]=\"allForm\"\n                [use24HourTime]=\"options.use24HourTime\"\n                [hideSeconds]=\"options.hideSeconds || !isCronFlavorQuartz\"\n              >\n              </ui-cron-time-picker>\n            </div>\n          </div>\n        </div>\n      </ng-template>\n    </ui-tab>\n\n    <!-- Yearly-->\n    <ui-tab *ngIf=\"!options.hideYearlyTab\" #yearlyTab>\n      <ng-container ngProjectAs=\"label\">\n        <span>{{ 'common.cronEditor.yearly' | translate }}</span>\n      </ng-container>\n      <ng-template uiTabContent>\n        <div class=\"px-2\">\n          <div\n            [formGroup]=\"allForm\"\n            (click)=\"allForm.controls.cronType.setValue('yearly')\"\n            class=\"flex flex-col gap-3\"\n          >\n            <div\n              formControlName=\"specificMonthWeek\"\n              uiRadioGroupDirective=\"specificMonthWeekOptions\"\n            >\n              <ui-radio\n                name=\"yearly-radio\"\n                [value]=\"false\"\n                (click)=\"yearlyRadioChange(false)\"\n              >\n                <ng-container ngProjectAs=\"label\">\n                  <div class=\"inline-flex items-center gap-2\">\n                    <span>{{\n                      'common.cronEditor.onThe.masculine' | translate\n                    }}</span>\n\n                    <div\n                      uiFormFieldDirective\n                      *ngIf=\"options.cronFlavor === 'quartz'\"\n                    >\n                      <label>{{ 'common.cronEditor.day' | translate }}</label>\n                      <ui-select-menu class=\"month-days\" formControlName=\"day\">\n                        <ui-select-option\n                          *ngFor=\"\n                            let monthDaysWithLast of selectOptions.monthDaysWithLasts\n                          \"\n                          [value]=\"monthDaysWithLast\"\n                        >\n                          {{ monthDayDisplay(monthDaysWithLast) }}\n                        </ui-select-option>\n                      </ui-select-menu>\n                    </div>\n\n                    <div\n                      uiFormFieldDirective\n                      *ngIf=\"options.cronFlavor === 'standard'\"\n                    >\n                      <label>{{ 'common.cronEditor.day' | translate }}</label>\n                      <ui-select-menu class=\"month-days\" formControlName=\"day\">\n                        <ui-select-option\n                          *ngFor=\"\n                            let monthDaysWithOutLast of selectOptions.monthDaysWithOutLasts\n                          \"\n                          [value]=\"monthDaysWithOutLast\"\n                        >\n                          {{ monthDayDisplay(monthDaysWithOutLast) }}\n                        </ui-select-option>\n                      </ui-select-menu>\n                    </div>\n\n                    <span>{{ 'common.cronEditor.of' | translate }}</span>\n\n                    <div uiFormFieldDirective class=\"w-36\">\n                      <label>{{ 'common.cronEditor.month' | translate }}</label>\n                      <ui-select-menu class=\"months\" formControlName=\"months\">\n                        <ui-select-option\n                          *ngFor=\"let month of selectOptions.months\"\n                          [value]=\"month\"\n                        >\n                          {{ monthDisplay(month) }}\n                        </ui-select-option>\n                      </ui-select-menu>\n                    </div>\n                  </div>\n                </ng-container>\n              </ui-radio>\n\n              <ui-radio\n                name=\"yearly-radio\"\n                value=\"specificMonthWeek\"\n                (click)=\"yearlyRadioChange('specificMonthWeek')\"\n              >\n                <ng-container ngProjectAs=\"label\">\n                  <div class=\"inline-flex items-center gap-2\">\n                    <span>{{\n                      'common.cronEditor.onThe.feminine' | translate\n                    }}</span>\n\n                    <div uiFormFieldDirective>\n                      <label>{{ 'common.cronEditor.week' | translate }}</label>\n                      <ui-select-menu\n                        class=\"day-order-in-month\"\n                        formControlName=\"monthsWeek\"\n                      >\n                        <ui-select-option\n                          *ngFor=\"let monthWeek of selectOptions.monthWeeks\"\n                          [value]=\"monthWeek\"\n                        >\n                          {{ monthWeekDisplay(monthWeek) }}\n                        </ui-select-option>\n                      </ui-select-menu>\n                    </div>\n\n                    <div uiFormFieldDirective class=\"w-36\">\n                      <label>{{ 'common.cronEditor.day' | translate }}</label>\n                      <ui-select-menu class=\"week-days\" formControlName=\"day\">\n                        <ui-select-option\n                          *ngFor=\"let day of selectOptions.days\"\n                          [value]=\"day\"\n                        >\n                          {{ dayDisplay(day) }}\n                        </ui-select-option>\n                      </ui-select-menu>\n                    </div>\n\n                    <span>{{ 'common.cronEditor.of' | translate }}</span>\n\n                    <div uiFormFieldDirective class=\"w-36\">\n                      <label>{{ 'common.cronEditor.month' | translate }}</label>\n                      <ui-select-menu class=\"months\" formControlName=\"months\">\n                        <ui-select-option\n                          *ngFor=\"let month of selectOptions.months\"\n                          [value]=\"month\"\n                        >\n                          {{ monthDisplay(month) }}\n                        </ui-select-option>\n                      </ui-select-menu>\n                    </div>\n                  </div>\n                </ng-container>\n              </ui-radio>\n            </div>\n\n            <div class=\"inline-flex items-center gap-2\">\n              <span>{{ 'common.cronEditor.atTime' | translate }}:</span>\n              <ui-cron-time-picker\n                [disabled]=\"disabled\"\n                [formGroup]=\"allForm\"\n                [use24HourTime]=\"options.use24HourTime\"\n                [hideSeconds]=\"options.hideSeconds || !isCronFlavorQuartz\"\n              >\n              </ui-cron-time-picker>\n            </div>\n          </div>\n        </div>\n      </ng-template>\n    </ui-tab>\n\n    <!-- Advanced-->\n    <ui-tab *ngIf=\"!options.hideAdvancedTab\" #advancedTab>\n      <ng-container ngProjectAs=\"label\">\n        <label>{{ 'common.cronEditor.advanced' | translate }}</label>\n      </ng-container>\n      <ng-template uiTabContent>\n        <div class=\"px-2\">\n          <div [formGroup]=\"allForm\">\n            <div uiFormFieldDirective>\n              <label>{{\n                'components.calculatedFields.expression' | translate\n              }}</label>\n              <input type=\"text\" formControlName=\"expression\" />\n            </div>\n          </div>\n        </div>\n      </ng-template>\n    </ui-tab>\n  </ui-tabs>\n</section>\n"
        },
        {
            "name": "CustomSnackbarComponent",
            "id": "component-CustomSnackbarComponent-7902623c9047ad763162bafab94bf03dedfb12b363012ee3f394d374c231dd51dcb477928596220266e312359314790501646f4e8d58678d20c16a9c1fc9244d",
            "file": "libs/ui/src/lib/snackbar/snackbar.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-custom-snackbar",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"flex\">\n  <span class=\"pr-2\">{{ data.message }}</span>\n  <ui-spinner size=\"medium\" *ngIf=\"data.loading\"></ui-spinner>\n  <ng-container *ngIf=\"!data.loading\">\n    <ui-icon\n      class=\"h-6\"\n      *ngIf=\"!data.error\"\n      [icon]=\"check\"\n      variant=\"success\"\n    ></ui-icon>\n    <ui-icon\n      class=\"h-6\"\n      *ngIf=\"data.error\"\n      [icon]=\"error\"\n      variant=\"danger\"\n    ></ui-icon>\n  </ng-container>\n  <div></div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnackBarData",
                    "optional": false,
                    "description": "<p>Snackbar data</p>\n",
                    "line": 106,
                    "rawdescription": "\nSnackbar data"
                },
                {
                    "name": "dataToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<SnackBarData>",
                    "optional": false,
                    "description": "Injected snackbar data",
                    "line": 115,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "SNACKBAR_DATA"
                        }
                    ],
                    "modifierKind": [
                        167,
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "IconModule",
                    "type": "module"
                },
                {
                    "name": "SpinnerModule",
                    "type": "module"
                }
            ],
            "description": "<p>EditDialog component.</p>\n",
            "rawdescription": "\n\nEditDialog component.\n",
            "type": "component",
            "sourceCode": "import { moduleMetadata, Story, Meta } from '@storybook/angular';\nimport { SnackbarModule } from './snackbar.module';\nimport { CommonModule } from '@angular/common';\nimport { Component, Inject, Input, OnDestroy } from '@angular/core';\nimport { BehaviorSubject, Subject, takeUntil } from 'rxjs';\nimport { SNACKBAR_DATA, SnackBarData } from './snackbar.token';\nimport { SnackbarService } from './snackbar.service';\nimport { IconModule } from '../icon/icon.module';\nimport { SpinnerModule } from '../spinner/spinner.module';\nimport { StorybookTranslateModule } from '../../storybook-translate.module';\n\n/**\n * LaunchSnackbarComponent component.\n */\n@Component({\n  selector: 'ui-snackbar-launcher',\n  template: `\n    <button\n      type=\"button\"\n      class=\"rounded-md bg-indigo-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n      (click)=\"openSnackBar()\"\n    >\n      {{ default ? 'Open default snackbar' : 'Open custom snackbar' }}\n    </button>\n  `,\n})\nclass LaunchSnackbarComponent implements OnDestroy {\n  /** Default snackbar */\n  @Input() default = true;\n  /** Destroy subject */\n  destroy$ = new Subject<void>();\n\n  /**\n   * Constructor for the launch Snackbar component\n   *\n   * @param snackBar SnackbarService service\n   */\n  constructor(private snackBar: SnackbarService) {}\n\n  /**\n   * Open Snackbar.\n   */\n  openSnackBar(): void {\n    if (this.default) {\n      this.snackBar.openSnackBar('Processing failed', {\n        duration: 5000,\n        error: true,\n      });\n    } else {\n      const snackbarRef = this.snackBar.openComponentSnackBar(\n        CustomSnackbarComponent,\n        {\n          duration: 0,\n          action: 'Reload',\n          data: {\n            message: 'Processing',\n            loading: true,\n          },\n        }\n      );\n      snackbarRef.instance.actionComplete\n        .pipe(takeUntil(this.destroy$))\n        .subscribe({\n          next: () => window.alert('Action complete!!'),\n        });\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n\n/**\n * EditDialog component.\n */\n@Component({\n  standalone: true,\n  imports: [CommonModule, IconModule, SpinnerModule],\n  selector: 'ui-custom-snackbar',\n  template: `\n    <div class=\"flex\">\n      <span class=\"pr-2\">{{ data.message }}</span>\n      <ui-spinner size=\"medium\" *ngIf=\"data.loading\"></ui-spinner>\n      <ng-container *ngIf=\"!data.loading\">\n        <ui-icon\n          class=\"h-6\"\n          *ngIf=\"!data.error\"\n          [icon]=\"check\"\n          variant=\"success\"\n        ></ui-icon>\n        <ui-icon\n          class=\"h-6\"\n          *ngIf=\"data.error\"\n          [icon]=\"error\"\n          variant=\"danger\"\n        ></ui-icon>\n      </ng-container>\n      <div></div>\n    </div>\n  `,\n})\nclass CustomSnackbarComponent {\n  /** Snackbar data */\n  data: SnackBarData;\n\n  /**\n   * Snackbar child component\n   *\n   * @param dataToken Injected snackbar data\n   */\n  constructor(\n    @Inject(SNACKBAR_DATA)\n    public dataToken: BehaviorSubject<SnackBarData>\n  ) {\n    this.data = dataToken.getValue();\n  }\n}\n\nexport default {\n  title: 'Components/Snackbar',\n  tags: ['autodocs'],\n  component: LaunchSnackbarComponent,\n  decorators: [\n    moduleMetadata({\n      declarations: [LaunchSnackbarComponent],\n      imports: [CommonModule, SnackbarModule, StorybookTranslateModule],\n      providers: [SnackbarService],\n    }),\n  ],\n  argTypes: {\n    default: {\n      description: 'Open default snackbar',\n      type: 'boolean',\n    },\n    destroy$: {\n      description: 'Subject to emit when the component is destroyed.',\n      type: 'string',\n    },\n    ngOnDestroy: {\n      description:\n        'Lifecycle hook that is called when the component is destroyed.',\n    },\n  },\n} as Meta;\n\n/**\n * Template LaunchSnackbarComponent\n *\n * @param {LaunchSnackbarComponent} args args\n * @returns LaunchSnackbarComponent\n */\nconst Template: Story<LaunchSnackbarComponent> = (\n  args: LaunchSnackbarComponent\n) => ({\n  props: args,\n});\n\n/** LaunchSnackbarComponent */\nexport const Snackbar = Template.bind({});\nSnackbar.args = {\n  default: true,\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Snackbar child component</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dataToken",
                        "type": "BehaviorSubject<SnackBarData>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 106,
                "rawdescription": "\n\nSnackbar child component\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 2997,
                            "end": 3006,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "dataToken"
                        },
                        "type": "BehaviorSubject<SnackBarData>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2991,
                            "end": 2996,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Injected snackbar data</p>\n"
                    }
                ]
            }
        },
        {
            "name": "DatePickerComponent",
            "id": "component-DatePickerComponent-0ab2e6c7ce3378e19bc795d9c157cc44c189227c87704e2679393a2d8f1fcbfc20fa08883be23e86e62190c01f311848b12e191bff9dc44371670787b1bbe13b",
            "file": "libs/ui/src/lib/date/date-picker/date-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-date-picker",
            "styleUrls": [
                "../date.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./date-picker.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nBoolean indicating whether the component is disabled.",
                    "description": "<p>Boolean indicating whether the component is disabled.</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedValue",
                    "defaultValue": "new EventEmitter<Date>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEvent emitter for the selected date.",
                    "description": "<p>Event emitter for the selected date.</p>\n",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "calendar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "<p>Reference to the calendar template.</p>\n",
                    "line": 25,
                    "rawdescription": "\nReference to the calendar template.",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TemplateRef"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "<p>The currently selected date.</p>\n",
                    "line": 27,
                    "rawdescription": "\nThe currently selected date."
                },
                {
                    "name": "viewChangeAction",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Boolean indicating whether a view change action has occurred.</p>\n",
                    "line": 29,
                    "rawdescription": "\nBoolean indicating whether a view change action has occurred."
                }
            ],
            "methodsClass": [
                {
                    "name": "handleChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles the selection of a content\n\n",
                    "description": "<p>Handles the selection of a content</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 921,
                                "end": 926,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 915,
                                "end": 920,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>selected date</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>UI Datepicker component\nDatepicker is a UI component that allows the user to select a date from a calendar or enter it manually.</p>\n",
            "rawdescription": "\n\nUI Datepicker component\nDatepicker is a UI component that allows the user to select a date from a calendar or enter it manually.\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\n\n/**\n * UI Datepicker component\n * Datepicker is a UI component that allows the user to select a date from a calendar or enter it manually.\n */\n@Component({\n  selector: 'ui-date-picker',\n  templateUrl: './date-picker.component.html',\n  styleUrls: ['../date.scss'],\n})\nexport class DatePickerComponent {\n  /** Boolean indicating whether the component is disabled. */\n  @Input() disabled = false;\n  /** Event emitter for the selected date. */\n  @Output() selectedValue = new EventEmitter<Date>();\n  /** Reference to the calendar template. */\n  @ViewChild(TemplateRef) calendar!: TemplateRef<any>;\n  /** The currently selected date. */\n  value!: Date;\n  /** Boolean indicating whether a view change action has occurred. */\n  viewChangeAction = false;\n\n  /**\n   * Handles the selection of a content\n   *\n   * @param value selected date\n   */\n  public handleChange(value: Date) {\n    this.viewChangeAction = false;\n    this.value = value;\n    this.selectedValue.emit(value);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "::ng-deep .k-calendar-range {\n  & .k-range-end {\n    border-top-right-radius: 1rem !important;\n    border-bottom-right-radius: 1rem !important;\n  }\n  & .k-range-start {\n    border-top-left-radius: 1rem !important;\n    border-bottom-left-radius: 1rem !important;\n  }\n  & .k-range-mid,\n  .k-range-end,\n  .k-range-start {\n    --tw-bg-opacity: 1 !important;\n    background-color: rgb(var(--primary-100) / var(--tw-bg-opacity)) !important;\n  }\n}\n\n::ng-deep .k-calendar {\n  & .k-calendar-td .k-link {\n    border-radius: 1rem !important;\n  }\n  & .k-button-flat-primary,\n  .today {\n    color: rgb(var(--primary-400) / var(--tw-bg-opacity)) !important;\n  }\n  & .k-calendar-td.k-selected .k-link {\n    --tw-bg-opacity: 1 !important;\n    background-color: rgb(var(--primary-400) / var(--tw-bg-opacity)) !important;\n  }\n  & .k-calendar-td:hover .k-link {\n    --tw-bg-opacity: 1 !important;\n    background-color: rgb(var(--primary-100) / var(--tw-bg-opacity)) !important;\n  }\n  & .k-month-header {\n    font-weight: normal !important;\n  }\n}\n\n::ng-deep .k-calendar-header .k-calendar-title {\n  font-weight: 500 !important;\n}\n\n::ng-deep input[type='date']::-webkit-inner-spin-button,\n::ng-deep input[type='date']::-webkit-calendar-picker-indicator {\n  display: none !important;\n  appearance: none !important;\n  -webkit-appearance: none !important;\n}\n",
                    "styleUrl": "../date.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<ng-template>\n  <kendo-multiviewcalendar\n    class=\"px-2 pb-3 left-0 transition-all duration-150 ease-in bg-white rounded-lg shadow-[0px_2px_15px_-3px_rgba(0,0,0,.07),_0px_10px_20px_-2px_rgba(0,0,0,.04)] z-[1066]\"\n    [disabled]=\"disabled\"\n    [showViewHeader]=\"false\"\n    [views]=\"1\"\n    [focusedDate]=\"value\"\n    [value]=\"value\"\n    topView=\"decade\"\n    (valueChange)=\"handleChange($event)\"\n    (activeViewChange)=\"viewChangeAction = true\"\n  >\n    <kendo-multiviewcalendar-messages\n      today=\"{{ 'kendo.datepicker.today' | translate }}\"\n    >\n    </kendo-multiviewcalendar-messages>\n    <ng-template kendoCalendarMonthCellTemplate let-date>\n      <span>{{ date.getDate() }}</span>\n    </ng-template>\n    <ng-template kendoCalendarYearCellTemplate let-context=\"cellContext\">\n      <span>{{ context.formattedValue }}</span>\n    </ng-template>\n    <ng-template kendoCalendarDecadeCellTemplate let-context=\"cellContext\">\n      <span>{{ context.formattedValue }}</span>\n    </ng-template>\n    <ng-template kendoCalendarHeaderTitleTemplate let-title>\n      <span class=\"p-2.5\">\n        {{ title }}\n      </span>\n    </ng-template>\n  </kendo-multiviewcalendar>\n</ng-template>\n"
        },
        {
            "name": "DateRangeComponent",
            "id": "component-DateRangeComponent-5776324154ee6ef2c8edb320f50e5f94f5d2838e6cfca92d7a15ddf058a25fd938cbc645a0b189c4da49baf69bedca3cfc3d365e41e2854bdcc55aac2c530c23",
            "file": "libs/ui/src/lib/date/date-range/date-range.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-date-range",
            "styleUrls": [
                "../date.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./date-range.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nBoolean indicating whether the component is disabled.",
                    "description": "<p>Boolean indicating whether the component is disabled.</p>\n",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedValue",
                    "defaultValue": "new EventEmitter<SelectionRange>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEvent emitter for the selected date range.",
                    "description": "<p>Event emitter for the selected date range.</p>\n",
                    "line": 24,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "calendar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "<p>Reference to the calendar template.</p>\n",
                    "line": 26,
                    "rawdescription": "\nReference to the calendar template.",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TemplateRef"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "range",
                    "defaultValue": "{\n    start: null,\n    end: null,\n  } as unknown as SelectionRange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectionRange",
                    "optional": false,
                    "description": "<p>The currently selected date range.</p>\n",
                    "line": 28,
                    "rawdescription": "\nThe currently selected date range."
                },
                {
                    "name": "viewChangeAction",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Boolean indicating whether a view change action has occurred</p>\n",
                    "line": 33,
                    "rawdescription": "\nBoolean indicating whether a view change action has occurred"
                }
            ],
            "methodsClass": [
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "SelectionRange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles the selection of a content\n\n",
                    "description": "<p>Handles the selection of a content</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1084,
                                "end": 1089,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "type": "SelectionRange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1078,
                                "end": 1083,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>SelectionRange</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>UI Daterange component\nDaterange is a UI component that allows the user to select a date from a calendar or enter it manually.</p>\n",
            "rawdescription": "\n\nUI Daterange component\nDaterange is a UI component that allows the user to select a date from a calendar or enter it manually.\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { SelectionRange } from '@progress/kendo-angular-dateinputs';\n\n/**\n * UI Daterange component\n * Daterange is a UI component that allows the user to select a date from a calendar or enter it manually.\n */\n@Component({\n  selector: 'ui-date-range',\n  templateUrl: './date-range.component.html',\n  styleUrls: ['../date.scss'],\n})\nexport class DateRangeComponent {\n  /** Boolean indicating whether the component is disabled. */\n  @Input() disabled = false;\n  /** Event emitter for the selected date range. */\n  @Output() selectedValue = new EventEmitter<SelectionRange>();\n  /** Reference to the calendar template. */\n  @ViewChild(TemplateRef) calendar!: TemplateRef<any>;\n  /** The currently selected date range. */\n  range: SelectionRange = {\n    start: null,\n    end: null,\n  } as unknown as SelectionRange;\n  /** Boolean indicating whether a view change action has occurred */\n  viewChangeAction = false;\n\n  /**\n   * Handles the selection of a content\n   *\n   * @param event SelectionRange\n   */\n  public onChange(event: SelectionRange) {\n    this.viewChangeAction = false;\n    this.range = event as any;\n    this.selectedValue.emit(this.range);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "::ng-deep .k-calendar-range {\n  & .k-range-end {\n    border-top-right-radius: 1rem !important;\n    border-bottom-right-radius: 1rem !important;\n  }\n  & .k-range-start {\n    border-top-left-radius: 1rem !important;\n    border-bottom-left-radius: 1rem !important;\n  }\n  & .k-range-mid,\n  .k-range-end,\n  .k-range-start {\n    --tw-bg-opacity: 1 !important;\n    background-color: rgb(var(--primary-100) / var(--tw-bg-opacity)) !important;\n  }\n}\n\n::ng-deep .k-calendar {\n  & .k-calendar-td .k-link {\n    border-radius: 1rem !important;\n  }\n  & .k-button-flat-primary,\n  .today {\n    color: rgb(var(--primary-400) / var(--tw-bg-opacity)) !important;\n  }\n  & .k-calendar-td.k-selected .k-link {\n    --tw-bg-opacity: 1 !important;\n    background-color: rgb(var(--primary-400) / var(--tw-bg-opacity)) !important;\n  }\n  & .k-calendar-td:hover .k-link {\n    --tw-bg-opacity: 1 !important;\n    background-color: rgb(var(--primary-100) / var(--tw-bg-opacity)) !important;\n  }\n  & .k-month-header {\n    font-weight: normal !important;\n  }\n}\n\n::ng-deep .k-calendar-header .k-calendar-title {\n  font-weight: 500 !important;\n}\n\n::ng-deep input[type='date']::-webkit-inner-spin-button,\n::ng-deep input[type='date']::-webkit-calendar-picker-indicator {\n  display: none !important;\n  appearance: none !important;\n  -webkit-appearance: none !important;\n}\n",
                    "styleUrl": "../date.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<ng-template>\n  <kendo-multiviewcalendar\n    kendoDateRangeSelection\n    [selectionRange]=\"range\"\n    (selectionRangeChange)=\"onChange($event)\"\n    class=\"px-2 pb-3 transition-all duration-150 ease-in bg-white rounded-lg shadow-[0px_2px_15px_-3px_rgba(0,0,0,.07),_0px_10px_20px_-2px_rgba(0,0,0,.04)] z-[1066]\"\n    [disabled]=\"disabled\"\n    [showViewHeader]=\"true\"\n    [views]=\"2\"\n    topView=\"decade\"\n    (activeViewChange)=\"viewChangeAction = true\"\n  >\n    <kendo-multiviewcalendar-messages\n      today=\"{{ 'kendo.datepicker.today' | translate }}\"\n    >\n    </kendo-multiviewcalendar-messages>\n    <ng-template kendoCalendarMonthCellTemplate let-date>\n      <span>{{ date.getDate() }}</span>\n    </ng-template>\n    <ng-template kendoCalendarYearCellTemplate let-context=\"cellContext\">\n      <span>{{ context.formattedValue }}</span>\n    </ng-template>\n    <ng-template kendoCalendarDecadeCellTemplate let-context=\"cellContext\">\n      <span>{{ context.formattedValue }}</span>\n    </ng-template>\n    <ng-template kendoCalendarHeaderTitleTemplate let-title>\n      <span class=\"p-2.5\">\n        {{ title }}\n      </span>\n    </ng-template>\n  </kendo-multiviewcalendar>\n</ng-template>\n"
        },
        {
            "name": "DialogComponent",
            "id": "component-DialogComponent-f73582793735e54e30687d70139813b2ab97b11fb97aa1a018c76ba7c6fba6a6c62e0a4c76ce9b31193b99373c14a30be2be8b27f6094b9a66ed7f90bd938eab",
            "file": "libs/ui/src/lib/dialog/dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-dialog",
            "styleUrls": [
                "./dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "closable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nBoolean indicating whether the dialog is closable.",
                    "description": "<p>Boolean indicating whether the dialog is closable.</p>\n",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "onClose",
                    "defaultValue": "() => {\n    this.dialogRef.close();\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nClose Dialog.",
                    "description": "<p>Close Dialog.</p>\n",
                    "line": 26,
                    "type": "() => void",
                    "decorators": []
                },
                {
                    "name": "padding",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nShould display padding around dialog",
                    "description": "<p>Should display padding around dialog</p>\n",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "resizable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nBoolean indicating whether the dialog is resizable.",
                    "description": "<p>Boolean indicating whether the dialog is resizable.</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSize of the dialog: small - medium - big - fullscreen",
                    "description": "<p>Size of the dialog: small - medium - big - fullscreen</p>\n",
                    "line": 21,
                    "type": "DialogSize",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogRef",
                    "optional": false,
                    "description": "Used to access the dialog properties",
                    "line": 35,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onResizing",
                    "args": [
                        {
                            "name": "event",
                            "type": "ResizeEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOn resize action\n\n",
                    "description": "<p>On resize action</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1270,
                                "end": 1275,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "type": "ResizeEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1264,
                                "end": 1269,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>resize event</p>\n"
                        }
                    ]
                },
                {
                    "name": "setDialogType",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet dialog type by the given size\n",
                    "description": "<p>Set dialog type by the given size</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "event",
                            "type": "ResizeEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if resize event is valid\n\n",
                    "description": "<p>Check if resize event is valid</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2198,
                                "end": 2203,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "type": "ResizeEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2192,
                                "end": 2197,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>resize event</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2223,
                                "end": 2230,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>boolean</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Dialog component.\nDialogs are modal UI overlays that provide contextual app information.</p>\n",
            "rawdescription": "\n\nDialog component.\nDialogs are modal UI overlays that provide contextual app information.\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, OnInit } from '@angular/core';\nimport { DialogRef } from '@angular/cdk/dialog';\nimport { DialogSize } from './types/dialog-size';\nimport { ResizeEvent } from 'angular-resizable-element';\n\n/**\n * Dialog component.\n * Dialogs are modal UI overlays that provide contextual app information.\n */\n@Component({\n  selector: 'ui-dialog',\n  templateUrl: './dialog.component.html',\n  styleUrls: ['./dialog.component.scss'],\n})\nexport class DialogComponent implements OnChanges, OnInit {\n  /** Boolean indicating whether the dialog is closable. */\n  @Input() closable = false;\n  /** Should display padding around dialog */\n  @Input() padding = true;\n  /** Size of the dialog: small - medium - big - fullscreen */\n  @Input() size!: DialogSize;\n  /** Boolean indicating whether the dialog is resizable. */\n  @Input() resizable = false;\n\n  /** Close Dialog. */\n  @Input() onClose = () => {\n    this.dialogRef.close();\n  };\n\n  /**\n   * Constructor for the dialog modal component\n   *\n   * @param dialogRef Used to access the dialog properties\n   */\n  constructor(public dialogRef: DialogRef) {}\n\n  ngOnInit(): void {\n    this.setDialogType();\n  }\n\n  ngOnChanges(): void {\n    this.setDialogType();\n  }\n\n  /**\n   * On resize action\n   *\n   * @param event resize event\n   */\n  onResizing(event: ResizeEvent): void {\n    this.dialogRef.updateSize(\n      `${event.rectangle.width}px`,\n      `${event.rectangle.height}px`\n    );\n  }\n\n  /**\n   * Set dialog type by the given size\n   */\n  private setDialogType() {\n    switch (this.size) {\n      case 'fullscreen': {\n        this.dialogRef.addPanelClass('fullscreen-dialog');\n        break;\n      }\n      case 'small': {\n        this.dialogRef.updateSize('300px');\n        break;\n      }\n      case 'medium': {\n        this.dialogRef.updateSize('700px');\n        break;\n      }\n      case 'big': {\n        this.dialogRef.updateSize('100vw', '98%');\n        break;\n      }\n      default: {\n        this.dialogRef.removePanelClass('fullscreen-dialog');\n        break;\n      }\n    }\n\n    if (!this.padding) {\n      this.dialogRef.addPanelClass('no-padding-dialog');\n    }\n  }\n\n  /**\n   * Check if resize event is valid\n   *\n   * @param event resize event\n   * @returns boolean\n   */\n  validate(event: ResizeEvent): boolean {\n    if (event.rectangle.width && event.rectangle.width < 600) {\n      return false;\n    }\n    return true;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  max-width: 100% !important;\n  max-height: 90vh;\n  @apply h-full rounded-lg bg-white text-left shadow-xl transition-all sm:w-full sm:max-w-lg flex flex-col relative;\n}\n",
                    "styleUrl": "./dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Constructor for the dialog modal component</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "DialogRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "rawdescription": "\n\nConstructor for the dialog modal component\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1018,
                            "end": 1027,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "dialogRef"
                        },
                        "type": "DialogRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1012,
                            "end": 1017,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Used to access the dialog properties</p>\n"
                    }
                ]
            },
            "implements": [
                "OnChanges",
                "OnInit"
            ],
            "templateData": "<ui-button\n  class=\"absolute z-[1002] right-1.5 top-1.5\"\n  [isIcon]=\"true\"\n  icon=\"close\"\n  [variant]=\"'danger'\"\n  [uiTooltip]=\"'common.close' | translate\"\n  (click)=\"onClose()\"\n>\n</ui-button>\n\n<div\n  class=\"flex flex-col h-full overflow-hidden py-4 sm:py-6\"\n  mwlResizable\n  (resizing)=\"onResizing($event)\"\n  [validateResize]=\"validate\"\n>\n  <div\n    *ngIf=\"resizable\"\n    class=\"cursor-col-resize absolute h-full left-0 w-1.5\"\n    mwlResizeHandle\n    [resizeEdges]=\"{ left: true }\"\n  ></div>\n  <div\n    *ngIf=\"resizable\"\n    class=\"cursor-col-resize absolute h-full right-0 w-1.5\"\n    mwlResizeHandle\n    [resizeEdges]=\"{ right: true }\"\n  ></div>\n  <!-- Dialog header -->\n  <div class=\"empty:hidden px-4 sm:px-6\">\n    <ng-content select=\"header\"></ng-content>\n  </div>\n  <!-- Dialog content -->\n  <div class=\"flex-1 overflow-auto px-4 sm:px-6\">\n    <ng-content select=\"content\"></ng-content>\n  </div>\n  <!-- Dialog footer -->\n  <div\n    class=\"px-4 sm:px-6 py-2 flex flex-wrap min-h-[52px] items-center box-content -mb-4 justify-end gap-2 empty:hidden\"\n  >\n    <ng-content select=\"actions\"></ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "DividerComponent",
            "id": "component-DividerComponent-a5b896aed5aadfff95e1e4956d733b25635f2a2e9559a9e38e48c17098df5b6a7ca227d2f8137d0a5ac40c444965950d97e65f42abe33359e270ec1e09b8e43f",
            "file": "libs/ui/src/lib/divider/divider.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-divider",
            "styleUrls": [
                "./divider.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./divider.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "orientation",
                    "defaultValue": "'horizontal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe orientation of the divider.",
                    "description": "<p>The orientation of the divider.</p>\n",
                    "line": 17,
                    "type": "DividerOrientation",
                    "decorators": []
                },
                {
                    "name": "position",
                    "defaultValue": "'center'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe position of the text on the divider.",
                    "description": "<p>The position of the text on the divider.</p>\n",
                    "line": 21,
                    "type": "DividerPosition",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe text to display on the divider.",
                    "description": "<p>The text to display on the divider.</p>\n",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>UI Divider component\nDivider is a UI component that separates content.\nIt can be used to separate content vertically or horizontally.</p>\n",
            "rawdescription": "\n\nUI Divider component\nDivider is a UI component that separates content.\nIt can be used to separate content vertically or horizontally.\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { DividerOrientation } from './types/divider-orientation';\nimport { DividerPosition } from './types/divider-position';\n\n/**\n * UI Divider component\n * Divider is a UI component that separates content.\n * It can be used to separate content vertically or horizontally.\n */\n@Component({\n  selector: 'ui-divider',\n  templateUrl: './divider.component.html',\n  styleUrls: ['./divider.component.scss'],\n})\nexport class DividerComponent {\n  /** The orientation of the divider. */\n  @Input() orientation: DividerOrientation = 'horizontal';\n  /** The text to display on the divider. */\n  @Input() text!: string;\n  /** The position of the text on the divider. */\n  @Input() position: DividerPosition = 'center';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n}\n\n.divider-container {\n  @apply flex justify-center;\n}\n\n.orientation-horizontal {\n  @apply relative w-full;\n}\n\n.orientation-vertical {\n  @apply absolute w-px h-full border-l border-[#E5E7EB];\n}\n\n.horizontal {\n  @apply absolute;\n}\n\n.vertical {\n  @apply relative;\n}\n\n// Horizontal divider: position change texts positions\n.position-center {\n  @apply justify-center relative;\n}\n\n.position-left {\n  @apply justify-start relative;\n}\n\n.position-right {\n  @apply justify-end relative;\n}\n\n// Vertical divider: position change divider locations, text always in the center\n.vertical-center {\n  @apply left-1/2 -translate-x-1/2 top-1/2 absolute;\n}\n\n.vertical-right {\n  @apply justify-end;\n}\n\n.vertical-left {\n  @apply justify-start;\n}\n",
                    "styleUrl": "./divider.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div\n  class=\"divider-container\"\n  [ngClass]=\"{\n    'items-center': orientation === 'horizontal',\n    'vertical-right': position === 'right',\n    'vertical-left': position === 'left'\n  }\"\n>\n  <div\n    [ngClass]=\"{\n      'orientation-horizontal': orientation === 'horizontal',\n      'orientation-vertical': orientation === 'vertical'\n    }\"\n  >\n    <!-- DIVIDER -->\n    <div\n      class=\"inset-0 flex items-center\"\n      aria-hidden=\"true\"\n      [ngClass]=\"{\n        horizontal: orientation === 'horizontal',\n        vertical: orientation === 'vertical'\n      }\"\n    >\n      <div\n        class=\"border-t border-gray-300\"\n        [ngClass]=\"{\n          'w-full': orientation === 'horizontal',\n          'h-full': orientation === 'vertical'\n        }\"\n      ></div>\n    </div>\n    <!-- TEXT -->\n    <div\n      class=\"flex whitespace-nowrap\"\n      [ngClass]=\"{\n        'position-center': position === 'center' && orientation !== 'vertical',\n        'position-left': position === 'left' && orientation !== 'vertical',\n        'position-right': position === 'right' && orientation !== 'vertical',\n        'vertical-center': orientation === 'vertical'\n      }\"\n    >\n      <span *ngIf=\"text\" class=\"bg-[#FAFAFA] px-2 text-sm text-gray-500\">\n        {{ text }}\n      </span>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "EditDialogComponent",
            "id": "component-EditDialogComponent-d8f1590c6bf31308c660c9a0f003fd4998f4521853225304d0a98ed6c57290a19723d52e190cb67eb3179b5de63f8a8d423f9126db7934e2a96d71b40fa7d2b0",
            "file": "libs/ui/src/lib/dialog/dialog.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-edit-dialog",
            "styleUrls": [],
            "styles": [],
            "template": "<ui-dialog [size]=\"data.size\">\n  <ng-container ngProjectAs=\"header\">\n    <div\n      class=\"mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-green-100\"\n    >\n      <svg\n        class=\"h-6 w-6 text-green-600\"\n        fill=\"none\"\n        viewBox=\"0 0 24 24\"\n        stroke-width=\"1.5\"\n        stroke=\"currentColor\"\n        aria-hidden=\"true\"\n      >\n        <path\n          stroke-linecap=\"round\"\n          stroke-linejoin=\"round\"\n          d=\"M4.5 12.75l6 6 9-13.5\"\n        />\n      </svg>\n    </div>\n  </ng-container>\n  <ng-container ngProjectAs=\"content\">\n    <div class=\"flex flex-col h-full\">\n      <div class=\"my-auto text-center\">\n        <h3\n          class=\"text-base font-semibold leading-6 text-gray-900\"\n          id=\"modal-title\"\n        >\n          Payment successful\n        </h3>\n        <div class=\"mt-2\">\n          <p class=\"text-sm text-gray-500\">\n            Lorem ipsum dolor sit amet consectetur adipisicing elit.\n            Consequatur amet labore.\n          </p>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n  <ng-container ngProjectAs=\"actions\">\n    <br />\n    <button\n      type=\"button\"\n      class=\"inline-flex w-full justify-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n      [uiDialogClose]=\"data.animal\"\n    >\n      Go back\n    </button>\n  </ng-container>\n</ui-dialog>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "Injected dialog data",
                    "line": 133,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        167,
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogRef<EditDialogComponent>",
                    "optional": false,
                    "description": "Dialog ref",
                    "line": 131,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "DialogModule",
                    "type": "module"
                }
            ],
            "description": "<p>EditDialog component.</p>\n",
            "rawdescription": "\n\nEditDialog component.\n",
            "type": "component",
            "sourceCode": "import { moduleMetadata, Story, Meta } from '@storybook/angular';\nimport { Dialog, DIALOG_DATA } from '@angular/cdk/dialog';\nimport { DialogModule } from './dialog.module';\nimport { CommonModule } from '@angular/common';\nimport { Component, Input, Inject, OnDestroy } from '@angular/core';\nimport { DialogRef } from '@angular/cdk/dialog';\nimport { Subject, takeUntil } from 'rxjs';\nimport { DialogSize, dialogSizes } from './types/dialog-size';\n\n/**\n * LaunchDialog component.\n */\n@Component({\n  selector: 'ui-dialog-launcher',\n  template: `\n    <button\n      type=\"button\"\n      class=\"rounded-md bg-indigo-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n      (click)=\"openDialog()\"\n    >\n      Open dialog\n    </button>\n  `,\n})\nclass LaunchDialogComponent implements OnDestroy {\n  /** Animal name */\n  @Input() animal = '';\n  /** Dialog size */\n  @Input() size: DialogSize = 'medium';\n  /** Destroy subject */\n  private destroy$ = new Subject<void>();\n\n  /**\n   * Constructor for the launchDialog component\n   *\n   * @param _dialog Dialog service\n   */\n  constructor(private _dialog: Dialog) {}\n\n  /**\n   * open Dialog.\n   */\n  openDialog(): void {\n    const dialogRef: any = this._dialog.open(EditDialogComponent, {\n      data: {\n        animal: this.animal,\n        size: this.size,\n      },\n    });\n    dialogRef.closed.pipe(takeUntil(this.destroy$)).subscribe((result: any) => {\n      console.log(`Dialog result: ${result}`);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n\n/**\n * EditDialog component.\n */\n@Component({\n  standalone: true,\n  imports: [CommonModule, DialogModule],\n  selector: 'ui-edit-dialog',\n  template: `\n    <ui-dialog [size]=\"data.size\">\n      <ng-container ngProjectAs=\"header\">\n        <div\n          class=\"mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-green-100\"\n        >\n          <svg\n            class=\"h-6 w-6 text-green-600\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke-width=\"1.5\"\n            stroke=\"currentColor\"\n            aria-hidden=\"true\"\n          >\n            <path\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              d=\"M4.5 12.75l6 6 9-13.5\"\n            />\n          </svg>\n        </div>\n      </ng-container>\n      <ng-container ngProjectAs=\"content\">\n        <div class=\"flex flex-col h-full\">\n          <div class=\"my-auto text-center\">\n            <h3\n              class=\"text-base font-semibold leading-6 text-gray-900\"\n              id=\"modal-title\"\n            >\n              Payment successful\n            </h3>\n            <div class=\"mt-2\">\n              <p class=\"text-sm text-gray-500\">\n                Lorem ipsum dolor sit amet consectetur adipisicing elit.\n                Consequatur amet labore.\n              </p>\n            </div>\n          </div>\n        </div>\n      </ng-container>\n      <ng-container ngProjectAs=\"actions\">\n        <br />\n        <button\n          type=\"button\"\n          class=\"inline-flex w-full justify-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n          [uiDialogClose]=\"data.animal\"\n        >\n          Go back\n        </button>\n      </ng-container>\n    </ui-dialog>\n  `,\n})\nclass EditDialogComponent {\n  /**\n   * Edit Dialog component\n   *\n   * @param dialogRef Dialog ref\n   * @param data Injected dialog data\n   * @param data.animal animal data\n   * @param data.size size data\n   */\n  constructor(\n    public dialogRef: DialogRef<EditDialogComponent>,\n    @Inject(DIALOG_DATA)\n    public data: {\n      animal: string;\n      size: DialogSize;\n    }\n  ) {}\n}\n\nexport default {\n  title: 'Components/Dialog',\n  tags: ['autodocs'],\n  component: LaunchDialogComponent,\n  decorators: [\n    moduleMetadata({\n      declarations: [LaunchDialogComponent],\n      imports: [CommonModule, DialogModule],\n    }),\n  ],\n  argTypes: {\n    size: {\n      options: dialogSizes,\n      control: {\n        type: 'select',\n      },\n    },\n  },\n} as Meta;\n\n/**\n * Template launchDialog\n *\n * @param {LaunchDialogComponent} args args\n * @returns LaunchDialogComponent\n */\nconst Template: Story<LaunchDialogComponent> = (\n  args: LaunchDialogComponent\n) => ({\n  props: args,\n});\n\n/** Primary launchDialog */\nexport const Default = Template.bind({});\nDefault.args = {\n  animal: 'panda',\n  size: 'small',\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Edit Dialog component</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "DialogRef<EditDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 121,
                "rawdescription": "\n\nEdit Dialog component\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 3613,
                            "end": 3622,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "dialogRef"
                        },
                        "type": "DialogRef<EditDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3607,
                            "end": 3612,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Dialog ref</p>\n"
                    },
                    {
                        "name": {
                            "pos": 3646,
                            "end": 3650,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "data"
                        },
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3640,
                            "end": 3645,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Injected dialog data</p>\n"
                    }
                ]
            }
        },
        {
            "name": "ExpansionPanelComponent",
            "id": "component-ExpansionPanelComponent-d1d5be708b61968094e1c5ef28260868dd9a448429eac3eee0facec91521ac951a38c365409e4963c30e599a645b3cc93ad2333d8a7a6f5ba968a3fe727da78f",
            "file": "libs/ui/src/lib/expansion-panel/expansion-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-expansion-panel",
            "styleUrls": [
                "./expansion-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./expansion-panel.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nBoolean indicating whether the component is disabled.",
                    "description": "<p>Boolean indicating whether the component is disabled.</p>\n",
                    "line": 52,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "displayIcon",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nBoolean indicating whether to display an icon.",
                    "description": "<p>Boolean indicating whether to display an icon.</p>\n",
                    "line": 50,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "expanded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nBoolean indicating whether the panel is expanded.",
                    "description": "<p>Boolean indicating whether the panel is expanded.</p>\n",
                    "line": 54,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "index",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe index of the panel.",
                    "description": "<p>The index of the panel.</p>\n",
                    "line": 56,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "closePanel",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEvent emitter for closing the panel.",
                    "description": "<p>Event emitter for closing the panel.</p>\n",
                    "line": 58,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "accordionItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CdkAccordionItem",
                    "optional": false,
                    "description": "<p>Reference to the accordion item.</p>\n",
                    "line": 60,
                    "rawdescription": "\nReference to the accordion item.",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'accordionItem'"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "contentContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "<p>Reference to the content container.</p>\n",
                    "line": 62,
                    "rawdescription": "\nReference to the content container.",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'contentContainer'"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "expansionCloseTimeoutListener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NodeJS.Timeout",
                    "optional": false,
                    "description": "<p>Timeout listener for closing the panel.</p>\n",
                    "line": 64,
                    "rawdescription": "\nTimeout listener for closing the panel.",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClosed",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFunction detects on close and emit\n",
                    "description": "<p>Function detects on close and emit</p>\n"
                },
                {
                    "name": "onOpened",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFunction detects on open\nMethod added in order to keep the animation on expansion panel closed as well\n",
                    "description": "<p>Function detects on open\nMethod added in order to keep the animation on expansion panel closed as well</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>UI Expansion Panel Component\nExpansion Panel is a UI component that allows the user to expand and collapse content.</p>\n",
            "rawdescription": "\n\nUI Expansion Panel Component\nExpansion Panel is a UI component that allows the user to expand and collapse content.\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  AfterViewInit,\n  ViewChild,\n  Renderer2,\n  ElementRef,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\nimport { CdkAccordionItem } from '@angular/cdk/accordion';\n\n/**\n * UI Expansion Panel Component\n * Expansion Panel is a UI component that allows the user to expand and collapse content.\n */\n@Component({\n  selector: 'ui-expansion-panel',\n  templateUrl: './expansion-panel.component.html',\n  styleUrls: ['./expansion-panel.component.scss'],\n  animations: [\n    trigger('contentExpansion', [\n      state('expanded', style({ height: '*', opacity: 1 })),\n      state('collapsed', style({ height: '0px', opacity: 0 })),\n      transition(\n        'expanded <=> collapsed',\n        animate('300ms cubic-bezier(.37,1.04,.68,.98)')\n      ),\n    ]),\n    trigger('iconChange', [\n      state('up', style({ transform: 'rotate(0deg)' })),\n      state('down', style({ transform: 'rotate(180deg)' })),\n      transition(\n        'up <=> down',\n        animate('300ms cubic-bezier(.37,1.04,.68,.98)')\n      ),\n    ]),\n  ],\n})\nexport class ExpansionPanelComponent implements AfterViewInit, OnDestroy {\n  /** Boolean indicating whether to display an icon. */\n  @Input() displayIcon = true;\n  /** Boolean indicating whether the component is disabled. */\n  @Input() disabled = false;\n  /** Boolean indicating whether the panel is expanded. */\n  @Input() expanded = false;\n  /** The index of the panel. */\n  @Input() index = 0;\n  /** Event emitter for closing the panel. */\n  @Output() closePanel = new EventEmitter<boolean>();\n  /** Reference to the accordion item. */\n  @ViewChild('accordionItem') accordionItem!: CdkAccordionItem;\n  /** Reference to the content container. */\n  @ViewChild('contentContainer') contentContainer!: ElementRef;\n  /** Timeout listener for closing the panel. */\n  private expansionCloseTimeoutListener!: NodeJS.Timeout;\n\n  /**\n   * UI Panel Expansion constructor\n   *\n   * @param renderer Renderer2\n   */\n  constructor(private renderer: Renderer2) {}\n\n  ngAfterViewInit(): void {\n    if (this.expanded) {\n      this.accordionItem.toggle();\n    }\n  }\n\n  /**\n   * Function detects on close and emit\n   */\n  onClosed() {\n    if (this.expansionCloseTimeoutListener) {\n      clearTimeout(this.expansionCloseTimeoutListener);\n    }\n    this.expansionCloseTimeoutListener = setTimeout(() => {\n      this.renderer.addClass(this.contentContainer.nativeElement, 'hidden');\n    }, 100);\n    this.closePanel.emit(true);\n  }\n\n  /**\n   * Function detects on open\n   * Method added in order to keep the animation on expansion panel closed as well\n   */\n  onOpened() {\n    this.renderer.removeClass(this.contentContainer.nativeElement, 'hidden');\n    this.renderer.addClass(this.contentContainer.nativeElement, 'block');\n  }\n\n  ngOnDestroy(): void {\n    if (this.expansionCloseTimeoutListener) {\n      clearTimeout(this.expansionCloseTimeoutListener);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "div.accordion-item {\n  @apply flex items-center w-full p-5 font-medium text-left text-gray-500 border border-gray-200;\n}\n\ndiv.accordion-content {\n  @apply p-5 border-l border-r border-b border-gray-200 overflow-hidden;\n}\n",
                    "styleUrl": "./expansion-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>UI Panel Expansion constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 64,
                "rawdescription": "\n\nUI Panel Expansion constructor\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 2030,
                            "end": 2038,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2024,
                            "end": 2029,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Renderer2</p>\n"
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<cdk-accordion-item\n  #accordionItem=\"cdkAccordionItem\"\n  [ngClass]=\"{ 'cursor-default opacity-50': disabled }\"\n  role=\"button\"\n  [attr.aria-expanded]=\"accordionItem.expanded\"\n  [disabled]=\"disabled\"\n  [attr.id]=\"'accordion-header-' + index\"\n  [attr.aria-controls]=\"'accordion-body-' + index\"\n  (closed)=\"onClosed()\"\n  (opened)=\"onOpened()\"\n>\n  <div\n    [ngClass]=\"{\n      'focus:ring-4 focus:ring-gray-200 hover:bg-gray-100': !disabled,\n      'rounded-t-xl': !index,\n      'border-t-0': index\n    }\"\n    class=\"accordion-item justify-between\"\n    (click)=\"accordionItem.toggle()\"\n  >\n    <span class=\"flex\">\n      <ng-content select=\"title\"></ng-content>\n    </span>\n    <ng-container *ngIf=\"displayIcon\">\n      <svg\n        data-accordion-icon\n        class=\"w-6 rounded-md h-6 shrink-0\"\n        fill=\"currentColor\"\n        viewBox=\"0 0 20 20\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        [@iconChange]=\"accordionItem.expanded ? 'down' : 'up'\"\n      >\n        <path\n          fill-rule=\"evenodd\"\n          d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"\n          clip-rule=\"evenodd\"\n        ></path>\n      </svg>\n    </ng-container>\n  </div>\n  <div\n    #contentContainer\n    [@contentExpansion]=\"accordionItem.expanded ? 'expanded' : 'collapsed'\"\n    class=\"accordion-content hidden\"\n    role=\"region\"\n    [attr.id]=\"'accordion-body-' + index\"\n    [attr.aria-labelledby]=\"'accordion-header-' + index\"\n  >\n    <ng-content></ng-content>\n  </div>\n</cdk-accordion-item>\n"
        },
        {
            "name": "FixedWrapperComponent",
            "id": "component-FixedWrapperComponent-154be826d3da075e8f620bca95d832b25f7dcf7eb2311054b7e2143d1d8a47c2c547212f9e8c1169db1764a30ceaf6a0fbce945464cbe643c4462c2efacf2874",
            "file": "libs/ui/src/lib/fixed-wrapper/fixed-wrapper.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-fixed-wrapper",
            "styleUrls": [
                "./fixed-wrapper.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./fixed-wrapper.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fixedWrapperActions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": true,
                    "description": "<p>Reference to fixed wrapper template</p>\n",
                    "line": 21,
                    "rawdescription": "\nReference to fixed wrapper template",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'fixedWrapperActions', {read: undefined}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Fixed wrapper for bottoms floating div.</p>\n",
            "rawdescription": "\n\nFixed wrapper for bottoms floating div.\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  OnDestroy,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { UILayoutService } from '../sidenav/layout/layout.service';\n\n/**\n * Fixed wrapper for bottoms floating div.\n */\n@Component({\n  selector: 'ui-fixed-wrapper',\n  templateUrl: './fixed-wrapper.component.html',\n  styleUrls: ['./fixed-wrapper.component.scss'],\n})\nexport class FixedWrapperComponent implements AfterViewInit, OnDestroy {\n  /** Reference to fixed wrapper template */\n  @ViewChild('fixedWrapperActions', { read: TemplateRef<any> })\n  fixedWrapperActions?: TemplateRef<any>;\n\n  /**\n   * Fixed wrapper for bottoms floating div.\n   *\n   * @param layoutService Layout service that handles view injection of the fixed wrapper component\n   */\n  constructor(private layoutService: UILayoutService) {}\n\n  ngAfterViewInit(): void {\n    this.layoutService.setFixedWrapperActions(this.fixedWrapperActions ?? null);\n  }\n\n  ngOnDestroy(): void {\n    this.layoutService.setFixedWrapperActions(null);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./fixed-wrapper.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Fixed wrapper for bottoms floating div.</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "layoutService",
                        "type": "UILayoutService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "rawdescription": "\n\nFixed wrapper for bottoms floating div.\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 663,
                            "end": 676,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "layoutService"
                        },
                        "type": "UILayoutService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 657,
                            "end": 662,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Layout service that handles view injection of the fixed wrapper component</p>\n"
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<ng-template #fixedWrapperActions>\n  <div\n    class=\"z-[1] sticky bottom-0 right-0 py-2 px-4 bg-white w-full shadow-lg transition-shadow duration-300 shadow-slate-700 border-t border-gray-300\"\n  >\n    <div class=\"flex w-full justify-end\">\n      <!-- Inject actions -->\n      <ng-content></ng-content>\n    </div>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "FormControlComponent",
            "id": "component-FormControlComponent-4cd6853e875e29d4ac6c3e9e2dc8315785f8141268a7660274e8bceecc8ab924a195ebcc3373bcd6e4dea3c98343fca7855a61f64547c1ca0459d43647961ecc",
            "file": "libs/ui/src/lib/form-wrapper/form-control/form-control.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-form-control",
            "styleUrls": [
                "./form-control.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-control.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Form Control component.\nUsed in order to inject components as generic form control inside form wrapper directive.</p>\n",
            "rawdescription": "\n\nForm Control component.\nUsed in order to inject components as generic form control inside form wrapper directive.\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n/**\n * Form Control component.\n * Used in order to inject components as generic form control inside form wrapper directive.\n */\n@Component({\n  selector: 'ui-form-control',\n  templateUrl: './form-control.component.html',\n  styleUrls: ['./form-control.component.scss'],\n})\nexport class FormControlComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./form-control.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<p>form-control works!</p>\n"
        },
        {
            "name": "GraphQLSelectComponent",
            "id": "component-GraphQLSelectComponent-63543da184de484efd33a42bb71b205023cebfb4de8a28c14d6598a146dc109e314711ba6bed875bf210552cdab783d57b3144fd7f6e016948d2379cff48efe5",
            "file": "libs/ui/src/lib/graphql-select/graphql-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-graphql-select",
            "styleUrls": [
                "./graphql-select.component.scss"
            ],
            "styles": [],
            "template": "<div></div>",
            "templateUrl": [
                "./graphql-select.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "aria-describedby",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n Input decorator for aria-label\n",
                    "description": "<p> Input decorator for aria-label</p>\n",
                    "line": 72,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 3048,
                            "end": 3090,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 345,
                            "tagName": {
                                "pos": 3049,
                                "end": 3056,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>whether the field is disabled</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIndicates whether the field is disabled\n\n",
                    "description": "<p>Indicates whether the field is disabled</p>\n",
                    "line": 116,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "filterable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether the select is filterable or not",
                    "description": "<p>Whether the select is filterable or not</p>\n",
                    "line": 65,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSurveyQuestion",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether it is a survey question or not",
                    "description": "<p>Whether it is a survey question or not</p>\n",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "multiselect",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether you can select multiple items or not",
                    "description": "<p>Whether you can select multiple items or not</p>\n",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "path",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nInput decorator for path",
                    "description": "<p>Input decorator for path</p>\n",
                    "line": 57,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nPlaceholder text for the select",
                    "description": "<p>Placeholder text for the select</p>\n",
                    "line": 67,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "query",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nQuery reference for getting the available contents",
                    "description": "<p>Query reference for getting the available contents</p>\n",
                    "line": 74,
                    "type": "QueryRef<any>",
                    "decorators": []
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2720,
                            "end": 2762,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 345,
                            "tagName": {
                                "pos": 2721,
                                "end": 2728,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>whether the field is required</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIndicates whether the field is required\n\n",
                    "description": "<p>Indicates whether the field is required</p>\n",
                    "line": 98,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "selectedElements",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAdd type to selectedElements",
                    "description": "<p>Add type to selectedElements</p>\n",
                    "line": 63,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "textField",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nInput decorator for textField",
                    "description": "<p>Input decorator for textField</p>\n",
                    "line": 55,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2380,
                            "end": 2402,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 345,
                            "tagName": {
                                "pos": 2381,
                                "end": 2388,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>the value</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nGets the value\n\n",
                    "description": "<p>Gets the value</p>\n",
                    "line": 81,
                    "type": "string | string[] | null",
                    "decorators": []
                },
                {
                    "name": "valueField",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nInput decorator for valueField",
                    "description": "<p>Input decorator for valueField</p>\n",
                    "line": 53,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "searchChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEvent emitter for search change",
                    "description": "<p>Event emitter for search change</p>\n",
                    "line": 131,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectionChange",
                    "defaultValue": "new EventEmitter<string | string[] | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEvent emitter for selection change",
                    "description": "<p>Event emitter for selection change</p>\n",
                    "line": 129,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "cachedElements",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "<p>Cached elements</p>\n",
                    "line": 159,
                    "rawdescription": "\nCached elements",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "controlType",
                    "defaultValue": "'ui-graphql-select'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Control type</p>\n",
                    "line": 138,
                    "rawdescription": "\nControl type",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Destroy subject</p>\n",
                    "line": 151,
                    "rawdescription": "\nDestroy subject",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLElement>",
                    "optional": false,
                    "description": "shared element ref service",
                    "line": 226,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "elements",
                    "defaultValue": "new BehaviorSubject<any[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Elements</p>\n",
                    "line": 140,
                    "rawdescription": "\nElements",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "elements$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any[]>",
                    "optional": false,
                    "description": "<p>Elements observable</p>\n",
                    "line": 142,
                    "rawdescription": "\nElements observable",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "elementSelect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectMenuComponent",
                    "optional": false,
                    "description": "<p>Select menu component</p>\n",
                    "line": 171,
                    "rawdescription": "\nSelect menu component",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "SelectMenuComponent"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "focused",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Focused status</p>\n",
                    "line": 146,
                    "rawdescription": "\nFocused status",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "id",
                    "defaultValue": "`ui-graphql-select-${GraphQLSelectComponent.nextId++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Gets the id</p>\n",
                    "line": 191,
                    "rawdescription": "\n\nGets the id\n\n",
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "pos": 5249,
                            "end": 5268,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 345,
                            "tagName": {
                                "pos": 5250,
                                "end": 5257,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>the id</p>\n"
                        }
                    ]
                },
                {
                    "name": "isRequired",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Whether the field is required</p>\n",
                    "line": 166,
                    "rawdescription": "\nWhether the field is required",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Loading status</p>\n",
                    "line": 144,
                    "rawdescription": "\nLoading status",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "nextId",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Static variable for generating unique id</p>\n",
                    "line": 50,
                    "rawdescription": "\nStatic variable for generating unique id",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "ngControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "form control shared service,",
                    "line": 225,
                    "decorators": [
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        167,
                        167,
                        123
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Function shell for onChange</p>\n",
                    "line": 302,
                    "rawdescription": "\n\nFunction shell for onChange\n\n",
                    "jsdoctags": [
                        {
                            "pos": 8002,
                            "end": 8024,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 344,
                            "tagName": {
                                "pos": 8003,
                                "end": 8008,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>new value</p>\n",
                            "name": {
                                "pos": 8009,
                                "end": 8010,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "_"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Function shell for onTouched</p>\n",
                    "line": 295,
                    "rawdescription": "\n\nFunction shell for onTouched\n"
                },
                {
                    "name": "pageInfo",
                    "defaultValue": "{\n    endCursor: '',\n    hasNextPage: true,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "<p>Page info</p>\n",
                    "line": 161,
                    "rawdescription": "\nPage info",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "queryChange$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Query change subject</p>\n",
                    "line": 155,
                    "rawdescription": "\nQuery change subject",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "queryElements",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "<p>Query elements</p>\n",
                    "line": 157,
                    "rawdescription": "\nQuery elements",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "queryName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Query name</p>\n",
                    "line": 153,
                    "rawdescription": "\nQuery name",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "scrollListener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Scroll listener</p>\n",
                    "line": 168,
                    "rawdescription": "\nScroll listener",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "searchControl",
                    "defaultValue": "new FormControl('', { nonNullable: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Form control for search</p>\n",
                    "line": 136,
                    "rawdescription": "\nForm control for search",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "searchInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": false,
                    "description": "<p>Search input element</p>\n",
                    "line": 173,
                    "rawdescription": "\nSearch input element",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'searchInput'"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "stateChanges",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Subject that emits when the state changes</p>\n",
                    "line": 134,
                    "rawdescription": "\nSubject that emits when the state changes",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Touched status</p>\n",
                    "line": 148,
                    "rawdescription": "\nTouched status",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getDisplayValue",
                    "args": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 559,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns the display value for the given element\n\n",
                    "description": "<p>Returns the display value for the given element</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 15412,
                                "end": 15419,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "element"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 15406,
                                "end": 15411,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the element to get the display value for</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 15467,
                                "end": 15474,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>the display value</p>\n"
                        }
                    ]
                },
                {
                    "name": "loadOnScroll",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 452,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFetches more resources on scroll.\n\n",
                    "description": "<p>Fetches more resources on scroll.</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 12082,
                                "end": 12083,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 12076,
                                "end": 12081,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>scroll event.</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 340,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 390,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 304,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCloseSelect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 501,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nTriggers on close of select",
                    "description": "<p>Triggers on close of select</p>\n"
                },
                {
                    "name": "onContainerClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 258,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles mouse click on container\n\n",
                    "description": "<p>Handles mouse click on container</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7126,
                                "end": 7131,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7120,
                                "end": 7125,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Mouse event</p>\n"
                        }
                    ]
                },
                {
                    "name": "onFocusIn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 402,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles focus on input\n",
                    "description": "<p>Handles focus on input</p>\n"
                },
                {
                    "name": "onFocusOut",
                    "args": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 414,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles lost focus on input\n\n",
                    "description": "<p>Handles lost focus on input</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 11200,
                                "end": 11205,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 11194,
                                "end": 11199,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The focus event</p>\n"
                        }
                    ]
                },
                {
                    "name": "onOpenSelect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 430,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds scroll listener to select and focuses on input.\n\n",
                    "description": "<p>Adds scroll listener to select and focuses on input.</p>\n"
                },
                {
                    "name": "onSelectionChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 492,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTriggers on selection change for select\n\n",
                    "description": "<p>Triggers on selection change for select</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 13329,
                                "end": 13334,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 13323,
                                "end": 13328,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the selection change event</p>\n"
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 278,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegisters new onChange function\n\n",
                    "description": "<p>Registers new onChange function</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7548,
                                "end": 7550,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "pos": 7542,
                                "end": 7547,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>onChange function</p>\n"
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 287,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegisters new onTouched function\n\n",
                    "description": "<p>Registers new onTouched function</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7714,
                                "end": 7716,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "pos": 7708,
                                "end": 7713,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>onTouched function</p>\n"
                        }
                    ]
                },
                {
                    "name": "setDescribedByIds",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 241,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets element ids that should be used for the aria-describedby attribute of your control\n\n",
                    "description": "<p>Sets element ids that should be used for the aria-describedby attribute of your control</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6748,
                                "end": 6751,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "ids"
                            },
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6742,
                                "end": 6747,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>id array</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateValues",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "loading",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 527,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate data value\n\n",
                    "description": "<p>Update data value</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 14297,
                                "end": 14301,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "data"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 14291,
                                "end": 14296,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>query response data</p>\n"
                        },
                        {
                            "name": {
                                "pos": 14334,
                                "end": 14341,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "loading"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 14328,
                                "end": 14333,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>loading status</p>\n"
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "val",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 269,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nControlValueAccessor set value\n\n",
                    "description": "<p>ControlValueAccessor set value</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7400,
                                "end": 7403,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "val"
                            },
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7394,
                                "end": 7399,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>new value</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.floating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 5043,
                            "end": 5108,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 345,
                            "tagName": {
                                "pos": 5044,
                                "end": 5051,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>whether the label should be in the floating position</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIndicates whether the label should be in the floating position\n\n",
                    "description": "<p>Indicates whether the label should be in the floating position</p>\n",
                    "line": 181,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "`ui-graphql-select-${GraphQLSelectComponent.nextId++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 5249,
                            "end": 5268,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 345,
                            "tagName": {
                                "pos": 5250,
                                "end": 5257,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>the id</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nGets the id\n\n",
                    "description": "<p>Gets the id</p>\n",
                    "line": 191,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Component for a dropdown with pagination.\nExtended by:</p>\n<ul>\n<li>resource select</li>\n<li>reference data select</li>\n</ul>\n<p>BE AWARE: changes made on this component may affect extended ones!!!</p>\n",
            "rawdescription": "\n\nComponent for a dropdown with pagination.\nExtended by:\n- resource select\n- reference data select\n\nBE AWARE: changes made on this component may affect extended ones!!!\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  Renderer2,\n  Self,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { QueryRef } from 'apollo-angular';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { get } from 'lodash';\nimport { NgControl, ControlValueAccessor, FormControl } from '@angular/forms';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\nimport { takeUntil } from 'rxjs/operators';\nimport { SelectMenuComponent } from '../select-menu/select-menu.component';\nimport { updateQueryUniqueValues } from './utils/update-queries';\nimport { ShadowDomService } from '../shadow-dom/shadow-dom.service';\n\n/** A constant that is used to determine how many items should be added on scroll. */\nconst ITEMS_PER_RELOAD = 10;\n\n/**\n * Component for a dropdown with pagination.\n * Extended by:\n * - resource select\n * - reference data select\n *\n * BE AWARE: changes made on this component may affect extended ones!!!\n */\n@Component({\n  selector: 'ui-graphql-select',\n  templateUrl: './graphql-select.component.html',\n  styleUrls: ['./graphql-select.component.scss'],\n  template: '<div></div>',\n})\nexport class GraphQLSelectComponent\n  implements OnInit, OnChanges, OnDestroy, ControlValueAccessor\n{\n  /** Static variable for generating unique id */\n  static nextId = 0;\n\n  /** Input decorator for valueField */\n  @Input() valueField = '';\n  /** Input decorator for textField */\n  @Input() textField = '';\n  /** Input decorator for path */\n  @Input() path = '';\n  /** Whether you can select multiple items or not */\n  @Input() multiselect = false;\n  /** Whether it is a survey question or not */\n  @Input() isSurveyQuestion = false;\n  /** Add type to selectedElements */\n  @Input() selectedElements: any[] = [];\n  /** Whether the select is filterable or not */\n  @Input() filterable = false;\n  /** Placeholder text for the select */\n  @Input() placeholder = '';\n  /**\n   *  Input decorator for aria-label\n   */\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input('aria-describedby') userAriaDescribedBy!: string;\n  /** Query reference for getting the available contents */\n  @Input() query!: QueryRef<any>;\n\n  /**\n   * Gets the value\n   *\n   * @returns the value\n   */\n  @Input() get value(): string | string[] | null {\n    return this.ngControl?.value;\n  }\n\n  /** Sets the value */\n  set value(val: string | string[] | null) {\n    this.onChange(val);\n    this.stateChanges.next();\n    this.selectionChange.emit(val);\n  }\n\n  /**\n   * Indicates whether the field is required\n   *\n   * @returns whether the field is required\n   */\n  @Input()\n  get required() {\n    return this.isRequired;\n  }\n\n  /**\n   * Sets whether the field is required\n   */\n  set required(req) {\n    this.isRequired = coerceBooleanProperty(req);\n    this.stateChanges.next();\n  }\n\n  /**\n   * Indicates whether the field is disabled\n   *\n   * @returns whether the field is disabled\n   */\n  @Input()\n  get disabled(): boolean {\n    return this.ngControl?.disabled || false;\n  }\n\n  /** Sets whether the field is disabled */\n  set disabled(value: boolean) {\n    const isDisabled = coerceBooleanProperty(value);\n    if (isDisabled) this.ngControl?.control?.disable();\n    else this.ngControl?.control?.enable();\n    this.stateChanges.next();\n  }\n\n  /** Event emitter for selection change */\n  @Output() selectionChange = new EventEmitter<string | string[] | null>();\n  /** Event emitter for search change */\n  @Output() searchChange = new EventEmitter<string>();\n\n  /** Subject that emits when the state changes */\n  public stateChanges = new Subject<void>();\n  /** Form control for search */\n  public searchControl = new FormControl('', { nonNullable: true });\n  /** Control type */\n  public controlType = 'ui-graphql-select';\n  /** Elements */\n  public elements = new BehaviorSubject<any[]>([]);\n  /** Elements observable */\n  public elements$!: Observable<any[]>;\n  /** Loading status */\n  public loading = true;\n  /** Focused status */\n  public focused = false;\n  /** Touched status */\n  public touched = false;\n\n  /** Destroy subject */\n  public destroy$ = new Subject<void>();\n  /** Query name */\n  protected queryName!: string;\n  /** Query change subject */\n  protected queryChange$ = new Subject<void>();\n  /** Query elements */\n  private queryElements: any[] = [];\n  /** Cached elements */\n  private cachedElements: any[] = [];\n  /** Page info */\n  private pageInfo = {\n    endCursor: '',\n    hasNextPage: true,\n  };\n  /** Whether the field is required */\n  private isRequired = false;\n  /** Scroll listener */\n  private scrollListener!: any;\n\n  /** Select menu component */\n  @ViewChild(SelectMenuComponent) elementSelect!: SelectMenuComponent;\n  /** Search input element */\n  @ViewChild('searchInput') searchInput!: ElementRef<HTMLInputElement>;\n\n  /**\n   * Indicates whether the label should be in the floating position\n   *\n   * @returns whether the label should be in the floating position\n   */\n  @HostBinding('class.floating')\n  get shouldLabelFloat() {\n    return this.focused || !this.empty;\n  }\n\n  /**\n   * Gets the id\n   *\n   * @returns the id\n   */\n  @HostBinding()\n  id = `ui-graphql-select-${GraphQLSelectComponent.nextId++}`;\n\n  /**\n   * Gets the empty status\n   *\n   * @returns if an option is selected\n   */\n  get empty() {\n    // return !this.selected.value;\n    return !this.ngControl?.control?.value;\n  }\n\n  /**\n   * Indicates whether the input is in an error state\n   *\n   * @returns whether the input is in an error state\n   */\n  get errorState(): boolean {\n    return (this.ngControl?.invalid && this.touched) || false;\n    // return this.ngControl.invalid && this.touched;\n    // return this.selected.invalid && this.touched;\n  }\n\n  /**\n   * The constructor function is a special function that is called when a new instance of the class is\n   * created\n   *\n   * @param ngControl form control shared service,\n   * @param elementRef shared element ref service\n   * @param renderer - Angular - Renderer2\n   * @param changeDetectorRef - Angular - ChangeDetectorRef\n   * @param shadowDomService shadow dom service to handle the current host of the component\n   */\n  constructor(\n    @Optional() @Self() public ngControl: NgControl,\n    public elementRef: ElementRef<HTMLElement>,\n    protected renderer: Renderer2,\n    protected changeDetectorRef: ChangeDetectorRef,\n    protected shadowDomService: ShadowDomService\n  ) {\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  /**\n   * Sets element ids that should be used for the aria-describedby attribute of your control\n   *\n   * @param ids id array\n   */\n  setDescribedByIds(ids: string[]) {\n    const controlElement = this.elementRef.nativeElement.querySelector(\n      '.ui-graphql-select-container'\n    );\n    if (!controlElement) return;\n    this.renderer.setAttribute(\n      controlElement,\n      'aria-describedby',\n      ids.join(' ')\n    );\n  }\n\n  /**\n   * Handles mouse click on container\n   *\n   * @param event Mouse event\n   */\n  onContainerClick(event: MouseEvent) {\n    if ((event.target as Element).tagName.toLowerCase() !== 'input') {\n      this.elementRef.nativeElement.querySelector('input')?.focus();\n    }\n  }\n\n  /**\n   * ControlValueAccessor set value\n   *\n   * @param val new value\n   */\n  writeValue(val: string | null): void {\n    this.value = val;\n  }\n\n  /**\n   * Registers new onChange function\n   *\n   * @param fn onChange function\n   */\n  registerOnChange(fn: (_: any) => void): void {\n    this.onChange = fn;\n  }\n\n  /**\n   * Registers new onTouched function\n   *\n   * @param fn onTouched function\n   */\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Function shell for onTouched\n   */\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onTouched = () => {};\n  /**\n   * Function shell for onChange\n   *\n   * @param _ new value\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function\n  onChange = (_: any) => {};\n\n  ngOnInit(): void {\n    this.elements$ = this.elements.asObservable();\n    if (this.query) {\n      this.query.valueChanges\n        .pipe(takeUntil(this.queryChange$), takeUntil(this.destroy$))\n        .subscribe(({ data, loading }) => {\n          this.queryName = Object.keys(data)[0];\n          this.updateValues(data, loading);\n        });\n    }\n    this.ngControl?.valueChanges\n      ?.pipe(takeUntil(this.destroy$))\n      .subscribe((value) => {\n        const elements = this.elements.getValue();\n        if (Array.isArray(value)) {\n          this.selectedElements = [\n            ...elements.filter((element) => {\n              value.find((x) => x === element[this.valueField]);\n            }),\n          ];\n        } else {\n          this.selectedElements = [\n            elements.find((element) => value === element[this.valueField]),\n          ];\n        }\n        this.selectionChange.emit(value);\n      });\n    // this way we can wait for 0.5s before sending an update\n    this.searchControl.valueChanges\n      .pipe(debounceTime(500), distinctUntilChanged(), takeUntil(this.destroy$))\n      .subscribe((value) => {\n        this.cachedElements = [];\n        this.searchChange.emit(value);\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['query'] && changes['query'].previousValue) {\n      // Unsubscribe from the old query\n      this.queryChange$.next();\n\n      // Reset the loading and pageInfo states\n      this.loading = true;\n      this.pageInfo = {\n        endCursor: '',\n        hasNextPage: true,\n      };\n\n      // Clear the cached elements\n      this.cachedElements = [];\n\n      // Clear the selected elements\n      this.selectedElements = [];\n\n      // Clear the elements\n      this.elements.next([]);\n\n      // Clear the search control\n      this.searchControl.setValue('');\n\n      // Clear the form control\n      this.ngControl?.control?.setValue(null);\n\n      // Emit the selection change\n      this.selectionChange.emit(null);\n\n      // Subscribe to the new query\n      this.query.valueChanges\n        .pipe(takeUntil(this.queryChange$), takeUntil(this.destroy$))\n        .subscribe(({ data, loading }) => {\n          this.queryName = Object.keys(data)[0];\n          this.updateValues(data, loading);\n        });\n    } else {\n      const elements = this.elements.getValue();\n      const selectedElements = this.selectedElements.filter(\n        (selectedElement) =>\n          selectedElement &&\n          !elements.find(\n            (node) => node[this.valueField] === selectedElement[this.valueField]\n          )\n      );\n      this.elements.next([...selectedElements, ...elements]);\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.scrollListener) {\n      this.scrollListener();\n    }\n    this.destroy$.next();\n    this.destroy$.complete();\n    this.stateChanges.complete();\n  }\n\n  /**\n   * Handles focus on input\n   */\n  onFocusIn() {\n    if (!this.focused) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Handles lost focus on input\n   *\n   * @param event The focus event\n   */\n  onFocusOut(event: FocusEvent) {\n    if (\n      this.focused &&\n      !this.elementRef.nativeElement.contains(event.relatedTarget as Element)\n    ) {\n      this.touched = true;\n      this.focused = false;\n      this.onTouched();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Adds scroll listener to select and focuses on input.\n   *\n   */\n  onOpenSelect(): void {\n    // focus on search input, if filterable\n    if (this.filterable) this.searchInput?.nativeElement.focus();\n    const panel =\n      this.shadowDomService.currentHost.getElementById('optionList');\n    if (this.scrollListener) {\n      this.scrollListener();\n    }\n    this.scrollListener = this.renderer.listen(\n      panel,\n      'scroll',\n      (event: any) => {\n        this.loadOnScroll(event);\n      }\n    );\n  }\n\n  /**\n   * Fetches more resources on scroll.\n   *\n   * @param e scroll event.\n   */\n  private loadOnScroll(e: any): void {\n    if (\n      e.target.scrollHeight - (e.target.clientHeight + e.target.scrollTop) <\n      50\n    ) {\n      if (!this.loading && this.pageInfo?.hasNextPage) {\n        // Check if original query is using skip or afterCursor\n        const queryDefinition = this.query.options.query.definitions[0];\n        const isSkip =\n          queryDefinition?.kind === 'OperationDefinition' &&\n          !!queryDefinition.variableDefinitions?.find(\n            (x) => x.variable.name.value === 'skip'\n          );\n\n        this.loading = true;\n        this.query\n          .fetchMore({\n            variables: {\n              first: ITEMS_PER_RELOAD,\n              ...(isSkip\n                ? { skip: this.cachedElements.length }\n                : { afterCursor: this.pageInfo.endCursor }),\n            },\n          })\n          .then((results) => {\n            this.updateValues(results.data, results.loading);\n          });\n      }\n      // If it's used as a survey question, then change detector have to be manually triggered\n      if (this.isSurveyQuestion) {\n        this.changeDetectorRef.detectChanges();\n      }\n    }\n  }\n\n  /**\n   * Triggers on selection change for select\n   *\n   * @param event the selection change event\n   */\n  public onSelectionChange(event: any) {\n    this.value = event.value;\n    // If it's used as a survey question, then change detector have to be manually triggered\n    if (this.isSurveyQuestion) {\n      this.changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Triggers on close of select */\n  onCloseSelect() {\n    // filter out from the elements the ones that are\n    // not in the queryElements array or the selectedElements array\n    const elements = this.elements\n      .getValue()\n      .filter(\n        (element) =>\n          this.queryElements.find(\n            (queryElement) =>\n              queryElement[this.valueField] === element[this.valueField]\n          ) ||\n          this.selectedElements.find(\n            (selectedElement) =>\n              selectedElement[this.valueField] === element[this.valueField]\n          )\n      );\n\n    this.elements.next(elements);\n  }\n\n  /**\n   * Update data value\n   *\n   * @param data query response data\n   * @param loading loading status\n   */\n  protected updateValues(data: any, loading: boolean) {\n    const path = this.path ? `${this.queryName}.${this.path}` : this.queryName;\n    const elements: any[] = get(data, path).edges\n      ? get(data, path).edges.map((x: any) => x.node)\n      : get(data, path);\n    const selectedElements = this.selectedElements.filter(\n      (selectedElement) =>\n        selectedElement &&\n        !elements.find(\n          (node) => node[this.valueField] === selectedElement[this.valueField]\n        )\n    );\n    this.cachedElements = updateQueryUniqueValues(this.cachedElements, [\n      ...selectedElements,\n      ...elements,\n    ]);\n    this.elements.next(this.cachedElements);\n    this.queryElements = this.cachedElements;\n    this.pageInfo = get(data, path).pageInfo;\n    this.loading = loading;\n    // If it's used as a survey question, then change detector have to be manually triggered\n    if (this.isSurveyQuestion) {\n      this.changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Returns the display value for the given element\n   *\n   * @param element the element to get the display value for\n   * @returns the display value\n   */\n  public getDisplayValue(element: any) {\n    return get(element, this.textField);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./graphql-select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>The constructor function is a special function that is called when a new instance of the class is\ncreated</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "shadowDomService",
                        "type": "ShadowDomService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 212,
                "rawdescription": "\n\nThe constructor function is a special function that is called when a new instance of the class is\ncreated\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 6004,
                            "end": 6013,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "ngControl"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 5998,
                            "end": 6003,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>form control shared service,</p>\n"
                    },
                    {
                        "name": {
                            "pos": 6055,
                            "end": 6065,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "elementRef"
                        },
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 6049,
                            "end": 6054,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>shared element ref service</p>\n"
                    },
                    {
                        "name": {
                            "pos": 6105,
                            "end": 6113,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 6099,
                            "end": 6104,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<ul>\n<li>Angular - Renderer2</li>\n</ul>\n"
                    },
                    {
                        "name": {
                            "pos": 6148,
                            "end": 6165,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "changeDetectorRef"
                        },
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 6142,
                            "end": 6147,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<ul>\n<li>Angular - ChangeDetectorRef</li>\n</ul>\n"
                    },
                    {
                        "name": {
                            "pos": 6208,
                            "end": 6224,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "shadowDomService"
                        },
                        "type": "ShadowDomService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 6202,
                            "end": 6207,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>shadow dom service to handle the current host of the component</p>\n"
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges",
                "OnDestroy",
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "string | string[] | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 86,
                        "rawdescription": "\nSets the value",
                        "description": "<p>Sets the value</p>\n",
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "string | string[] | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "string | [] | null",
                        "line": 81,
                        "rawdescription": "\n\nGets the value\n\n",
                        "description": "<p>Gets the value</p>\n",
                        "jsdoctags": [
                            {
                                "pos": 2380,
                                "end": 2402,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 2381,
                                    "end": 2388,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>the value</p>\n"
                            }
                        ]
                    }
                },
                "required": {
                    "name": "required",
                    "setSignature": {
                        "name": "required",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "req",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 105,
                        "rawdescription": "\n\nSets whether the field is required\n",
                        "description": "<p>Sets whether the field is required</p>\n",
                        "jsdoctags": [
                            {
                                "name": "req",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "required",
                        "type": "",
                        "returnType": "",
                        "line": 98,
                        "rawdescription": "\n\nIndicates whether the field is required\n\n",
                        "description": "<p>Indicates whether the field is required</p>\n",
                        "jsdoctags": [
                            {
                                "pos": 2720,
                                "end": 2762,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 2721,
                                    "end": 2728,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>whether the field is required</p>\n"
                            }
                        ]
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 121,
                        "rawdescription": "\nSets whether the field is disabled",
                        "description": "<p>Sets whether the field is disabled</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 116,
                        "rawdescription": "\n\nIndicates whether the field is disabled\n\n",
                        "description": "<p>Indicates whether the field is disabled</p>\n",
                        "jsdoctags": [
                            {
                                "pos": 3048,
                                "end": 3090,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 3049,
                                    "end": 3056,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>whether the field is disabled</p>\n"
                            }
                        ]
                    }
                },
                "shouldLabelFloat": {
                    "name": "shouldLabelFloat",
                    "getSignature": {
                        "name": "shouldLabelFloat",
                        "type": "",
                        "returnType": "",
                        "line": 181,
                        "rawdescription": "\n\nIndicates whether the label should be in the floating position\n\n",
                        "description": "<p>Indicates whether the label should be in the floating position</p>\n",
                        "jsdoctags": [
                            {
                                "pos": 5043,
                                "end": 5108,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 5044,
                                    "end": 5051,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>whether the label should be in the floating position</p>\n"
                            }
                        ]
                    }
                },
                "empty": {
                    "name": "empty",
                    "getSignature": {
                        "name": "empty",
                        "type": "",
                        "returnType": "",
                        "line": 198,
                        "rawdescription": "\n\nGets the empty status\n\n",
                        "description": "<p>Gets the empty status</p>\n",
                        "jsdoctags": [
                            {
                                "pos": 5395,
                                "end": 5432,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 5396,
                                    "end": 5403,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>if an option is selected</p>\n"
                            }
                        ]
                    }
                },
                "errorState": {
                    "name": "errorState",
                    "getSignature": {
                        "name": "errorState",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 208,
                        "rawdescription": "\n\nIndicates whether the input is in an error state\n\n",
                        "description": "<p>Indicates whether the input is in an error state</p>\n",
                        "jsdoctags": [
                            {
                                "pos": 5606,
                                "end": 5657,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 5607,
                                    "end": 5614,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>whether the input is in an error state</p>\n"
                            }
                        ]
                    }
                }
            },
            "templateData": "<ui-select-menu\n  [formControl]=\"ngControl && $any(ngControl.control)\"\n  (opened)=\"onOpenSelect()\"\n  (closed)=\"onCloseSelect()\"\n  [required]=\"required\"\n  [isGraphQlSelect]=\"true\"\n  (focusin)=\"onFocusIn()\"\n  (focusout)=\"onFocusOut($event)\"\n  [placeholder]=\"placeholder\"\n  [multiselect]=\"multiselect\"\n  (selectedOption)=\"selectionChange.emit($event)\"\n>\n  <!-- Search -->\n  <ng-container *ngIf=\"filterable\">\n    <ng-container *ngTemplateOutlet=\"search\"></ng-container>\n  </ng-container>\n  <!-- Regular options -->\n  <ui-select-option\n    *ngFor=\"let element of elements$ | async\"\n    [value]=\"element[valueField]\"\n  >\n    {{ getDisplayValue(element) }}\n  </ui-select-option>\n</ui-select-menu>\n<!-- Search template -->\n<ng-template #search>\n  <div\n    class=\"w-full flex shadow-sm !sticky top-0 border-b-gray-300 !h-auto z-10 !bg-white !p-0\"\n  >\n    <input\n      class=\"bg-transparent block w-full px-3 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6 border-0\"\n      [formControl]=\"searchControl\"\n      [placeholder]=\"'common.placeholder.search' | translate\"\n      type=\"text\"\n      #searchInput\n    />\n    <ui-spinner\n      [size]=\"'medium'\"\n      *ngIf=\"loading\"\n      class=\"items-center\"\n    ></ui-spinner>\n    <ui-button\n      [isIcon]=\"true\"\n      icon=\"close\"\n      (click)=\"searchControl.setValue('')\"\n      [uiTooltip]=\"'common.close' | translate\"\n    ></ui-button>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-44fa494b7835a32d33632dfc06b2df3326a2dc19e8c817f48cb894067336b631f6875f440fa195994c9442650dc0e5a60a9d5eb925b291911c8a820d59f56d28",
            "file": "libs/ui/src/lib/icon/icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-icon",
            "styleUrls": [
                "./icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "category",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe category of the icon.",
                    "description": "<p>The category of the icon.</p>\n",
                    "line": 32,
                    "type": "Category",
                    "decorators": []
                },
                {
                    "name": "fontFamily",
                    "defaultValue": "'material'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nFont library",
                    "description": "<p>Font library</p>\n",
                    "line": 40,
                    "type": "\"material\" | \"fa\"",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe name of the icon.",
                    "description": "<p>The name of the icon.</p>\n",
                    "line": 30,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "isOutlined",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nBoolean indicating whether the icon is outlined.",
                    "description": "<p>Boolean indicating whether the icon is outlined.</p>\n",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "24",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe size of the icon.",
                    "description": "<p>The size of the icon.</p>\n",
                    "line": 36,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe variant or style of the icon.",
                    "description": "<p>The variant or style of the icon.</p>\n",
                    "line": 34,
                    "type": "Variant",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFASvgIcon",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nBuild up the FA svg icon and insert it in the current host element\n",
                    "description": "<p>Build up the FA svg icon and insert it in the current host element</p>\n",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>UI Icon Component\nDisplay an icon with a given category and variant.</p>\n",
            "rawdescription": "\n\nUI Icon Component\nDisplay an icon with a given category and variant.\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  Renderer2,\n  SimpleChanges,\n} from '@angular/core';\nimport { Variant } from '../types/variant';\nimport { Category } from '../types/category';\nimport { IconName, icon } from '@fortawesome/fontawesome-svg-core';\nimport {\n  FaIconName,\n  MatIconName,\n  faV4toV6Mapper,\n  getIconDefinition,\n} from './icon.list';\n\n/**\n * UI Icon Component\n * Display an icon with a given category and variant.\n */\n@Component({\n  selector: 'ui-icon',\n  templateUrl: './icon.component.html',\n  styleUrls: ['./icon.component.scss'],\n})\nexport class IconComponent implements OnChanges {\n  /** The name of the icon. */\n  @Input() icon: FaIconName & MatIconName = '';\n  /** The category of the icon. */\n  @Input() category: Category = 'primary';\n  /** The variant or style of the icon. */\n  @Input() variant: Variant = 'default';\n  /** The size of the icon. */\n  @Input() size = 24;\n  /** Boolean indicating whether the icon is outlined. */\n  @Input() isOutlined = false;\n  /** Font library */\n  @Input() fontFamily: 'material' | 'fa' = 'material';\n\n  /**\n   * Icon component that renders the given icon for each type of font, fontawesome or material\n   *\n   * @param el Current host element\n   * @param renderer Angular renderer2 in order to safely interact with the DOM to add fa svgs\n   */\n  constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n  /**\n   * Formats the size input adding a 'px' suffix\n   *\n   * @returns Returns a string with the size in px\n   */\n  get fontSize(): string {\n    return this.size + 'px';\n  }\n\n  /**\n   * Resolve icon class by given category and variant\n   *\n   * @returns Returns a string array with the current variant and category class\n   */\n  get iconVariantAndCategory(): string[] {\n    const classes = [];\n    if (this.fontFamily !== 'fa') {\n      if (this.isOutlined) {\n        classes.push(\n          ...['material-icons-outlined', 'material-symbols-outlined']\n        );\n      } else {\n        classes.push(...['material-icons']);\n      }\n    }\n    classes.push(\n      this.category === 'secondary' || this.variant === 'light'\n        ? 'icon-light'\n        : this.variant === 'primary'\n        ? 'icon-primary'\n        : this.variant === 'success'\n        ? 'icon-success'\n        : this.variant === 'grey'\n        ? 'icon-grey'\n        : this.variant === 'danger'\n        ? 'icon-danger'\n        : this.variant === 'warning'\n        ? 'icon-warning'\n        : ''\n    );\n    return classes;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['icon']?.currentValue != changes['icon']?.previousValue) {\n      this.setFASvgIcon();\n    }\n  }\n\n  /**\n   * Build up the FA svg icon and insert it in the current host element\n   */\n  private setFASvgIcon() {\n    if (this.fontFamily === 'fa' && this.icon) {\n      const iconDef = getIconDefinition(\n        (faV4toV6Mapper[this.icon] ?? this.icon) as IconName\n      );\n      const i = icon(iconDef, {\n        styles: {\n          height: this.fontSize,\n          width: this.fontSize,\n          'line-height': this.fontSize,\n          'font-size': this.fontSize,\n        },\n      });\n      const isPreviousIcon = this.el.nativeElement.querySelector('span');\n      if (isPreviousIcon) {\n        this.renderer.removeChild(this.el.nativeElement, isPreviousIcon);\n      }\n      const wrapper = this.renderer.createElement('span');\n      [...this.iconVariantAndCategory, 'inline-flex', 'align-middle']\n        .filter((classProp) => !!classProp)\n        .forEach((classProp) => {\n          this.renderer.addClass(wrapper, classProp);\n        });\n      this.renderer.appendChild(wrapper, i.node[0]);\n      if (wrapper) {\n        this.renderer.appendChild(this.el.nativeElement, wrapper);\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".icon-primary {\n  @apply text-primary-400;\n}\n.icon-danger {\n  @apply text-red-400;\n}\n.icon-success {\n  @apply text-green-400;\n}\n.icon-warning {\n  @apply text-yellow-400;\n}\n\n.icon-light {\n  @apply text-white;\n}\n\n.icon-grey {\n  @apply text-neutral-400;\n}\n\n.material-icons-outlined {\n  overflow: hidden;\n}\n",
                    "styleUrl": "./icon.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Icon component that renders the given icon for each type of font, fontawesome or material</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "rawdescription": "\n\nIcon component that renders the given icon for each type of font, fontawesome or material\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1201,
                            "end": 1203,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "el"
                        },
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1195,
                            "end": 1200,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Current host element</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1237,
                            "end": 1245,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1231,
                            "end": 1236,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Angular renderer2 in order to safely interact with the DOM to add fa svgs</p>\n"
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "fontSize": {
                    "name": "fontSize",
                    "getSignature": {
                        "name": "fontSize",
                        "type": "string",
                        "returnType": "string",
                        "line": 55,
                        "rawdescription": "\n\nFormats the size input adding a 'px' suffix\n\n",
                        "description": "<p>Formats the size input adding a &#39;px&#39; suffix</p>\n",
                        "jsdoctags": [
                            {
                                "pos": 1462,
                                "end": 1511,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 1463,
                                    "end": 1470,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>Returns a string with the size in px</p>\n"
                            }
                        ]
                    }
                },
                "iconVariantAndCategory": {
                    "name": "iconVariantAndCategory",
                    "getSignature": {
                        "name": "iconVariantAndCategory",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 64,
                        "rawdescription": "\n\nResolve icon class by given category and variant\n\n",
                        "description": "<p>Resolve icon class by given category and variant</p>\n",
                        "jsdoctags": [
                            {
                                "pos": 1645,
                                "end": 1724,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 1646,
                                    "end": 1653,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>Returns a string array with the current variant and category class</p>\n"
                            }
                        ]
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"fontFamily !== 'fa'\">\n  <i\n    [ngClass]=\"iconVariantAndCategory\"\n    [ngStyle]=\"{\n      height: fontSize,\n      width: fontSize,\n      'line-height': fontSize,\n      'font-size': fontSize\n    }\"\n    class=\"flex items-center\"\n  >\n    {{ icon }}\n  </i>\n</ng-container>\n<!-- \n  todo: check\n  class=\"inline-flex material-element align-middle\"\n -->\n"
        },
        {
            "name": "LaunchDialogComponent",
            "id": "component-LaunchDialogComponent-d8f1590c6bf31308c660c9a0f003fd4998f4521853225304d0a98ed6c57290a19723d52e190cb67eb3179b5de63f8a8d423f9126db7934e2a96d71b40fa7d2b0",
            "file": "libs/ui/src/lib/dialog/dialog.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-dialog-launcher",
            "styleUrls": [],
            "styles": [],
            "template": "<button\n  type=\"button\"\n  class=\"rounded-md bg-indigo-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n  (click)=\"openDialog()\"\n>\n  Open dialog\n</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "animal",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAnimal name",
                    "description": "<p>Animal name</p>\n",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDialog size",
                    "description": "<p>Dialog size</p>\n",
                    "line": 29,
                    "type": "DialogSize",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Destroy subject</p>\n",
                    "line": 31,
                    "rawdescription": "\nDestroy subject",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nopen Dialog.\n",
                    "description": "<p>open Dialog.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>LaunchDialog component.</p>\n",
            "rawdescription": "\n\nLaunchDialog component.\n",
            "type": "component",
            "sourceCode": "import { moduleMetadata, Story, Meta } from '@storybook/angular';\nimport { Dialog, DIALOG_DATA } from '@angular/cdk/dialog';\nimport { DialogModule } from './dialog.module';\nimport { CommonModule } from '@angular/common';\nimport { Component, Input, Inject, OnDestroy } from '@angular/core';\nimport { DialogRef } from '@angular/cdk/dialog';\nimport { Subject, takeUntil } from 'rxjs';\nimport { DialogSize, dialogSizes } from './types/dialog-size';\n\n/**\n * LaunchDialog component.\n */\n@Component({\n  selector: 'ui-dialog-launcher',\n  template: `\n    <button\n      type=\"button\"\n      class=\"rounded-md bg-indigo-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n      (click)=\"openDialog()\"\n    >\n      Open dialog\n    </button>\n  `,\n})\nclass LaunchDialogComponent implements OnDestroy {\n  /** Animal name */\n  @Input() animal = '';\n  /** Dialog size */\n  @Input() size: DialogSize = 'medium';\n  /** Destroy subject */\n  private destroy$ = new Subject<void>();\n\n  /**\n   * Constructor for the launchDialog component\n   *\n   * @param _dialog Dialog service\n   */\n  constructor(private _dialog: Dialog) {}\n\n  /**\n   * open Dialog.\n   */\n  openDialog(): void {\n    const dialogRef: any = this._dialog.open(EditDialogComponent, {\n      data: {\n        animal: this.animal,\n        size: this.size,\n      },\n    });\n    dialogRef.closed.pipe(takeUntil(this.destroy$)).subscribe((result: any) => {\n      console.log(`Dialog result: ${result}`);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n\n/**\n * EditDialog component.\n */\n@Component({\n  standalone: true,\n  imports: [CommonModule, DialogModule],\n  selector: 'ui-edit-dialog',\n  template: `\n    <ui-dialog [size]=\"data.size\">\n      <ng-container ngProjectAs=\"header\">\n        <div\n          class=\"mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-green-100\"\n        >\n          <svg\n            class=\"h-6 w-6 text-green-600\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke-width=\"1.5\"\n            stroke=\"currentColor\"\n            aria-hidden=\"true\"\n          >\n            <path\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              d=\"M4.5 12.75l6 6 9-13.5\"\n            />\n          </svg>\n        </div>\n      </ng-container>\n      <ng-container ngProjectAs=\"content\">\n        <div class=\"flex flex-col h-full\">\n          <div class=\"my-auto text-center\">\n            <h3\n              class=\"text-base font-semibold leading-6 text-gray-900\"\n              id=\"modal-title\"\n            >\n              Payment successful\n            </h3>\n            <div class=\"mt-2\">\n              <p class=\"text-sm text-gray-500\">\n                Lorem ipsum dolor sit amet consectetur adipisicing elit.\n                Consequatur amet labore.\n              </p>\n            </div>\n          </div>\n        </div>\n      </ng-container>\n      <ng-container ngProjectAs=\"actions\">\n        <br />\n        <button\n          type=\"button\"\n          class=\"inline-flex w-full justify-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n          [uiDialogClose]=\"data.animal\"\n        >\n          Go back\n        </button>\n      </ng-container>\n    </ui-dialog>\n  `,\n})\nclass EditDialogComponent {\n  /**\n   * Edit Dialog component\n   *\n   * @param dialogRef Dialog ref\n   * @param data Injected dialog data\n   * @param data.animal animal data\n   * @param data.size size data\n   */\n  constructor(\n    public dialogRef: DialogRef<EditDialogComponent>,\n    @Inject(DIALOG_DATA)\n    public data: {\n      animal: string;\n      size: DialogSize;\n    }\n  ) {}\n}\n\nexport default {\n  title: 'Components/Dialog',\n  tags: ['autodocs'],\n  component: LaunchDialogComponent,\n  decorators: [\n    moduleMetadata({\n      declarations: [LaunchDialogComponent],\n      imports: [CommonModule, DialogModule],\n    }),\n  ],\n  argTypes: {\n    size: {\n      options: dialogSizes,\n      control: {\n        type: 'select',\n      },\n    },\n  },\n} as Meta;\n\n/**\n * Template launchDialog\n *\n * @param {LaunchDialogComponent} args args\n * @returns LaunchDialogComponent\n */\nconst Template: Story<LaunchDialogComponent> = (\n  args: LaunchDialogComponent\n) => ({\n  props: args,\n});\n\n/** Primary launchDialog */\nexport const Default = Template.bind({});\nDefault.args = {\n  animal: 'panda',\n  size: 'small',\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Constructor for the launchDialog component</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_dialog",
                        "type": "Dialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "rawdescription": "\n\nConstructor for the launchDialog component\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1171,
                            "end": 1178,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "_dialog"
                        },
                        "type": "Dialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1165,
                            "end": 1170,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Dialog service</p>\n"
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ]
        },
        {
            "name": "LaunchSnackbarComponent",
            "id": "component-LaunchSnackbarComponent-7902623c9047ad763162bafab94bf03dedfb12b363012ee3f394d374c231dd51dcb477928596220266e312359314790501646f4e8d58678d20c16a9c1fc9244d",
            "file": "libs/ui/src/lib/snackbar/snackbar.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-snackbar-launcher",
            "styleUrls": [],
            "styles": [],
            "template": "<button\n  type=\"button\"\n  class=\"rounded-md bg-indigo-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n  (click)=\"openSnackBar()\"\n>\n  {{ default ? 'Open default snackbar' : 'Open custom snackbar' }}\n</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "default",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDefault snackbar",
                    "description": "<p>Default snackbar</p>\n",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Destroy subject</p>\n",
                    "line": 31,
                    "rawdescription": "\nDestroy subject"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openSnackBar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpen Snackbar.\n",
                    "description": "<p>Open Snackbar.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>LaunchSnackbarComponent component.</p>\n",
            "rawdescription": "\n\nLaunchSnackbarComponent component.\n",
            "type": "component",
            "sourceCode": "import { moduleMetadata, Story, Meta } from '@storybook/angular';\nimport { SnackbarModule } from './snackbar.module';\nimport { CommonModule } from '@angular/common';\nimport { Component, Inject, Input, OnDestroy } from '@angular/core';\nimport { BehaviorSubject, Subject, takeUntil } from 'rxjs';\nimport { SNACKBAR_DATA, SnackBarData } from './snackbar.token';\nimport { SnackbarService } from './snackbar.service';\nimport { IconModule } from '../icon/icon.module';\nimport { SpinnerModule } from '../spinner/spinner.module';\nimport { StorybookTranslateModule } from '../../storybook-translate.module';\n\n/**\n * LaunchSnackbarComponent component.\n */\n@Component({\n  selector: 'ui-snackbar-launcher',\n  template: `\n    <button\n      type=\"button\"\n      class=\"rounded-md bg-indigo-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n      (click)=\"openSnackBar()\"\n    >\n      {{ default ? 'Open default snackbar' : 'Open custom snackbar' }}\n    </button>\n  `,\n})\nclass LaunchSnackbarComponent implements OnDestroy {\n  /** Default snackbar */\n  @Input() default = true;\n  /** Destroy subject */\n  destroy$ = new Subject<void>();\n\n  /**\n   * Constructor for the launch Snackbar component\n   *\n   * @param snackBar SnackbarService service\n   */\n  constructor(private snackBar: SnackbarService) {}\n\n  /**\n   * Open Snackbar.\n   */\n  openSnackBar(): void {\n    if (this.default) {\n      this.snackBar.openSnackBar('Processing failed', {\n        duration: 5000,\n        error: true,\n      });\n    } else {\n      const snackbarRef = this.snackBar.openComponentSnackBar(\n        CustomSnackbarComponent,\n        {\n          duration: 0,\n          action: 'Reload',\n          data: {\n            message: 'Processing',\n            loading: true,\n          },\n        }\n      );\n      snackbarRef.instance.actionComplete\n        .pipe(takeUntil(this.destroy$))\n        .subscribe({\n          next: () => window.alert('Action complete!!'),\n        });\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n\n/**\n * EditDialog component.\n */\n@Component({\n  standalone: true,\n  imports: [CommonModule, IconModule, SpinnerModule],\n  selector: 'ui-custom-snackbar',\n  template: `\n    <div class=\"flex\">\n      <span class=\"pr-2\">{{ data.message }}</span>\n      <ui-spinner size=\"medium\" *ngIf=\"data.loading\"></ui-spinner>\n      <ng-container *ngIf=\"!data.loading\">\n        <ui-icon\n          class=\"h-6\"\n          *ngIf=\"!data.error\"\n          [icon]=\"check\"\n          variant=\"success\"\n        ></ui-icon>\n        <ui-icon\n          class=\"h-6\"\n          *ngIf=\"data.error\"\n          [icon]=\"error\"\n          variant=\"danger\"\n        ></ui-icon>\n      </ng-container>\n      <div></div>\n    </div>\n  `,\n})\nclass CustomSnackbarComponent {\n  /** Snackbar data */\n  data: SnackBarData;\n\n  /**\n   * Snackbar child component\n   *\n   * @param dataToken Injected snackbar data\n   */\n  constructor(\n    @Inject(SNACKBAR_DATA)\n    public dataToken: BehaviorSubject<SnackBarData>\n  ) {\n    this.data = dataToken.getValue();\n  }\n}\n\nexport default {\n  title: 'Components/Snackbar',\n  tags: ['autodocs'],\n  component: LaunchSnackbarComponent,\n  decorators: [\n    moduleMetadata({\n      declarations: [LaunchSnackbarComponent],\n      imports: [CommonModule, SnackbarModule, StorybookTranslateModule],\n      providers: [SnackbarService],\n    }),\n  ],\n  argTypes: {\n    default: {\n      description: 'Open default snackbar',\n      type: 'boolean',\n    },\n    destroy$: {\n      description: 'Subject to emit when the component is destroyed.',\n      type: 'string',\n    },\n    ngOnDestroy: {\n      description:\n        'Lifecycle hook that is called when the component is destroyed.',\n    },\n  },\n} as Meta;\n\n/**\n * Template LaunchSnackbarComponent\n *\n * @param {LaunchSnackbarComponent} args args\n * @returns LaunchSnackbarComponent\n */\nconst Template: Story<LaunchSnackbarComponent> = (\n  args: LaunchSnackbarComponent\n) => ({\n  props: args,\n});\n\n/** LaunchSnackbarComponent */\nexport const Snackbar = Template.bind({});\nSnackbar.args = {\n  default: true,\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Constructor for the launch Snackbar component</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snackBar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "rawdescription": "\n\nConstructor for the launch Snackbar component\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1337,
                            "end": 1345,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "snackBar"
                        },
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1331,
                            "end": 1336,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>SnackbarService service</p>\n"
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ]
        },
        {
            "name": "MenuComponent",
            "id": "component-MenuComponent-6c842861449a427132a58b9106638af086f00faa3fe524ae854dc11364f310ae13c14f351c01d01b2ed17602c20d1414ca693d6cabeffdfa463cdf252e61dea5",
            "file": "libs/ui/src/lib/menu/menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-menu",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./menu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "closed",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEvent emitter for when the menu is closed.",
                    "description": "<p>Event emitter for when the menu is closed.</p>\n",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "<p>Reference to the menu template.</p>\n",
                    "line": 19,
                    "rawdescription": "\nReference to the menu template.",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TemplateRef"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>UI Menu Component\ntodo(tailwind): use directive instead of class for the menu items</p>\n",
            "rawdescription": "\n\nUI Menu Component\ntodo(tailwind): use directive instead of class for the menu items\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  Output,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\n\n/**\n * UI Menu Component\n * todo(tailwind): use directive instead of class for the menu items\n */\n@Component({\n  selector: 'ui-menu',\n  templateUrl: './menu.component.html',\n})\nexport class MenuComponent {\n  /** Reference to the menu template. */\n  @ViewChild(TemplateRef) templateRef!: TemplateRef<any>;\n  /** Event emitter for when the menu is closed. */\n  @Output() closed = new EventEmitter<void>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<ng-template>\n  <div\n    class=\"z-10 opacity-0 translate-y-1 transition-all ease-in-out duration-150 flex w-screen max-w-min\"\n  >\n    <div\n      (click)=\"closed.emit()\"\n      class=\"w-56 shrink bg-white text-sm font-normal leading-6 text-gray-900 shadow-lg ring-1 ring-gray-900/5 flex flex-col rounded-lg overflow-hidden py-1\"\n    >\n      <ng-content></ng-content>\n    </div>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "OptionComponent",
            "id": "component-OptionComponent-3a69de3e8590bcce1e19503ee6c14065159d62dcb9d14d450f67260e898db10ea2d305efbeb3c9d78ff8f3d0d9e371689c26743ee3e0e6daaf17a97f25aa5fd5",
            "file": "libs/ui/src/lib/autocomplete/components/option.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-option",
            "styleUrls": [
                "./option.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./option.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isGroup",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether it is a group or not",
                    "description": "<p>Whether it is a group or not</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nLabel for the option",
                    "description": "<p>Label for the option</p>\n",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nValue of the option.",
                    "description": "<p>Value of the option.</p>\n",
                    "line": 19,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "display",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Whether the option is displayed or not</p>\n",
                    "line": 31,
                    "rawdescription": "\nWhether the option is displayed or not"
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<OptionComponent>",
                    "optional": false,
                    "description": "<p>List of options</p>\n",
                    "line": 26,
                    "rawdescription": "\nList of options",
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "undefined"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Whether the option is selected or not</p>\n",
                    "line": 29,
                    "rawdescription": "\nWhether the option is selected or not"
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>UI Option component</p>\n",
            "rawdescription": "\n\nUI Option component\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ContentChildren,\n  Input,\n  QueryList,\n  forwardRef,\n} from '@angular/core';\n\n/**\n * UI Option component\n */\n@Component({\n  selector: 'ui-option',\n  templateUrl: './option.component.html',\n  styleUrls: ['./option.component.scss'],\n})\nexport class OptionComponent {\n  /** Value of the option. */\n  @Input() value!: any;\n  /** Label for the option */\n  @Input() label? = '';\n  /** Whether it is a group or not */\n  @Input() isGroup = false;\n  /** List of options */\n  @ContentChildren(forwardRef(() => OptionComponent))\n  options!: QueryList<OptionComponent>;\n\n  /** Whether the option is selected or not */\n  selected = false;\n  /** Whether the option is displayed or not */\n  display = true;\n\n  /**\n   * Set formatted value for list element\n   *\n   * @returns formatted value\n   */\n  get getValue() {\n    return this.value ? JSON.stringify(this.value) : '';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./option.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "getValue": {
                    "name": "getValue",
                    "getSignature": {
                        "name": "getValue",
                        "type": "",
                        "returnType": "",
                        "line": 38,
                        "rawdescription": "\n\nSet formatted value for list element\n\n",
                        "description": "<p>Set formatted value for list element</p>\n",
                        "jsdoctags": [
                            {
                                "pos": 775,
                                "end": 803,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 776,
                                    "end": 783,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>formatted value</p>\n"
                            }
                        ]
                    }
                }
            },
            "templateData": "<li\n  *ngIf=\"display\"\n  [attr.data-label]=\"label\"\n  [attr.data-value]=\"getValue\"\n  [attr.data-selected]=\"selected\"\n  [attr.data-is-group]=\"isGroup\"\n  [ngClass]=\"{\n    'bg-primary-300 text-white': !isGroup && selected,\n    'cursor-pointer hover:bg-primary-200 hover:text-white gap-2 flex items-center text-gray-900':\n      !isGroup,\n    'text-gray-500 pb-2': isGroup\n  }\"\n  class=\"px-2 py-1 relative pl-2 w-full justify-between\"\n  (click)=\"selected = !selected\"\n>\n  <ng-content></ng-content>\n  <ng-content select=\"icon\"></ng-content>\n</li>\n"
        },
        {
            "name": "PaginatorComponent",
            "id": "component-PaginatorComponent-ea7dd65ba0b303ba857ce2a9c4236445d167b919a5fabbdfaa150688ee5361c6735c72c127d16386cbbdc978b59a2913e87bed346239b51d7265fac543cd5d3d",
            "file": "libs/ui/src/lib/paginator/paginator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-paginator",
            "styleUrls": [
                "./paginator.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./paginator.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAria label",
                    "description": "<p>Aria label</p>\n",
                    "line": 46,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDisable pagination",
                    "description": "<p>Disable pagination</p>\n",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "displayedPageNumbers",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMaximum number of pages to show",
                    "description": "<p>Maximum number of pages to show</p>\n",
                    "line": 52,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "hideFirstLastButtons",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAllow buttons to go to first & last pages",
                    "description": "<p>Allow buttons to go to first &amp; last pages</p>\n",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "pageIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCurrent page index",
                    "description": "<p>Current page index</p>\n",
                    "line": 50,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "pageSize",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCurrent page size",
                    "description": "<p>Current page size</p>\n",
                    "line": 38,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "pageSizeOptions",
                    "defaultValue": "[5, 10, 15]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAvailable page size",
                    "description": "<p>Available page size</p>\n",
                    "line": 40,
                    "type": "{}",
                    "decorators": []
                },
                {
                    "name": "showPageSizes",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIf should allow user to change page size",
                    "description": "<p>If should allow user to change page size</p>\n",
                    "line": 42,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showTotalItems",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nShow total items",
                    "description": "<p>Show total items</p>\n",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "skip",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nItems to skip",
                    "description": "<p>Items to skip</p>\n",
                    "line": 48,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "totalItems",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nNumber of items",
                    "description": "<p>Number of items</p>\n",
                    "line": 34,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "pageChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nPage change event",
                    "description": "<p>Page change event</p>\n",
                    "line": 54,
                    "type": "EventEmitter<UIPageChangeEvent>"
                },
                {
                    "name": "pageSizeChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nPage size change event",
                    "description": "<p>Page size change event</p>\n",
                    "line": 56,
                    "type": "EventEmitter<PageSizeChangeEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "buttonCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Number of buttons to display</p>\n",
                    "line": 61,
                    "rawdescription": "\nNumber of buttons to display",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "paginatorId",
                    "defaultValue": "uuidv4()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Generate random unique identifier for each paginator component</p>\n",
                    "line": 59,
                    "rawdescription": "\nGenerate random unique identifier for each paginator component",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "resizeObserver",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ResizeObserver",
                    "optional": false,
                    "description": "<p>Observer resize changes</p>\n",
                    "line": 63,
                    "rawdescription": "\nObserver resize changes",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPageChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "PageChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate page data on page change\n\n",
                    "description": "<p>Update page data on page change</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2693,
                                "end": 2698,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "type": "PageChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2687,
                                "end": 2692,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Page change event</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateDisplay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate display of the paginator, based on available width.\n",
                    "description": "<p>Update display of the paginator, based on available width.</p>\n",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>UI Paginator component\nPaginator is a UI component that allows the user to navigate through pages of content.</p>\n",
            "rawdescription": "\n\nUI Paginator component\nPaginator is a UI component that allows the user to navigate through pages of content.\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  Renderer2,\n  SimpleChanges,\n} from '@angular/core';\nimport {\n  PageChangeEvent,\n  PageSizeChangeEvent,\n} from '@progress/kendo-angular-pager';\nimport { v4 as uuidv4 } from 'uuid';\nimport { UIPageChangeEvent } from './interfaces/paginator.interfaces';\nimport { min } from 'lodash';\n\n/**\n * UI Paginator component\n * Paginator is a UI component that allows the user to navigate through pages of content.\n */\n@Component({\n  selector: 'ui-paginator',\n  templateUrl: './paginator.component.html',\n  styleUrls: ['./paginator.component.scss'],\n})\nexport class PaginatorComponent implements OnChanges, AfterViewInit, OnDestroy {\n  /** Disable pagination */\n  @Input() disabled = false;\n  /** Number of items */\n  @Input() totalItems = 0;\n  /** Show total items */\n  @Input() showTotalItems = true;\n  /** Current page size */\n  @Input() pageSize = 10;\n  /** Available page size */\n  @Input() pageSizeOptions = [5, 10, 15];\n  /** If should allow user to change page size */\n  @Input() showPageSizes = true;\n  /** Allow buttons to go to first & last pages */\n  @Input() hideFirstLastButtons = true;\n  /** Aria label */\n  @Input() ariaLabel = '';\n  /** Items to skip */\n  @Input() skip = 0;\n  /** Current page index */\n  @Input() pageIndex = 0;\n  /** Maximum number of pages to show */\n  @Input() displayedPageNumbers = 0;\n  /** Page change event */\n  @Output() pageChange: EventEmitter<UIPageChangeEvent> = new EventEmitter();\n  /** Page size change event */\n  @Output() pageSizeChange: EventEmitter<PageSizeChangeEvent> =\n    new EventEmitter();\n  /** Generate random unique identifier for each paginator component */\n  public paginatorId = uuidv4();\n  /** Number of buttons to display */\n  public buttonCount!: number;\n  /** Observer resize changes */\n  private resizeObserver!: ResizeObserver;\n\n  /**\n   * UI Paginator component\n   * Paginator is a UI component that allows the user to navigate through pages of content.\n   *\n   * @param renderer Angular renderer\n   * @param el Element reference\n   */\n  constructor(private renderer: Renderer2, private el: ElementRef) {}\n\n  ngAfterViewInit() {\n    this.updateDisplay();\n    this.resizeObserver = new ResizeObserver(() => {\n      this.updateDisplay();\n    });\n    this.resizeObserver.observe(this.el.nativeElement.parentElement);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['pageIndex']) {\n      this.skip = changes['pageIndex'].currentValue * this.pageSize;\n    }\n    this.updateDisplay();\n  }\n\n  ngOnDestroy() {\n    this.resizeObserver.disconnect();\n  }\n\n  /**\n   * Update page data on page change\n   *\n   * @param event Page change event\n   */\n  onPageChange(event: PageChangeEvent): void {\n    // Current page has to be calculated, logic provided from their forums: https://www.telerik.com/forums/get-current-page\n    const currentPage = (event.skip + event.take) / event.take - 1;\n    this.pageSize = event.take;\n    this.skip = event.skip;\n    this.pageChange.emit({\n      pageSize: this.pageSize,\n      skip: event.skip,\n      totalItems: this.totalItems,\n      pageIndex: currentPage,\n      previousPageIndex: this.pageIndex,\n    });\n    this.pageIndex = currentPage;\n  }\n\n  /**\n   * Update display of the paginator, based on available width.\n   */\n  private updateDisplay() {\n    const showNumbers = (show = true) => {\n      const pagerNumericButtons = this.el.nativeElement.querySelector(\n        'kendo-datapager-numeric-buttons'\n      );\n      if (pagerNumericButtons) {\n        const numbers = pagerNumericButtons.querySelector('.k-pager-numbers');\n        if (show) {\n          this.renderer.addClass(numbers, '!flex');\n          this.renderer.removeClass(numbers, '!hidden');\n        } else {\n          this.renderer.addClass(numbers, '!hidden');\n          this.renderer.removeClass(numbers, '!flex');\n        }\n      }\n    };\n    const showSelect = (show = true) => {\n      const pagerNumericButtons = this.el.nativeElement.querySelector(\n        'kendo-datapager-numeric-buttons'\n      );\n      if (pagerNumericButtons) {\n        const select = pagerNumericButtons.querySelector('select');\n        if (show) {\n          this.renderer.addClass(select, '!flex');\n          this.renderer.removeClass(select, '!hidden');\n        } else {\n          this.renderer.addClass(select, '!hidden');\n          this.renderer.removeClass(select, '!flex');\n        }\n      }\n    };\n    const showPageSizes = (show = true) => {\n      const pageSizes = this.el.nativeElement.querySelector(\n        'kendo-datapager-page-sizes'\n      );\n      if (pageSizes) {\n        if (show) {\n          this.renderer.addClass(pageSizes, '!flex');\n          this.renderer.removeClass(pageSizes, '!hidden');\n        } else {\n          this.renderer.addClass(pageSizes, '!hidden');\n          this.renderer.removeClass(pageSizes, '!flex');\n        }\n      }\n    };\n    const width = this.el.nativeElement.parentElement.clientWidth;\n    if (width >= 600) {\n      this.buttonCount = min([this.displayedPageNumbers, 5]) || 0;\n      showNumbers();\n      showPageSizes();\n      showSelect(false);\n    } else if (width >= 450) {\n      this.buttonCount = min([this.displayedPageNumbers, 2]) || 0;\n      showNumbers();\n      showPageSizes();\n      showSelect(false);\n    } else if (width >= 300) {\n      this.buttonCount = min([this.displayedPageNumbers, 3]) || 0;\n      showNumbers();\n      showPageSizes(false);\n      showSelect(false);\n    } else {\n      this.buttonCount = this.displayedPageNumbers;\n      showNumbers(false);\n      showPageSizes(false);\n      showSelect();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "kendo-datapager {\n  @apply p-3 bg-white border-l-0 border-b-0 border-r-0 border-t;\n}\n\n:host ::ng-deep {\n  .k-pager-md .k-pager-numbers-wrap .k-button {\n    --tw-border-opacity: 1 !important;\n    border-color: rgb(212 212 212 / var(--tw-border-opacity)) !important;\n    @apply h-full text-base border-r border-l-0 border-t-0 border-b-0;\n  }\n\n  // When cursor pagination, hide first & last buttons\n  .hide-first-last {\n    kendo-datapager-prev-buttons {\n      .k-pager-first {\n        display: none !important;\n      }\n    }\n    kendo-datapager-next-buttons {\n      .k-pager-last {\n        display: none !important;\n      }\n      button:first-child {\n        border-right: 0 !important;\n      }\n    }\n  }\n\n  .hide-info {\n    kendo-datapager-info {\n      display: none !important;\n    }\n  }\n\n  kendo-datapager.k-pager-mobile-sm {\n    &:not(.hide-first-last) {\n      kendo-datapager-next-buttons {\n        button:first-child {\n          border-left-width: 1px !important;\n        }\n      }\n    }\n  }\n\n  // Hide last border ( duplicated )\n  kendo-datapager-next-buttons button:last-child {\n    border-right: 0 !important;\n  }\n\n  kendo-dropdownlist,\n  select {\n    background-image: none !important;\n    @apply border-0 border-b border-neutral-500 bg-inherit;\n  }\n\n  k-pager {\n    @apply border-0 focus:shadow-none;\n  }\n\n  kendo-datapager-info {\n    order: 1;\n    @apply text-sm text-gray-700;\n    justify-content: flex-start;\n  }\n\n  // Change native order of elements\n  kendo-datapager-page-sizes {\n    order: 2;\n  }\n\n  .k-pager-numbers-wrap {\n    order: 3;\n    @apply border rounded-md ml-auto;\n  }\n\n  kendo-datapager-numeric-buttons {\n    select {\n      margin: 0 !important;\n    }\n  }\n}\n",
                    "styleUrl": "./paginator.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>UI Paginator component\nPaginator is a UI component that allows the user to navigate through pages of content.</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 63,
                "rawdescription": "\n\nUI Paginator component\nPaginator is a UI component that allows the user to navigate through pages of content.\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 2046,
                            "end": 2054,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2040,
                            "end": 2045,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Angular renderer</p>\n"
                    },
                    {
                        "name": {
                            "pos": 2084,
                            "end": 2086,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "el"
                        },
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2078,
                            "end": 2083,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Element reference</p>\n"
                    }
                ]
            },
            "implements": [
                "OnChanges",
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<!-- PAGINATOR CONTENT-->\n<div class=\"w-full relative\">\n  <div\n    [ngClass]=\"{ 'z-0': !disabled, 'z-10': disabled }\"\n    class=\"absolute inset-0 bg-white opacity-50\"\n  ></div>\n  <kendo-datapager\n    class=\"!border-none\"\n    [ngClass]=\"{ \n      'hide-first-last': hideFirstLastButtons,\n      'hide-info': !showTotalItems,\n    }\"\n    [attr.aria-label]=\"ariaLabel\"\n    [attr.aria-controls]=\"paginatorId\"\n    [style.width.%]=\"100\"\n    [pageSize]=\"pageSize\"\n    [skip]=\"skip\"\n    [total]=\"totalItems\"\n    [buttonCount]=\"buttonCount\"\n    [pageSizeValues]=\"showPageSizes && pageSizeOptions\"\n    [info]=\"true\"\n    (pageChange)=\"onPageChange($event)\"\n    (pageSizeChange)=\"pageSizeChange.emit($event)\"\n  >\n    <!-- For some unknown reasons we need to write the messages, otherwise it would display only the keys in web elements mode. -->\n    <kendo-datapager-messages\n      [firstPage]=\"'kendo.pager.firstPage' | translate\"\n      [items]=\"'kendo.pager.items' | translate\"\n      [itemsPerPage]=\"'kendo.pager.itemsPerPage' | translate\"\n      [lastPage]=\"'kendo.pager.lastPage' | translate\"\n      [nextPage]=\"'kendo.pager.nextPage' | translate\"\n      [of]=\"'kendo.pager.of' | translate\"\n      [page]=\"'kendo.pager.page' | translate\"\n      [pageNumberInputTitle]=\"'kendo.pager.pageNumberInputTitle' | translate\"\n      [previousPage]=\"'kendo.pager.previousPage' | translate\"\n      [selectPage]=\"'kendo.pager.selectPage' | translate\"\n    ></kendo-datapager-messages>\n  </kendo-datapager>\n</div>\n"
        },
        {
            "name": "RadioComponent",
            "id": "component-RadioComponent-b1942cf3afab317681492c33cf9aa77e61630701b9d2c5c663e5c9d0a6a4e4bcf32e6f3157635e83a0878cd76970a15d6070832898ca60b260b3784abe5d6447",
            "file": "libs/ui/src/lib/radio/radio.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-radio",
            "styleUrls": [
                "./radio.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./radio.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "ariaLabelledby",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAria label for accessibility.",
                    "description": "<p>Aria label for accessibility.</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nBoolean indicating whether the radio button is checked.",
                    "description": "<p>Boolean indicating whether the radio button is checked.</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nBoolean indicating whether the radio button is disabled.",
                    "description": "<p>Boolean indicating whether the radio button is disabled.</p>\n",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe name of the radio button.",
                    "description": "<p>The name of the radio button.</p>\n",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nBoolean indicating whether the radio button is required.",
                    "description": "<p>Boolean indicating whether the radio button is required.</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe value of the radio button.",
                    "description": "<p>The value of the radio button.</p>\n",
                    "line": 17,
                    "type": "string | boolean",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe variant or style of the radio button.",
                    "description": "<p>The variant or style of the radio button.</p>\n",
                    "line": 27,
                    "type": "Variant",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>UI Radio button component\nDisplay a radio button with a given variant.</p>\n",
            "rawdescription": "\n\nUI Radio button component\nDisplay a radio button with a given variant.\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Variant } from '../types/variant';\n\n/**\n * UI Radio button component\n * Display a radio button with a given variant.\n */\n@Component({\n  selector: 'ui-radio',\n  templateUrl: './radio.component.html',\n  styleUrls: ['./radio.component.scss'],\n})\nexport class RadioComponent {\n  /** The name of the radio button. */\n  @Input() name = '';\n  /** The value of the radio button. */\n  @Input() value: string | boolean = '';\n  /** Boolean indicating whether the radio button is disabled. */\n  @Input() disabled = false;\n  /** Boolean indicating whether the radio button is required. */\n  @Input() required = false;\n  /** Boolean indicating whether the radio button is checked. */\n  @Input() checked = false;\n  /** Aria label for accessibility. */\n  @Input() ariaLabelledby = '';\n  /** The variant or style of the radio button. */\n  @Input() variant: Variant = 'default';\n\n  /**\n   * Getter resolving the variant classes\n   *\n   * @returns resolved classes\n   */\n  get getVariant(): string[] {\n    const classes = [\n      this.variant === 'default'\n        ? 'radio-primary'\n        : this.variant === 'light'\n        ? 'radio-grey'\n        : 'radio-' + this.variant,\n    ];\n    if (this.disabled) {\n      classes.push('opacity-70 bg-gray-300 pointer-events-none');\n    }\n    return classes;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// === VARIANTS ===\n.radio-primary {\n  @apply text-primary-400 focus:ring-primary-600;\n}\n\n.radio-success {\n  @apply text-green-400 focus:ring-green-600;\n}\n\n.radio-danger {\n  @apply text-red-400 focus:ring-red-600;\n}\n\n.radio-grey {\n  @apply text-gray-400 focus:ring-gray-600;\n}\n",
                    "styleUrl": "./radio.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "getVariant": {
                    "name": "getVariant",
                    "getSignature": {
                        "name": "getVariant",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 34,
                        "rawdescription": "\n\nGetter resolving the variant classes\n\n",
                        "description": "<p>Getter resolving the variant classes</p>\n",
                        "jsdoctags": [
                            {
                                "pos": 979,
                                "end": 1008,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 980,
                                    "end": 987,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>resolved classes</p>\n"
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"flex items-center\">\n  <input\n    type=\"radio\"\n    [ngClass]=\"getVariant\"\n    class=\"form-radio h-4 w-4 border-gray-300\"\n    [required]=\"required\"\n    [disabled]=\"disabled\"\n    [value]=\"value\"\n    [checked]=\"checked\"\n    [name]=\"name\"\n    [attr.ariaLabel]=\"ariaLabelledby\"\n  />\n  <div\n    class=\"ml-2 block text-sm font-medium leading-6\"\n    [ngClass]=\"{\n      'text-gray-400': disabled,\n      'text-gray-900': !disabled\n    }\"\n  >\n    <label for=\"{{ name }}\">\n      <ng-content select=\"label\"></ng-content>\n    </label>\n    <ng-content select=\"icon\"></ng-content>\n    <p class=\"m-0\" id=\"{{ name }}-radio-description\">\n      <ng-content select=\"description\"></ng-content>\n    </p>\n  </div>\n</div>\n"
        },
        {
            "name": "SelectMenuComponent",
            "id": "component-SelectMenuComponent-ded557ede3056b5b52691cb96a29da0b9b50a8d37cca9fc7e4f58df0f25208ba16fbb2bdcf1906e8949543123fac2e9844625a20f1d22b0bfff9abc51c3b405f",
            "file": "libs/ui/src/lib/select-menu/select-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-select-menu",
            "styleUrls": [
                "./select-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select-menu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "customTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAny custom template provided for display",
                    "description": "<p>Any custom template provided for display</p>\n",
                    "line": 60,
                    "type": "literal type",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nTells if the select menu should be disabled",
                    "description": "<p>Tells if the select menu should be disabled</p>\n",
                    "line": 51,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "extraClasses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAdd extra classes that will apply to the wrapper element",
                    "description": "<p>Add extra classes that will apply to the wrapper element</p>\n",
                    "line": 62,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "filterable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIf the option list is searchable or not",
                    "description": "<p>If the option list is searchable or not</p>\n",
                    "line": 55,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isGraphQlSelect",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nTells if some styles to the current ul element should be applied",
                    "description": "<p>Tells if some styles to the current ul element should be applied</p>\n",
                    "line": 53,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nLoading state",
                    "description": "<p>Loading state</p>\n",
                    "line": 83,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "multiselect",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nTells if the select menu should allow multi selection",
                    "description": "<p>Tells if the select menu should allow multi selection</p>\n",
                    "line": 49,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDefault value to be displayed when no option is selected",
                    "description": "<p>Default value to be displayed when no option is selected</p>\n",
                    "line": 64,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDefault selected value",
                    "description": "<p>Default selected value</p>\n",
                    "line": 57,
                    "type": "string | string[] | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "closed",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEmits when the list is closed",
                    "description": "<p>Emits when the list is closed</p>\n",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "opened",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEmits when the list is opened",
                    "description": "<p>Emits when the list is opened</p>\n",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectedOption",
                    "defaultValue": "new EventEmitter<string | string[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEmits the list of the selected options",
                    "description": "<p>Emits the list of the selected options</p>\n",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "applyAnimationTimeoutListener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NodeJS.Timeout",
                    "optional": false,
                    "description": "<p>Timeout listener for the animation</p>\n",
                    "line": 104,
                    "rawdescription": "\nTimeout listener for the animation",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "clickOutsideListener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Click outside listener</p>\n",
                    "line": 98,
                    "rawdescription": "\nClick outside listener",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "closePanelTimeoutListener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NodeJS.Timeout",
                    "optional": false,
                    "description": "<p>Timeout listener for the closing of the panel</p>\n",
                    "line": 106,
                    "rawdescription": "\nTimeout listener for the closing of the panel",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Destroy subject</p>\n",
                    "line": 96,
                    "rawdescription": "\nDestroy subject",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "displayTrigger",
                    "defaultValue": "this.placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Text to be displayed in the trigger when some selections are made</p>\n",
                    "line": 92,
                    "rawdescription": "\nText to be displayed in the trigger when some selections are made",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "el",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "Host element reference",
                    "line": 133,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "listBoxFocused",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>True if the box is focused, false otherwise</p>\n",
                    "line": 90,
                    "rawdescription": "\nTrue if the box is focused, false otherwise",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Control access value functions</p>\n",
                    "line": 109,
                    "rawdescription": "\nControl access value functions"
                },
                {
                    "name": "onTouch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Control access touch functions</p>\n",
                    "line": 111,
                    "rawdescription": "\nControl access touch functions"
                },
                {
                    "name": "optionList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<SelectOptionComponent>",
                    "optional": false,
                    "description": "<p>List of options</p>\n",
                    "line": 75,
                    "rawdescription": "\nList of options",
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "SelectOptionComponent, {descendants: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "optionPanel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "<p>Template reference for the option panel</p>\n",
                    "line": 78,
                    "rawdescription": "\nTemplate reference for the option panel",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'optionPanel', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "overlayRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayRef",
                    "optional": false,
                    "description": "<p>Overlay reference</p>\n",
                    "line": 102,
                    "rawdescription": "\nOverlay reference",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "searchControl",
                    "defaultValue": "new FormControl('', { nonNullable: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Search control</p>\n",
                    "line": 81,
                    "rawdescription": "\nSearch control",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "searchSubscriptionActive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>Subscription to the search control</p>\n",
                    "line": 85,
                    "rawdescription": "\nSubscription to the search control",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "selectClosingActionsSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>Subscription to the closing actions</p>\n",
                    "line": 100,
                    "rawdescription": "\nSubscription to the closing actions",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "selectedValues",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "<p>Array to store the values selected</p>\n",
                    "line": 88,
                    "rawdescription": "\nArray to store the values selected",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "triggerUIChange$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Needed property for the components in survey that would use the select-menu component</p>\n",
                    "line": 94,
                    "rawdescription": "\nNeeded property for the components in survey that would use the select-menu component",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "applySelectListDisplayAnimation",
                    "args": [
                        {
                            "name": "toDisplay",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 496,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nApply animation to displayed selectList\n\n",
                    "description": "<p>Apply animation to displayed selectList</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 15475,
                                "end": 15484,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "toDisplay"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 15469,
                                "end": 15474,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>If the selectList is going to be displayed or not</p>\n"
                        }
                    ]
                },
                {
                    "name": "closeSelectPanel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 460,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCloses the listbox if a click is made outside of the component",
                    "description": "<p>Closes the listbox if a click is made outside of the component</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "filterOptionList",
                    "args": [
                        {
                            "name": "searchValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 514,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFilter the current option list by the given search value\n\n",
                    "description": "<p>Filter the current option list by the given search value</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 16219,
                                "end": 16230,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "searchValue"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 16213,
                                "end": 16218,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>value to filter current option list</p>\n"
                        }
                    ]
                },
                {
                    "name": "forceOptionList",
                    "args": [
                        {
                            "name": "optionList",
                            "type": "QueryList<SelectOptionComponent>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 205,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nForce the options list when they cannot be successfully loaded through contentchildren\n\n",
                    "description": "<p>Force the options list when they cannot be successfully loaded through contentchildren</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6517,
                                "end": 6527,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "optionList"
                            },
                            "type": "QueryList<SelectOptionComponent>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6511,
                                "end": 6516,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the optionList we want to</p>\n"
                        }
                    ]
                },
                {
                    "name": "getValuesLabel",
                    "args": [
                        {
                            "name": "selectedValues",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 367,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMap select option list label if exists, otherwise value\n\n",
                    "description": "<p>Map select option list label if exists, otherwise value</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 11038,
                                "end": 11052,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "selectedValues"
                            },
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 11032,
                                "end": 11037,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>selected values</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 11075,
                                "end": 11082,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>mapped values</p>\n"
                        }
                    ]
                },
                {
                    "name": "handleOptionsQueryChange",
                    "args": [
                        {
                            "name": "options",
                            "type": "QueryList<SelectOptionComponent>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate selected values and all handlers for the given options query list\n\n",
                    "description": "<p>Update selected values and all handlers for the given options query list</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7014,
                                "end": 7021,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "options"
                            },
                            "type": "QueryList<SelectOptionComponent>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7008,
                                "end": 7013,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Select menu options query list items</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 537,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangeFunction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 293,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmit selectedOption output, change trigger text and deal with control access value when an element of the list is clicked\n",
                    "description": "<p>Emit selectedOption output, change trigger text and deal with control access value when an element of the list is clicked</p>\n"
                },
                {
                    "name": "openSelectPanel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 386,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens or closes the list when the trigger component is clicked (+ make the corresponding output emissions)\n",
                    "description": "<p>Opens or closes the list when the trigger component is clicked (+ make the corresponding output emissions)</p>\n"
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 263,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRecord on change\n\nevent that took place\n",
                    "description": "<p>Record on change</p>\n<p>event that took place</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8133,
                                "end": 8135,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "pos": 8127,
                                "end": 8132,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>event that took place</p>\n"
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 275,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRecord on touch\n\nevent that took place\n",
                    "description": "<p>Record on touch</p>\n<p>event that took place</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8323,
                                "end": 8325,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "pos": 8317,
                                "end": 8322,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>event that took place</p>\n"
                        }
                    ]
                },
                {
                    "name": "selectClosingActions",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Event | void>",
                    "typeParameters": [],
                    "line": 486,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nActions linked to the destruction of the current displayed select\n\n",
                    "description": "<p>Actions linked to the destruction of the current displayed select</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 15219,
                                "end": 15226,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Observable of actions</p>\n"
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 286,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet disabled state of the control\n\n",
                    "description": "<p>Set disabled state of the control</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8520,
                                "end": 8530,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "isDisabled"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8514,
                                "end": 8519,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>is control disabled</p>\n"
                        }
                    ]
                },
                {
                    "name": "setDisplayTriggerText",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 316,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nBuilds the text displayed from selected options",
                    "description": "<p>Builds the text displayed from selected options</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "updateSelectedValues",
                    "args": [
                        {
                            "name": "selectedOption",
                            "type": "SelectOptionComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selected",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 339,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdated the form control value on optionClick event\n\n",
                    "description": "<p>Updated the form control value on optionClick event</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 10158,
                                "end": 10172,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "selectedOption"
                            },
                            "type": "SelectOptionComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 10128,
                                "end": 10133,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>option clicked</p>\n",
                            "typeExpression": {
                                "pos": 10134,
                                "end": 10157,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 312,
                                "type": {
                                    "pos": 10135,
                                    "end": 10156,
                                    "flags": 8388608,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 180,
                                    "typeName": {
                                        "pos": 10135,
                                        "end": 10156,
                                        "flags": 8388608,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 79,
                                        "escapedText": "SelectOptionComponent"
                                    }
                                }
                            }
                        },
                        {
                            "name": {
                                "pos": 10210,
                                "end": 10218,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "selected"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 10194,
                                "end": 10199,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>if the option as selected or unselected</p>\n",
                            "typeExpression": {
                                "pos": 10200,
                                "end": 10209,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 312,
                                "type": {
                                    "pos": 10201,
                                    "end": 10208,
                                    "flags": 8388608,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 134
                                }
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | string[] | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 249,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWrite new value\n\n",
                    "description": "<p>Write new value</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7832,
                                "end": 7837,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "string | string[] | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7826,
                                "end": 7831,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>value set from parent form control</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>UI Select Menu component\nSelect menu is a UI component that provides a list of options to choose from.</p>\n",
            "rawdescription": "\n\nUI Select Menu component\nSelect menu is a UI component that provides a list of options to choose from.\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  TemplateRef,\n  ContentChildren,\n  QueryList,\n  OnDestroy,\n  Renderer2,\n  ElementRef,\n  ViewChild,\n  ViewContainerRef,\n  AfterContentInit,\n  Optional,\n  Self,\n  OnChanges,\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, NgControl } from '@angular/forms';\nimport { SelectOptionComponent } from './components/select-option.component';\nimport {\n  Observable,\n  Subject,\n  Subscription,\n  debounceTime,\n  distinctUntilChanged,\n  merge,\n  startWith,\n  takeUntil,\n} from 'rxjs';\nimport { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { isNil } from 'lodash';\nimport { ShadowDomService } from '../shadow-dom/shadow-dom.service';\n\n/**\n * UI Select Menu component\n * Select menu is a UI component that provides a list of options to choose from.\n */\n@Component({\n  selector: 'ui-select-menu',\n  templateUrl: './select-menu.component.html',\n  styleUrls: ['./select-menu.component.scss'],\n})\nexport class SelectMenuComponent\n  implements ControlValueAccessor, OnChanges, AfterContentInit, OnDestroy\n{\n  /** Tells if the select menu should allow multi selection */\n  @Input() multiselect = false;\n  /** Tells if the select menu should be disabled */\n  @Input() disabled = false;\n  /** Tells if some styles to the current ul element should be applied */\n  @Input() isGraphQlSelect = false;\n  /** If the option list is searchable or not */\n  @Input() filterable = false;\n  /** Default selected value */\n  @Input() value?: string | string[] | null;\n  /** Any custom template provided for display */\n  @Input()\n  customTemplate!: { template: TemplateRef<any>; context: any };\n  /** Add extra classes that will apply to the wrapper element */\n  @Input() extraClasses?: string;\n  /** Default value to be displayed when no option is selected */\n  @Input() placeholder = '';\n\n  /** Emits when the list is opened */\n  @Output() opened = new EventEmitter<void>();\n  /** Emits when the list is closed */\n  @Output() closed = new EventEmitter<void>();\n  /** Emits the list of the selected options */\n  @Output() selectedOption = new EventEmitter<string | string[]>();\n\n  /** List of options */\n  @ContentChildren(SelectOptionComponent, { descendants: true })\n  optionList!: QueryList<SelectOptionComponent>;\n\n  /** Template reference for the option panel */\n  @ViewChild('optionPanel', { static: true }) optionPanel!: TemplateRef<any>;\n\n  /** Search control */\n  public searchControl = new FormControl('', { nonNullable: true });\n  /** Loading state */\n  @Input() public loading = false;\n  /** Subscription to the search control */\n  private searchSubscriptionActive!: Subscription;\n\n  /** Array to store the values selected */\n  public selectedValues: any[] = [];\n  /** True if the box is focused, false otherwise */\n  public listBoxFocused = false;\n  /** Text to be displayed in the trigger when some selections are made */\n  public displayTrigger = this.placeholder;\n  /** Needed property for the components in survey that would use the select-menu component */\n  public triggerUIChange$ = new Subject<boolean>();\n  /** Destroy subject */\n  private destroy$ = new Subject<void>();\n  /** Click outside listener */\n  private clickOutsideListener!: () => void;\n  /** Subscription to the closing actions */\n  private selectClosingActionsSubscription!: Subscription;\n  /** Overlay reference */\n  private overlayRef!: OverlayRef;\n  /** Timeout listener for the animation */\n  private applyAnimationTimeoutListener!: NodeJS.Timeout;\n  /** Timeout listener for the closing of the panel */\n  private closePanelTimeoutListener!: NodeJS.Timeout;\n\n  /** Control access value functions */\n  onChange!: (value: any) => void;\n  /** Control access touch functions */\n  onTouch!: () => void;\n\n  /** @returns if current option list is empty by option number or option display number by search */\n  get emptyList() {\n    return (\n      this.optionList.toArray().every((option) => !option.display) ||\n      !this.optionList.length\n    );\n  }\n\n  /**\n   * Ui Select constructor\n   *\n   * @param control host element NgControl instance\n   * @param el Host element reference\n   * @param renderer Renderer2\n   * @param viewContainerRef ViewContainerRef\n   * @param overlay Overlay\n   * @param shadowDomService shadow dom service to handle the current host of the component\n   */\n  constructor(\n    @Optional() @Self() private control: NgControl,\n    public el: ElementRef,\n    private renderer: Renderer2,\n    private viewContainerRef: ViewContainerRef,\n    private overlay: Overlay,\n    private shadowDomService: ShadowDomService\n  ) {\n    if (this.control) {\n      this.control.valueAccessor = this;\n    }\n  }\n\n  ngOnChanges(): void {\n    // Listen to search bar changes if filterable is available\n    if (this.filterable) {\n      if (this.searchSubscriptionActive) {\n        this.searchSubscriptionActive.unsubscribe();\n      }\n      this.searchSubscriptionActive = this.searchControl.valueChanges\n        .pipe(\n          debounceTime(500),\n          distinctUntilChanged(),\n          takeUntil(this.destroy$)\n        )\n        .subscribe((searchValue: string) => {\n          this.filterOptionList(searchValue);\n        });\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this.clickOutsideListener = this.renderer.listen(\n      this.shadowDomService.currentHost,\n      'click',\n      (event) => {\n        if (\n          !(\n            this.el.nativeElement.contains(event.target) ||\n            this.shadowDomService.currentHost\n              .getElementById('optionsContainer')\n              ?.contains(event.target)\n          )\n        ) {\n          this.closeSelectPanel();\n        }\n      }\n    );\n    this.optionList?.changes\n      .pipe(startWith(this.optionList), takeUntil(this.destroy$))\n      .subscribe({\n        next: (options: QueryList<SelectOptionComponent>) => {\n          this.handleOptionsQueryChange(options);\n        },\n      });\n    if (this.control) {\n      this.control.valueChanges?.pipe(takeUntil(this.destroy$)).subscribe({\n        next: (value) => {\n          // If the value is cleared from outside, reset displayed values\n          if (isNil(value) || value.length === 0) {\n            this.selectedValues = [];\n            this.optionList.forEach((option) => (option.selected = false));\n            this.setDisplayTriggerText();\n          }\n        },\n      });\n    }\n  }\n\n  /**\n   * Force the options list when they cannot be successfully loaded through contentchildren\n   *\n   * @param optionList the optionList we want to\n   */\n  forceOptionList(optionList: QueryList<SelectOptionComponent>) {\n    this.optionList = optionList;\n    this.optionList?.changes\n      .pipe(startWith(this.optionList), takeUntil(this.destroy$))\n      .subscribe({\n        next: (options: QueryList<SelectOptionComponent>) => {\n          this.handleOptionsQueryChange(options);\n        },\n      });\n  }\n\n  /**\n   * Update selected values and all handlers for the given options query list\n   *\n   * @param options Select menu options query list items\n   */\n  private handleOptionsQueryChange(options: QueryList<SelectOptionComponent>) {\n    if (this.value) {\n      this.selectedValues.push(\n        this.value instanceof Array ? [...this.value] : this.value\n      );\n    }\n    options.forEach((option) => {\n      option.optionClick.pipe(takeUntil(this.destroy$)).subscribe({\n        next: (isSelected: boolean) => {\n          this.updateSelectedValues(option, isSelected);\n          this.onChangeFunction();\n        },\n      });\n      // Initialize any selected values\n      if (this.selectedValues.find((selVal) => selVal == option.value)) {\n        option.selected = true;\n      } else {\n        option.selected = false;\n      }\n      this.setDisplayTriggerText();\n    });\n  }\n\n  /**\n   * Write new value\n   *\n   * @param value value set from parent form control\n   */\n  writeValue(value: string | string[] | null): void {\n    if (value && value instanceof Array) {\n      this.selectedValues = [...value];\n    } else if (value) {\n      this.selectedValues = [value];\n    }\n  }\n\n  /**\n   * Record on change\n   *\n   * @param fn\n   * event that took place\n   */\n  registerOnChange(fn: (value: any) => void) {\n    if (!this.onChange) {\n      this.onChange = fn;\n    }\n  }\n\n  /**\n   * Record on touch\n   *\n   * @param fn\n   * event that took place\n   */\n  registerOnTouched(fn: () => void) {\n    if (!this.onTouch) {\n      this.onTouch = fn;\n    }\n  }\n\n  /**\n   * Set disabled state of the control\n   *\n   * @param isDisabled is control disabled\n   */\n  public setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /**\n   * Emit selectedOption output, change trigger text and deal with control access value when an element of the list is clicked\n   */\n  onChangeFunction() {\n    // Emit the list of values selected as an output\n    this.setDisplayTriggerText();\n    if (this.multiselect) {\n      // Manage control access value\n      if (this.onChange && this.onTouch) {\n        this.onChange(this.selectedValues);\n        this.onTouch();\n      }\n      this.selectedOption.emit(this.selectedValues);\n    } else {\n      // Manage control access value\n      if (this.onChange && this.onTouch) {\n        this.onChange(this.selectedValues[0]);\n        this.onTouch();\n      }\n      this.selectedOption.emit(this.selectedValues[0]);\n      //close list after selection\n      this.closeSelectPanel();\n    }\n  }\n\n  /** Builds the text displayed from selected options */\n  private setDisplayTriggerText() {\n    const labelValues = this.getValuesLabel(this.selectedValues);\n    // Adapt the text to be displayed in the trigger if no custom template for display is provided\n    if (!this.customTemplate) {\n      if (labelValues?.length) {\n        if (labelValues.length === 1) {\n          this.displayTrigger = labelValues[0];\n        } else {\n          this.displayTrigger =\n            labelValues[0] + ' (+' + (labelValues.length - 1) + ' others)';\n        }\n      } else {\n        this.displayTrigger = '';\n      }\n    }\n  }\n\n  /**\n   * Updated the form control value on optionClick event\n   *\n   * @param {SelectOptionComponent} selectedOption option clicked\n   * @param {boolean} selected if the option as selected or unselected\n   */\n  private updateSelectedValues(\n    selectedOption: SelectOptionComponent,\n    selected: boolean\n  ): void {\n    if (selected) {\n      if (!this.multiselect) {\n        // Reset any other selected option\n        this.optionList.forEach((option: SelectOptionComponent) => {\n          if (selectedOption.value !== option.value) {\n            option.selected = false;\n          }\n        });\n        this.selectedValues = [selectedOption.value];\n      } else {\n        this.selectedValues = [...this.selectedValues, selectedOption.value];\n      }\n    } else {\n      const index = this.selectedValues?.indexOf(selectedOption.value) ?? 0;\n      this.selectedValues?.splice(index, 1);\n    }\n  }\n\n  /**\n   * Map select option list label if exists, otherwise value\n   *\n   * @param selectedValues selected values\n   * @returns mapped values\n   */\n  getValuesLabel(selectedValues: any[]) {\n    let values = this.optionList.filter((val: any) => {\n      if (selectedValues.find((selVal) => val.value == selVal)) {\n        return val;\n      }\n    });\n    return (values = values.map((val: any) => {\n      if (val.label) {\n        return val.label;\n      } else {\n        return val.value;\n      }\n    }));\n  }\n\n  // SELECT DISPLAY LOGIC //\n  /**\n   * Opens or closes the list when the trigger component is clicked (+ make the corresponding output emissions)\n   */\n  openSelectPanel() {\n    //Do nothing if the box is disabled\n    if (this.disabled) {\n      return;\n    }\n    // Open the box + emit outputs\n    if (this.listBoxFocused) {\n      this.closeSelectPanel();\n    }\n    //Close the box + emit outputs\n    else {\n      if (!this.listBoxFocused) {\n        this.listBoxFocused = true;\n        // We create an overlay for the displayed select as done for UI menu\n        this.overlayRef = this.overlay.create({\n          hasBackdrop: false,\n          // close autocomplete on user scroll - default behavior, could be changed\n          scrollStrategy: this.overlay.scrollStrategies.close(),\n          // We position the displayed autocomplete taking current directive host element as reference\n          positionStrategy: this.overlay\n            .position()\n            .flexibleConnectedTo(\n              this.el.nativeElement.parentElement ?? this.el.nativeElement\n            )\n            .withPositions([\n              {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'top',\n                offsetX: 0,\n                offsetY: 5,\n              },\n              {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'bottom',\n                offsetX: 0,\n                offsetY: -5,\n              },\n            ]),\n          minWidth:\n            this.el.nativeElement.parentElement?.clientWidth &&\n            this.el.nativeElement.parentElement?.clientWidth !== 0\n              ? this.el.nativeElement.parentElement?.clientWidth\n              : this.el.nativeElement.clientWidth,\n        });\n        // Create the template portal for the select items using the reference of the element with the select directive\n        const templatePortal = new TemplatePortal(\n          this.optionPanel,\n          this.viewContainerRef\n        );\n        // Attach it to our overlay\n        this.overlayRef.attach(templatePortal);\n        // We add the needed classes to create the animation on select display\n        if (this.applyAnimationTimeoutListener) {\n          clearTimeout(this.applyAnimationTimeoutListener);\n        }\n        this.applyAnimationTimeoutListener = setTimeout(() => {\n          this.applySelectListDisplayAnimation(true);\n        }, 0);\n        // Subscribe to all actions that close the select (outside click, item click, any other overlay detach)\n        this.selectClosingActionsSubscription =\n          this.selectClosingActions().subscribe(\n            // If so, destroy select\n            () => this.closeSelectPanel()\n          );\n        this.opened.emit();\n      }\n    }\n  }\n\n  /** Closes the listbox if a click is made outside of the component */\n  private closeSelectPanel() {\n    if (!this.overlayRef || !this.listBoxFocused) {\n      return;\n    }\n    // Unsubscribe to our close action subscription\n    this.selectClosingActionsSubscription.unsubscribe();\n    this.listBoxFocused = false;\n    this.closed.emit();\n    // We remove the needed classes to create the animation on select close\n    this.applySelectListDisplayAnimation(false);\n    // Detach the previously created overlay for the select\n    if (this.closePanelTimeoutListener) {\n      clearTimeout(this.closePanelTimeoutListener);\n    }\n    this.closePanelTimeoutListener = setTimeout(() => {\n      this.overlayRef.detach();\n      this.searchControl.setValue('');\n      this.triggerUIChange$.next(true);\n    }, 100);\n  }\n\n  /**\n   * Actions linked to the destruction of the current displayed select\n   *\n   * @returns Observable of actions\n   */\n  private selectClosingActions(): Observable<Event | void> {\n    const detachment$ = this.overlayRef.detachments();\n    return merge(detachment$);\n  }\n\n  /**\n   * Apply animation to displayed selectList\n   *\n   * @param toDisplay If the selectList is going to be displayed or not\n   */\n  private applySelectListDisplayAnimation(toDisplay: boolean) {\n    // The overlayElement is the immediate parent element containing the selectList list,\n    // therefor we want the immediate child in where we would apply the classes\n    const selectList = this.overlayRef.overlayElement.querySelector('div');\n    if (toDisplay) {\n      this.renderer.addClass(selectList, 'translate-y-0');\n      this.renderer.addClass(selectList, 'opacity-100');\n    } else {\n      this.renderer.removeClass(selectList, 'translate-y-0');\n      this.renderer.removeClass(selectList, 'opacity-100');\n    }\n  }\n\n  /**\n   * Filter the current option list by the given search value\n   *\n   * @param searchValue value to filter current option list\n   */\n  private filterOptionList(searchValue: string) {\n    this.loading = true;\n    // Recursively set option display input, based on if the option is a group or not\n    const setOptionVisibility = (options: QueryList<SelectOptionComponent>) => {\n      options.forEach((option) => {\n        if (option.options.length) {\n          setOptionVisibility(option.options);\n          option.display = option.options.toArray().some((o) => o.display);\n        } else {\n          const regExTest = new RegExp(searchValue, 'gmi');\n          if (regExTest.test(option.label)) {\n            option.display = true;\n          } else {\n            option.display = false;\n          }\n        }\n      });\n    };\n    setOptionVisibility(this.optionList);\n    this.loading = false;\n    this.triggerUIChange$.next(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.applyAnimationTimeoutListener) {\n      clearTimeout(this.applyAnimationTimeoutListener);\n    }\n    if (this.closePanelTimeoutListener) {\n      clearTimeout(this.closePanelTimeoutListener);\n    }\n    if (this.clickOutsideListener) {\n      this.clickOutsideListener();\n    }\n    if (this.selectClosingActionsSubscription) {\n      this.selectClosingActionsSubscription.unsubscribe();\n    }\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  width: 100%;\n  min-width: 100px;\n  display: block;\n}\n\n//Non selectable item with the mouth\n.non_selectable {\n  -moz-user-select: -moz-none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n  user-select: none;\n}\n\n// Text of the trigger goes little on the top-left corner of the button\n.corner_label {\n  font-size: 0.5rem !important;\n}\n\n.default {\n  max-width: calc(100% - 26px);\n}\n",
                    "styleUrl": "./select-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Ui Select constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "shadowDomService",
                        "type": "ShadowDomService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 119,
                "rawdescription": "\n\nUi Select constructor\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 4095,
                            "end": 4102,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "control"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 4089,
                            "end": 4094,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>host element NgControl instance</p>\n"
                    },
                    {
                        "name": {
                            "pos": 4147,
                            "end": 4149,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "el"
                        },
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 4141,
                            "end": 4146,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Host element reference</p>\n"
                    },
                    {
                        "name": {
                            "pos": 4185,
                            "end": 4193,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 4179,
                            "end": 4184,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Renderer2</p>\n"
                    },
                    {
                        "name": {
                            "pos": 4216,
                            "end": 4232,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "viewContainerRef"
                        },
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 4210,
                            "end": 4215,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>ViewContainerRef</p>\n"
                    },
                    {
                        "name": {
                            "pos": 4262,
                            "end": 4269,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "overlay"
                        },
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 4256,
                            "end": 4261,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Overlay</p>\n"
                    },
                    {
                        "name": {
                            "pos": 4290,
                            "end": 4306,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "shadowDomService"
                        },
                        "type": "ShadowDomService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 4284,
                            "end": 4289,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>shadow dom service to handle the current host of the component</p>\n"
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "OnChanges",
                "AfterContentInit",
                "OnDestroy"
            ],
            "accessors": {
                "emptyList": {
                    "name": "emptyList",
                    "getSignature": {
                        "name": "emptyList",
                        "type": "",
                        "returnType": "",
                        "line": 114,
                        "rawdescription": "",
                        "description": "",
                        "jsdoctags": [
                            {
                                "pos": 3804,
                                "end": 3897,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 3805,
                                    "end": 3812,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>if current option list is empty by option number or option display number by search</p>\n"
                            }
                        ]
                    }
                }
            },
            "templateData": "<!-- Wrapper of the entire select menu, has focusout event -->\n<button\n  [class]=\"\n    'min-h-[32px] relative flex justify-between items-center w-full cursor-default rounded-md px-3 text-left shadow-sm ring-1 ring-inset ring-gray-300 sm:leading-6 overflow-hidden ' +\n    extraClasses!\n  \"\n  (click)=\"openSelectPanel()\"\n  [ngClass]=\"{\n    'non_selectable text-gray-400': disabled,\n    'bg-white text-gray-900 focus:outline-none cursor-pointer': !disabled\n  }\"\n>\n  <ng-container *ngIf=\"customTemplate\">\n    <ng-container\n      *ngTemplateOutlet=\"\n        customTemplate.template;\n        context: customTemplate.context\n      \"\n    ></ng-container>\n  </ng-container>\n  <div class=\"default flex-1\">\n    <ng-container *ngIf=\"!customTemplate\">\n      <ng-container *ngIf=\"!displayTrigger\">\n        <span class=\"block truncate text-sm text-neutral-400\">{{\n          placeholder\n        }}</span>\n      </ng-container>\n      <ng-container *ngIf=\"displayTrigger || !placeholder\">\n        <span class=\"block truncate text-sm\">{{ displayTrigger }}</span>\n      </ng-container>\n    </ng-container>\n  </div>\n\n  <!-- icon at right of the button -->\n  <span class=\"pointer-events-none flex items-center\">\n    <svg\n      class=\"h-5 w-5 text-gray-400\"\n      viewBox=\"0 0 20 20\"\n      fill=\"currentColor\"\n      aria-hidden=\"true\"\n    >\n      <path\n        fill-rule=\"evenodd\"\n        d=\"M10 3a.75.75 0 01.55.24l3.25 3.5a.75.75 0 11-1.1 1.02L10 4.852 7.3 7.76a.75.75 0 01-1.1-1.02l3.25-3.5A.75.75 0 0110 3zm-3.76 9.2a.75.75 0 011.06.04l2.7 2.908 2.7-2.908a.75.75 0 111.1 1.02l-3.25 3.5a.75.75 0 01-1.1 0l-3.25-3.5a.75.75 0 01.04-1.06z\"\n        clip-rule=\"evenodd\"\n      />\n    </svg>\n  </span>\n</button>\n<!-- Listbox showing when focus on the component, change in function of inputs -->\n<ng-template #optionPanel>\n  <div\n    id=\"optionsContainer\"\n    class=\"relative w-full shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm ease-in-out duration-100 rounded-md overflow-hidden\"\n  >\n    <!-- Search -->\n    <ng-container *ngIf=\"filterable\">\n      <ng-container *ngTemplateOutlet=\"search\"></ng-container>\n    </ng-container>\n    <ul\n      id=\"optionList\"\n      [ngClass]=\"{\n        'max-h-36 py-1': !isGraphQlSelect,\n        'max-h-52': isGraphQlSelect\n      }\"\n      class=\"w-full overflow-auto bg-white text-base\"\n    >\n      <!-- Display the elements of the list -->\n      <ng-content></ng-content>\n      <!-- Display a message to indicate the list is empty -->\n      <div\n        *ngIf=\"emptyList\"\n        class=\"h-24 flex flex-col gap-2 justify-center items-center\"\n      >\n        <ui-icon icon=\"error_outline\" variant=\"grey\"></ui-icon>\n        <p class=\"text-neutral-400 font-medium\">\n          {{ 'common.noOptions' | translate }}\n        </p>\n      </div>\n    </ul>\n  </div>\n</ng-template>\n<!-- Search template -->\n<ng-template #search>\n  <div\n    class=\"w-full flex shadow-sm !sticky top-0 border-b-gray-300 !h-auto z-10 !bg-white !p-0\"\n  >\n    <input\n      class=\"bg-transparent block w-full px-3 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6 border-0\"\n      [formControl]=\"searchControl\"\n      [placeholder]=\"'common.placeholder.search' | translate\"\n      type=\"text\"\n      #searchInput\n    />\n    <ui-spinner\n      [size]=\"'medium'\"\n      *ngIf=\"loading\"\n      class=\"items-center\"\n    ></ui-spinner>\n    <ui-button\n      [isIcon]=\"true\"\n      icon=\"close\"\n      (click)=\"searchControl.setValue('')\"\n      [uiTooltip]=\"'common.close' | translate\"\n    ></ui-button>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "SelectOptionComponent",
            "id": "component-SelectOptionComponent-0a609c165800375a68c12c8efcc179927cbac7a82ee9d389551e4f963bcaf02e5390784fd269434ef27a7fe07878071c405269bcfe7dec062caee44e5242ae71",
            "file": "libs/ui/src/lib/select-menu/components/select-option.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-select-option",
            "styleUrls": [
                "./select-option.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select-option.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOption disabled",
                    "description": "<p>Option disabled</p>\n",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isGroup",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOption group",
                    "description": "<p>Option group</p>\n",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOption selected",
                    "description": "<p>Option selected</p>\n",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOption value",
                    "description": "<p>Option value</p>\n",
                    "line": 23,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "optionClick",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOption click event emitter",
                    "description": "<p>Option click event emitter</p>\n",
                    "line": 31,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "display",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>If current option content should be displayed or not in the UI</p>\n",
                    "line": 40,
                    "rawdescription": "\nIf current option content should be displayed or not in the UI"
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Option label</p>\n",
                    "line": 38,
                    "rawdescription": "\nOption label"
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<SelectOptionComponent>",
                    "optional": false,
                    "description": "<p>List of options</p>\n",
                    "line": 35,
                    "rawdescription": "\nList of options",
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "undefined"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangeFunction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmit optionClick output and updates option selected status\n",
                    "description": "<p>Emit optionClick output and updates option selected status</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>UI Select option component</p>\n",
            "rawdescription": "\n\nUI Select option component\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ContentChildren,\n  forwardRef,\n  QueryList,\n  ElementRef,\n  AfterViewInit,\n} from '@angular/core';\n\n/**\n * UI Select option component\n */\n@Component({\n  selector: 'ui-select-option',\n  templateUrl: './select-option.component.html',\n  styleUrls: ['./select-option.component.scss'],\n})\nexport class SelectOptionComponent implements AfterViewInit {\n  /** Option value */\n  @Input() value!: any;\n  /** Option selected */\n  @Input() selected = false;\n  /** Option group */\n  @Input() isGroup = false;\n  /** Option disabled */\n  @Input() disabled = false;\n  /** Option click event emitter */\n  @Output() optionClick = new EventEmitter<boolean>();\n\n  /** List of options */\n  @ContentChildren(forwardRef(() => SelectOptionComponent))\n  options!: QueryList<SelectOptionComponent>;\n\n  /** Option label */\n  label!: string;\n  /** If current option content should be displayed or not in the UI */\n  display = true;\n\n  /**\n   *\n   * UI Select option constructor\n   *\n   * @param el ElementRef\n   */\n  constructor(private el: ElementRef) {}\n\n  ngAfterViewInit(): void {\n    this.label =\n      this.el.nativeElement\n        .querySelector('span')\n        .firstChild?.textContent?.trim() ?? '';\n  }\n\n  /**\n   * Emit optionClick output and updates option selected status\n   */\n  onChangeFunction(): void {\n    if (this.isGroup || this.disabled) {\n      return;\n    }\n    this.selected = !this.selected;\n    this.optionClick.emit(this.selected);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./select-option.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>UI Select option constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "rawdescription": "\n\n\nUI Select option constructor\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1026,
                            "end": 1028,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "el"
                        },
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1020,
                            "end": 1025,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>ElementRef</p>\n"
                    }
                ]
            },
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<ng-container *ngIf=\"display\">\n  <li\n    [ngClass]=\"{\n      'bg-primary-300 text-white': !isGroup && selected,\n      'cursor-pointer hover:bg-primary-200 hover:text-white flex items-center text-gray-900 py-[5px] text-sm':\n        !isGroup,\n      'text-gray-400 text-xs font-semibold pt-[5px]': isGroup\n    }\"\n    (click)=\"onChangeFunction()\"\n    class=\"px-2 relative w-full justify-between\"\n  >\n    <!-- Text, changes if selected -->\n    <span class=\"font-normal truncate\">\n      <ng-content></ng-content>\n    </span>\n\n    <ng-content select=\"icon\"></ng-content>\n  </li>\n</ng-container>\n"
        },
        {
            "name": "SidenavContainerComponent",
            "id": "component-SidenavContainerComponent-a6b7b1e5e10d9f7244a2273ffe73a7fd8d610a4f6049cdc2d67e544e94d9c8ddecbb80e48707ddea5c78bdb1b38c6b0f56c4330afc4a6b43f164c996b36c7e77",
            "file": "libs/ui/src/lib/sidenav/sidenav-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-sidenav-container",
            "styleUrls": [
                "./sidenav-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sidenav-container.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "animationClasses",
                    "defaultValue": "['transition-all', 'duration-500', 'ease-in-out'] as const",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Array of classes for animations.</p>\n",
                    "line": 56,
                    "rawdescription": "\nArray of classes for animations."
                },
                {
                    "name": "contentContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "<p>Reference to the content container.</p>\n",
                    "line": 36,
                    "rawdescription": "\nReference to the content container.",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'contentContainer'"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "contentWrapper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "<p>Reference to the content wrapper.</p>\n",
                    "line": 40,
                    "rawdescription": "\nReference to the content wrapper.",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'contentWrapper'"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Subject to emit when the component is destroyed.</p>\n",
                    "line": 54,
                    "rawdescription": "\nSubject to emit when the component is destroyed.",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "el",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "elementRef",
                    "line": 92,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "fixedWrapperActionExist",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Should display fixed wrapper at bottom</p>\n",
                    "line": 58,
                    "rawdescription": "\nShould display fixed wrapper at bottom"
                },
                {
                    "name": "fixedWrapperActions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": true,
                    "description": "<p>Reference to the fixed wrapper actions.</p>\n",
                    "line": 43,
                    "rawdescription": "\nReference to the fixed wrapper actions.",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'fixedWrapperActions', {read: ViewContainerRef}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "mode",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SidenavTypes[]",
                    "optional": false,
                    "description": "<p>Array indicating the mode of each side navigation menu.</p>\n",
                    "line": 48,
                    "rawdescription": "\nArray indicating the mode of each side navigation menu.",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "position",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SidenavPositionTypes[]",
                    "optional": false,
                    "description": "<p>Array indicating the position of each side navigation menu.</p>\n",
                    "line": 50,
                    "rawdescription": "\nArray indicating the position of each side navigation menu.",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showSidenav",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean[]",
                    "optional": false,
                    "description": "<p>Array indicating whether each side navigation menu should be shown.</p>\n",
                    "line": 46,
                    "rawdescription": "\nArray indicating whether each side navigation menu should be shown.",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sidenav",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ElementRef>",
                    "optional": false,
                    "description": "<p>A list of side navigation menus.</p>\n",
                    "line": 38,
                    "rawdescription": "\nA list of side navigation menus.",
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'sidenav'"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "transitionsTimeoutListener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NodeJS.Timeout",
                    "optional": false,
                    "description": "<p>Timeout to transitions</p>\n",
                    "line": 60,
                    "rawdescription": "\nTimeout to transitions",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "uiSidenavDirective",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<SidenavDirective>",
                    "optional": false,
                    "description": "<p>A list of SidenavDirective children.</p>\n",
                    "line": 34,
                    "rawdescription": "\nA list of SidenavDirective children.",
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "SidenavDirective"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "visible",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean[]",
                    "optional": false,
                    "description": "<p>Array indicating whether each side navigation menu is visible.</p>\n",
                    "line": 52,
                    "rawdescription": "\nArray indicating whether each side navigation menu is visible.",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onResize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the drawer height and width on resize\n",
                    "description": "<p>Set the drawer height and width on resize</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "resolveSidenavClasses",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nResolve sidenav classes by given properties\n\n",
                    "description": "<p>Resolve sidenav classes by given properties</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5923,
                                "end": 5928,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5917,
                                "end": 5922,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>of the sidenav</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5950,
                                "end": 5957,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>classes for the sidenav depending on it&#39;s properties</p>\n"
                        }
                    ]
                },
                {
                    "name": "setRightSidenavHeight",
                    "args": [
                        {
                            "name": "sidenavElement",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sidenavDirective",
                            "type": "SidenavDirective",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nrecalculates right sidenav height\n\n",
                    "description": "<p>recalculates right sidenav height</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5347,
                                "end": 5361,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "sidenavElement"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5341,
                                "end": 5346,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>right sidenav element to recalculate the size of</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5423,
                                "end": 5439,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "sidenavDirective"
                            },
                            "type": "SidenavDirective",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5417,
                                "end": 5422,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>sidenavDirective to check if the sidenav is at the right side</p>\n"
                        }
                    ]
                },
                {
                    "name": "setTransitionForContent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the transition properties to the content adjacent to the sidenav\n",
                    "description": "<p>Set the transition properties to the content adjacent to the sidenav</p>\n",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the drawer height and width on resize\n",
                    "description": "<p>Set the drawer height and width on resize</p>\n",
                    "line": 71
                }
            ],
            "standalone": false,
            "imports": [],
            "description": "<p>UI Sidenav component\nSidenav is a UI component that displays a drawer on the side of the screen.</p>\n",
            "rawdescription": "\n\nUI Sidenav component\nSidenav is a UI component that displays a drawer on the side of the screen.\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  HostListener,\n  OnDestroy,\n  QueryList,\n  Renderer2,\n  ViewChild,\n  ViewChildren,\n  ViewContainerRef,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { SidenavDirective } from './sidenav.directive';\nimport { Subject, takeUntil } from 'rxjs';\nimport { SidenavPositionTypes, SidenavTypes } from './types/sidenavs';\nimport { filter } from 'rxjs/operators';\nimport { UILayoutService } from './layout/layout.service';\n\n/**\n * UI Sidenav component\n * Sidenav is a UI component that displays a drawer on the side of the screen.\n */\n@Component({\n  selector: 'ui-sidenav-container',\n  templateUrl: './sidenav-container.component.html',\n  styleUrls: ['./sidenav-container.component.scss'],\n})\nexport class SidenavContainerComponent implements AfterViewInit, OnDestroy {\n  /** A list of SidenavDirective children. */\n  @ContentChildren(SidenavDirective)\n  uiSidenavDirective!: QueryList<SidenavDirective>;\n  /** Reference to the content container. */\n  @ViewChild('contentContainer') contentContainer!: ElementRef;\n  /** A list of side navigation menus. */\n  @ViewChildren('sidenav') sidenav!: QueryList<ElementRef>;\n  /** Reference to the content wrapper. */\n  @ViewChild('contentWrapper') contentWrapper!: ElementRef;\n  /** Reference to the fixed wrapper actions. */\n  @ViewChild('fixedWrapperActions', { read: ViewContainerRef })\n  fixedWrapperActions?: ViewContainerRef;\n\n  /** Array indicating whether each side navigation menu should be shown. */\n  public showSidenav: boolean[] = [];\n  /** Array indicating the mode of each side navigation menu. */\n  public mode: SidenavTypes[] = [];\n  /** Array indicating the position of each side navigation menu. */\n  public position: SidenavPositionTypes[] = [];\n  /** Array indicating whether each side navigation menu is visible. */\n  public visible: boolean[] = [];\n  /** Subject to emit when the component is destroyed. */\n  private destroy$ = new Subject<void>();\n  /** Array of classes for animations. */\n  animationClasses = ['transition-all', 'duration-500', 'ease-in-out'] as const;\n  /** Should display fixed wrapper at bottom */\n  fixedWrapperActionExist = false;\n  /** Timeout to transitions */\n  private transitionsTimeoutListener!: NodeJS.Timeout;\n\n  /** @returns height of element */\n  get height() {\n    return `${this.el.nativeElement.offsetHeight}px`;\n  }\n\n  /**\n   * Set the drawer height and width on resize\n   */\n  @HostListener('window:resize', ['$event'])\n  onResize() {\n    this.uiSidenavDirective.forEach((sidenavDirective, index) => {\n      this.setRightSidenavHeight(\n        this.sidenav.get(index)?.nativeElement,\n        sidenavDirective\n      );\n    });\n  }\n\n  /**\n   * UI Sidenav constructor\n   *\n   * @param renderer Renderer2\n   * @param cdr ChangeDetectorRef\n   * @param el elementRef\n   * @param router Angular router\n   * @param layoutService Layout service that handles view injection of the fixed wrapper actions if exists\n   */\n  constructor(\n    private renderer: Renderer2,\n    private cdr: ChangeDetectorRef,\n    public el: ElementRef,\n    private router: Router,\n    private layoutService: UILayoutService\n  ) {}\n\n  ngAfterViewInit() {\n    this.layoutService.fixedWrapperActions$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((view) => {\n        if (view && this.fixedWrapperActions) {\n          this.fixedWrapperActionExist = true;\n          this.fixedWrapperActions.createEmbeddedView(view);\n        } else {\n          if (this.fixedWrapperActions) {\n            this.fixedWrapperActionExist = false;\n            this.fixedWrapperActions.clear();\n          }\n        }\n      });\n    // Listen to router events to auto scroll to top of the view\n    this.router.events\n      .pipe(\n        filter((event) => event instanceof NavigationEnd),\n        takeUntil(this.destroy$)\n      )\n      .subscribe(() => {\n        this.contentWrapper.nativeElement.scroll({\n          top: 0,\n          left: 0,\n          behavior: 'smooth',\n        });\n      });\n    // Initialize width and show sidenav value\n    this.uiSidenavDirective.forEach((sidenavDirective, index) => {\n      this.showSidenav[index] = sidenavDirective.visible\n        ? sidenavDirective.opened\n        : false;\n      this.mode[index] = sidenavDirective.mode;\n      this.position[index] = sidenavDirective.position;\n      this.setRightSidenavHeight(\n        this.sidenav.get(index)?.nativeElement,\n        sidenavDirective\n      );\n      this.cdr.detectChanges();\n      this.renderer.appendChild(\n        this.sidenav.get(index)?.nativeElement.querySelector('div'),\n        sidenavDirective.el.nativeElement\n      );\n      sidenavDirective.openedChange\n        .pipe(takeUntil(this.destroy$))\n        .subscribe((opened: boolean) => {\n          this.showSidenav[index] = sidenavDirective.visible ? opened : false;\n          // Change the mode if it has changed since last opening/closure\n          this.mode[index] = sidenavDirective.mode;\n        });\n    });\n\n    //Then set the transitions\n    if (this.transitionsTimeoutListener) {\n      clearTimeout(this.transitionsTimeoutListener);\n    }\n    this.transitionsTimeoutListener = setTimeout(() => {\n      this.setTransitionForContent();\n    }, 0);\n  }\n\n  /**\n   * recalculates right sidenav height\n   *\n   * @param sidenavElement right sidenav element to recalculate the size of\n   * @param sidenavDirective sidenavDirective to check if the sidenav is at the right side\n   */\n  setRightSidenavHeight(\n    sidenavElement: any,\n    sidenavDirective: SidenavDirective\n  ) {\n    if (sidenavDirective.position === 'end') {\n      this.renderer.removeClass(sidenavElement, 'h-full');\n      this.renderer.setStyle(\n        sidenavElement,\n        'height',\n        `${this.el.nativeElement.clientHeight}px`\n      );\n    }\n  }\n\n  /**\n   * Resolve sidenav classes by given properties\n   *\n   * @param index of the sidenav\n   * @returns classes for the sidenav depending on it's properties\n   */\n  resolveSidenavClasses(index: number): string[] {\n    const classes = [];\n    if (this.position[index] === 'start') {\n      classes.push(\"data-[sidenav-show='false']:-translate-x-full\");\n      classes.push(\"data-[sidenav-show='false']:w-0\");\n      classes.push('z-[1002]');\n      classes.push('w-60');\n      classes.push('border-r');\n      classes.push('border-gray-200');\n    }\n    if (this.mode[index] === 'over') {\n      classes.push('h-full');\n      classes.push('left-0');\n      classes.push('top-0');\n      classes.push('fixed');\n    }\n    if (this.position[index] === 'end') {\n      classes.push('absolute');\n      classes.push('right-0');\n      classes.push(\"data-[sidenav-show='false']:translate-x-full\");\n      classes.push('z-[997]');\n      classes.push(\n        'shadow-[0_4px_12px_0_rgba(0,0,0,0.07),_0_2px_4px_rgba(0,0,0,0.05)]'\n      );\n    }\n    return classes;\n  }\n\n  /**\n   * Set the transition properties to the content adjacent to the sidenav\n   */\n  private setTransitionForContent() {\n    this.animationClasses.forEach((aClass) => {\n      this.renderer.addClass(this.contentContainer.nativeElement, aClass);\n      this.sidenav.forEach((side) => {\n        this.renderer.addClass(side.nativeElement, aClass);\n      });\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.transitionsTimeoutListener) {\n      clearTimeout(this.transitionsTimeoutListener);\n    }\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".clsNotification {\n  position: relative;\n}\n",
                    "styleUrl": "./sidenav-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>UI Sidenav constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "layoutService",
                        "type": "UILayoutService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 78,
                "rawdescription": "\n\nUI Sidenav constructor\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 2811,
                            "end": 2819,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2805,
                            "end": 2810,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Renderer2</p>\n"
                    },
                    {
                        "name": {
                            "pos": 2842,
                            "end": 2845,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "cdr"
                        },
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2836,
                            "end": 2841,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>ChangeDetectorRef</p>\n"
                    },
                    {
                        "name": {
                            "pos": 2876,
                            "end": 2878,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "el"
                        },
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2870,
                            "end": 2875,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>elementRef</p>\n"
                    },
                    {
                        "name": {
                            "pos": 2902,
                            "end": 2908,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "router"
                        },
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2896,
                            "end": 2901,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Angular router</p>\n"
                    },
                    {
                        "name": {
                            "pos": 2936,
                            "end": 2949,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "layoutService"
                        },
                        "type": "UILayoutService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2930,
                            "end": 2935,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Layout service that handles view injection of the fixed wrapper actions if exists</p>\n"
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "accessors": {
                "height": {
                    "name": "height",
                    "getSignature": {
                        "name": "height",
                        "type": "",
                        "returnType": "",
                        "line": 63,
                        "rawdescription": "",
                        "description": "",
                        "jsdoctags": [
                            {
                                "pos": 2339,
                                "end": 2366,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 2340,
                                    "end": 2347,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>height of element</p>\n"
                            }
                        ]
                    }
                }
            },
            "templateData": "<!-- Never set as relative, while we use kendo tile layouts for widget grid\n  todo(2.1.x): check if h-full should be removed -->\n<div class=\"w-full flex h-full overflow-y-auto\">\n  <!-- SIDENAV CONTENT -->\n  <ng-container *ngFor=\"let sidenav of uiSidenavDirective; let i = index\">\n    <!-- ngStyle prevent the left sidenav to have a fixed height -->\n    <div\n      #sidenav\n      class=\"will-change-transform overflow-y-auto bg-white translate-x-0\"\n      [attr.data-sidenav-show]=\"showSidenav[i]\"\n      [ngClass]=\"resolveSidenavClasses(i)\"\n      [ngStyle]=\"(i > 0 && { height: height }) || null\"\n    >\n      <div class=\"flex flex-col h-full\"></div>\n    </div>\n  </ng-container>\n  <!-- CONTENT -->\n  <div class=\"flex-1 overflow-clip\" #contentContainer>\n    <div\n      [ngClass]=\"{\n        'visible bg-black opacity-50': showSidenav[0] && mode[0] === 'over',\n        'invisible bg-transparent': !showSidenav[0] || mode[0] === 'side'\n      }\"\n      class=\"block w-full overflow-y-auto min-h-full transition-visibility duration-500 transition-all ease-in-out absolute inset-0 pointer-events-none z-[1001]\"\n    ></div>\n    <div\n      [ngClass]=\"{ 'pb-[64px]': fixedWrapperActionExist }\"\n      id=\"appPageContainer\"\n      class=\"py-[32px] overflow-y-auto overflow-x-hidden h-full px-[24px] clsNotification\"\n      #contentWrapper\n    >\n      <ng-content select=\"content\"></ng-content>\n    </div>\n    <ng-template #fixedWrapperActions></ng-template>\n  </div>\n</div>\n"
        },
        {
            "name": "SliderComponent",
            "id": "component-SliderComponent-abf639ab63d17cb8913898323d1582d315cd1cce3429c2e34c59f1dd75c8ee361ea530cf3bb5032137010adaea570724e183b5e469e910f54073889dd5e67160",
            "file": "libs/ui/src/lib/slider/slider.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SliderComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "ui-slider",
            "styleUrls": [
                "./slider.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./slider.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "maxValue",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMaximum value of the slider\n",
                    "description": "<p>Maximum value of the slider</p>\n",
                    "line": 38,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "minValue",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMinimum value of the slider\n",
                    "description": "<p>Minimum value of the slider</p>\n",
                    "line": 34,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "step",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStep value of each tick\n",
                    "description": "<p>Step value of each tick</p>\n",
                    "line": 42,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bubbleStyle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>In order to define left position of the bubble linked to the slider</p>\n",
                    "line": 45,
                    "rawdescription": "\nIn order to define left position of the bubble linked to the slider"
                },
                {
                    "name": "bubbleToShow",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>In order to determine if bubble and ticks are to be shown</p>\n",
                    "line": 47,
                    "rawdescription": "\nIn order to determine if bubble and ticks are to be shown"
                },
                {
                    "name": "currentValue",
                    "defaultValue": "this.minValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Value of the slider</p>\n",
                    "line": 53,
                    "rawdescription": "\nValue of the slider"
                },
                {
                    "name": "onChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Function to handle value changes.</p>\n",
                    "line": 55,
                    "rawdescription": "\nFunction to handle value changes."
                },
                {
                    "name": "onTouch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Function to handle touch events.</p>\n",
                    "line": 57,
                    "rawdescription": "\nFunction to handle touch events."
                },
                {
                    "name": "range",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "<p>Slider range</p>\n",
                    "line": 51,
                    "rawdescription": "\nSlider range"
                },
                {
                    "name": "ticksToShow",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Boolean indicating whether to show ticks on the slider.</p>\n",
                    "line": 49,
                    "rawdescription": "\nBoolean indicating whether to show ticks on the slider."
                }
            ],
            "methodsClass": [
                {
                    "name": "createRange",
                    "args": [],
                    "optional": false,
                    "returnType": "number[]",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate a table from a certain range (in order to use a ngFor directive in html)\n\n",
                    "description": "<p>Create a table from a certain range (in order to use a ngFor directive in html)</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 4197,
                                "end": 4204,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>new array with given range</p>\n"
                        }
                    ]
                },
                {
                    "name": "hideSliderProperties",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input range is not in focus anymore, stop showing the ticks and bubble\n",
                    "description": "<p>When the input range is not in focus anymore, stop showing the ticks and bubble</p>\n"
                },
                {
                    "name": "hideTicks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen leaves hover the component, if bubble is not showing (no focus), strop displaying ticks\n",
                    "description": "<p>When leaves hover the component, if bubble is not showing (no focus), strop displaying ticks</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangeFunction",
                    "args": [
                        {
                            "name": "value",
                            "type": "EventTarget | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen value of input changes, calculates the position where the bubble is to go\n\n",
                    "description": "<p>When value of input changes, calculates the position where the bubble is to go</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3455,
                                "end": 3460,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "EventTarget | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3449,
                                "end": 3454,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The value from the slider</p>\n"
                        }
                    ]
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nListener for focusin event\n",
                    "description": "<p>Listener for focusin event</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'focusin', undefined"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "onFocusOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nListener for focusout event\n",
                    "description": "<p>Listener for focusout event</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'focusout', undefined"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "number",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRecord on change\n\n",
                    "description": "<p>Record on change</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2304,
                                "end": 2306,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "number",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "pos": 2298,
                                "end": 2303,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>event that took place</p>\n"
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRecord on touch\n\n",
                    "description": "<p>Record on touch</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2492,
                                "end": 2494,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "pos": 2486,
                                "end": 2491,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>event that took place</p>\n"
                        }
                    ]
                },
                {
                    "name": "showSliderProperties",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen focus on the input range, show bubble and ticks\n",
                    "description": "<p>When focus on the input range, show bubble and ticks</p>\n"
                },
                {
                    "name": "showTicks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen hover the component, show ticks (did not do in class cause would create conflicts with the focus thing)\n",
                    "description": "<p>When hover the component, show ticks (did not do in class cause would create conflicts with the focus thing)</p>\n"
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nActually change the value of value\n\n",
                    "description": "<p>Actually change the value of value</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2158,
                                "end": 2163,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2152,
                                "end": 2157,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>value to replace</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "focusin",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nListener for focusin event\n",
                    "description": "<p>Listener for focusin event</p>\n",
                    "line": 71
                },
                {
                    "name": "focusout",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nListener for focusout event\n",
                    "description": "<p>Listener for focusout event</p>\n",
                    "line": 63
                }
            ],
            "standalone": false,
            "imports": [],
            "description": "<p>UI Slider component\nSlider is a UI component that allows users to make selections from a range of values.</p>\n",
            "rawdescription": "\n\nUI Slider component\nSlider is a UI component that allows users to make selections from a range of values.\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  forwardRef,\n  HostListener,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n/**\n * UI Slider component\n * Slider is a UI component that allows users to make selections from a range of values.\n */\n@Component({\n  selector: 'ui-slider',\n  templateUrl: './slider.component.html',\n  styleUrls: ['./slider.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SliderComponent),\n      multi: true,\n    },\n  ],\n})\nexport class SliderComponent\n  implements OnInit, OnChanges, ControlValueAccessor\n{\n  /**\n   * Minimum value of the slider\n   */\n  @Input() minValue = 0;\n  /**\n   * Maximum value of the slider\n   */\n  @Input() maxValue = 100;\n  /**\n   * Step value of each tick\n   */\n  @Input() step = 1;\n\n  /**  In order to define left position of the bubble linked to the slider */\n  bubbleStyle = '';\n  /** In order to determine if bubble and ticks are to be shown */\n  bubbleToShow = false;\n  /** Boolean indicating whether to show ticks on the slider. */\n  ticksToShow = false;\n  /** Slider range */\n  range: number[] = [];\n  /** Value of the slider */\n  currentValue = this.minValue;\n  /** Function to handle value changes. */\n  onChange!: (value: number) => void;\n  /** Function to handle touch events. */\n  onTouch!: () => void;\n\n  /**\n   * Listener for focusout event\n   */\n  @HostListener('focusout', [])\n  onFocusOut() {\n    this.hideSliderProperties();\n  }\n\n  /**\n   * Listener for focusin event\n   */\n  @HostListener('focusin', [])\n  onFocus() {\n    this.showSliderProperties();\n  }\n\n  ngOnInit(): void {\n    this.range = this.createRange();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    // this.minValue = changes['minValue'].currentValue ?? this.minValue;\n    // this.maxValue = changes['maxValue'].currentValue ?? this.maxValue;\n    //If one of these two changes, update slider range\n    if (changes['minValue']?.currentValue || changes['maxValue'].currentValue) {\n      this.createRange();\n    }\n  }\n\n  /**\n   * Actually change the value of value\n   *\n   * @param value value to replace\n   */\n  writeValue(value: any): void {\n    this.onChangeFunction(value);\n  }\n\n  /**\n   * Record on change\n   *\n   * @param fn event that took place\n   */\n  registerOnChange(fn: (value: number) => void) {\n    if (!this.onChange) {\n      this.onChange = fn;\n    }\n  }\n\n  /**\n   * Record on touch\n   *\n   * @param fn event that took place\n   */\n  registerOnTouched(fn: () => void) {\n    if (!this.onTouch) {\n      this.onTouch = fn;\n    }\n  }\n\n  /**\n   * When focus on the input range, show bubble and ticks\n   */\n  showSliderProperties() {\n    this.bubbleToShow = true;\n    this.ticksToShow = true;\n  }\n\n  /**\n   * When the input range is not in focus anymore, stop showing the ticks and bubble\n   */\n  hideSliderProperties() {\n    this.bubbleToShow = false;\n    this.ticksToShow = false;\n  }\n\n  /**\n   * When hover the component, show ticks (did not do in class cause would create conflicts with the focus thing)\n   */\n  showTicks() {\n    this.ticksToShow = true;\n  }\n\n  /**\n   * When leaves hover the component, if bubble is not showing (no focus), strop displaying ticks\n   */\n  hideTicks() {\n    if (!this.bubbleToShow) {\n      this.ticksToShow = false;\n    }\n  }\n\n  /**\n   * When value of input changes, calculates the position where the bubble is to go\n   *\n   * @param value The value from the slider\n   */\n  onChangeFunction(value: EventTarget | null) {\n    const newValue = +((value as HTMLInputElement)?.value ?? value);\n    if (newValue !== this.currentValue) {\n      this.currentValue = isNaN(newValue) ? 0 : newValue;\n      const min = this.minValue;\n      const max = this.maxValue;\n      const newVal = Number(((this.currentValue - min) * 100) / (max - min));\n      if (this.onChange && this.onTouch) {\n        this.onChange(this.currentValue);\n        this.onTouch();\n      }\n      // Sorta magic numbers based on size of the native UI thumb\n      this.bubbleStyle = String(newVal) + '%';\n    }\n  }\n\n  /**\n   * Create a table from a certain range (in order to use a ngFor directive in html)\n   *\n   * @returns new array with given range\n   */\n  createRange(): number[] {\n    return new Array(this.maxValue - this.minValue + 1)\n      .fill(0)\n      .map((n, index) => index + 1);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "input[type='range'] {\n  //Disable the navigator appearance of sliders so we can custom it\n  -webkit-appearance: none;\n  appearance: none;\n  //Custom color background\n  background-repeat: no-repeat;\n  content: var(--value);\n  background-size: calc(\n      100% * ((var(--value) - var(--min)) / (var(--max) - var(--min)))\n    )\n    100%;\n}\n\ndiv input[type='range']::-webkit-slider-thumb {\n  -webkit-appearance: none;\n  height: 15px;\n  width: 15px;\n  position: relative;\n  //Forced to use here because I do not know a way to apply class directly in html to the thumb\n  @apply z-50 rounded-full bg-primary-400 hover:cursor-grab active:cursor-grabbing shadow-md transition-colors;\n}\n\ndiv.min-value input[type='range']::-webkit-slider-thumb {\n  -webkit-appearance: none;\n  height: 15px;\n  width: 15px;\n  position: relative;\n  //Forced to use here because I do not know a way to apply class directly in html to the thumb\n  @apply z-50 rounded-full bg-gray-800 hover:cursor-grab active:cursor-grabbing shadow-md transition-colors;\n}\n\n// The thumb disappears when the component is on focus\ndiv.relative:focus-within input[type='range']::-webkit-slider-thumb {\n  -webkit-appearance: none;\n  height: 0px;\n  width: 0px;\n}\n\ninput[type='range']::-webkit-slider-runnable-track {\n  -webkit-appearance: none;\n  box-shadow: none;\n  border: none;\n  background: transparent;\n}\n\n.ticks {\n  line-height: 1.2rem;\n  font-size: 0.75rem;\n  transform: scale(2, 0.3);\n  position: relative;\n}\n\n.non_selectable {\n  -moz-user-select: -moz-none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n  user-select: none;\n}\n",
                    "styleUrl": "./slider.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit",
                "OnChanges",
                "ControlValueAccessor"
            ],
            "templateData": "<!-- Component wrapper -->\n<div\n  class=\"relative\"\n  [ngClass]=\"{\n    'min-value': currentValue === minValue\n  }\"\n  (mouseover)=\"showTicks()\"\n  (mouseout)=\"hideTicks()\"\n>\n  <!-- Bubble -->\n  <span\n    [ngStyle]=\"{ left: bubbleStyle }\"\n    [ngClass]=\"{\n      block: bubbleToShow,\n      hidden: !bubbleToShow,\n      'bg-gray-400 opacity-80': currentValue === minValue,\n      'bg-primary-400': currentValue !== minValue\n    }\"\n    class=\"transition-all duration-200 absolute px-2 -translate-x-2/4 -translate-y-3/4 text-white rounded-lg\"\n    >{{ currentValue }}</span\n  >\n  <!-- Actual input range -->\n  <input\n    name=\"slider\"\n    style=\"--value:{{ currentValue }}; --min:{{ minValue }}; --max:{{\n      maxValue\n    }}\"\n    class=\"w-full h-1 bg-gray-300 focus:bg-gray-400 bg-gradient-to-r from-primary-400 to-primary-400\"\n    type=\"range\"\n    min=\"{{ minValue }}\"\n    max=\"{{ maxValue }}\"\n    value=\"{{ currentValue }}\"\n    [step]=\"step\"\n    (input)=\"onChangeFunction($event.target)\"\n  />\n  <!-- Ticks placement + appearance -->\n  <div\n    [ngClass]=\"{\n      flex: ticksToShow,\n      hidden: !ticksToShow\n    }\"\n    class=\"block absolute w-full z-10 pointer-events-none transition-all duration-200 justify-between -translate-y-full non_selectable\"\n  >\n    <!-- Ticks definition -->\n    <div\n      *ngFor=\"let tick of range\"\n      class=\"ticks pointer-events-none non_selectable z-20\"\n    >\n      |\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "SnackbarComponent",
            "id": "component-SnackbarComponent-2f97281560e36816916f35bf556bf1a0d8f4d9f26b97f666739497ca19a64702249cd147be87abdd6ab4bef2cf5f176a7b1e06d3e48ee532540d2708c298f10d",
            "file": "libs/ui/src/lib/snackbar/snackbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-snackbar",
            "styleUrls": [
                "./snackbar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./snackbar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "actionComplete",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEvent emitter for when an action is completed.",
                    "description": "<p>Event emitter for when an action is completed.</p>\n",
                    "line": 29,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The action to perform.</p>\n",
                    "line": 42,
                    "rawdescription": "\nThe action to perform."
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<SnackBarData>",
                    "optional": false,
                    "description": "<p>The data for the snack bar.</p>\n",
                    "line": 34,
                    "rawdescription": "\nThe data for the snack bar."
                },
                {
                    "name": "displaySnackBar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Boolean indicating whether to display the snack bar.</p>\n",
                    "line": 40,
                    "rawdescription": "\nBoolean indicating whether to display the snack bar."
                },
                {
                    "name": "durationResolver",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Function to resolve after a certain duration.</p>\n",
                    "line": 56,
                    "rawdescription": "\n\nFunction to resolve after a certain duration.\n\n",
                    "jsdoctags": [
                        {
                            "pos": 1693,
                            "end": 1729,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 344,
                            "tagName": {
                                "pos": 1694,
                                "end": 1699,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>duration in ms</p>\n",
                            "name": {
                                "pos": 1700,
                                "end": 1708,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "duration"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        },
                        {
                            "pos": 1729,
                            "end": 1749,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 345,
                            "tagName": {
                                "pos": 1730,
                                "end": 1737,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Promise</p>\n"
                        }
                    ]
                },
                {
                    "name": "durationResolverListener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NodeJS.Timeout",
                    "optional": false,
                    "description": "<p>Timeout to remove snackbar</p>\n",
                    "line": 48,
                    "rawdescription": "\nTimeout to remove snackbar",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "error",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Boolean indicating whether there is an error.</p>\n",
                    "line": 38,
                    "rawdescription": "\nBoolean indicating whether there is an error."
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Message displayed in snackbar</p>\n",
                    "line": 36,
                    "rawdescription": "\nMessage displayed in snackbar"
                },
                {
                    "name": "nestedComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<any>",
                    "optional": true,
                    "description": "<p>Reference to nested component ( if created from one )</p>\n",
                    "line": 44,
                    "rawdescription": "\nReference to nested component ( if created from one )",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "snackBarContentView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "<p>Reference to the content view of the snack bar.</p>\n",
                    "line": 32,
                    "rawdescription": "\nReference to the content view of the snack bar.",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'snackBarContent', {static: true, read: ViewContainerRef}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "snackbarRemovalTimeoutListener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NodeJS.Timeout",
                    "optional": false,
                    "description": "<p>Timeout to remove snackbar</p>\n",
                    "line": 46,
                    "rawdescription": "\nTimeout to remove snackbar",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "dismiss",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTrigger remove animation and removes the host instance from the dom\n",
                    "description": "<p>Trigger remove animation and removes the host instance from the dom</p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "SnackBarConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDisplay snackbar with the given message and config\n\n",
                    "description": "<p>Display snackbar with the given message and config</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3668,
                                "end": 3675,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3662,
                                "end": 3667,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Message to display in the snackbar</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3723,
                                "end": 3729,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "config"
                            },
                            "type": "SnackBarConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3717,
                                "end": 3722,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Snackbar config</p>\n"
                        }
                    ]
                },
                {
                    "name": "openFromComponent",
                    "args": [
                        {
                            "name": "component",
                            "type": "ComponentType<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "SnackBarConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDisplay snackbar with the given component and config\n\n",
                    "description": "<p>Display snackbar with the given component and config</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3980,
                                "end": 3989,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "component"
                            },
                            "type": "ComponentType<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3974,
                                "end": 3979,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Component to render in the snackbar</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4038,
                                "end": 4044,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "config"
                            },
                            "type": "SnackBarConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4032,
                                "end": 4037,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Snackbar config</p>\n"
                        }
                    ]
                },
                {
                    "name": "openFromTemplate",
                    "args": [
                        {
                            "name": "template",
                            "type": "TemplateRef<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "SnackBarConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDisplay snackbar with the given templateRef and config\n\n",
                    "description": "<p>Display snackbar with the given templateRef and config</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4460,
                                "end": 4468,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "template"
                            },
                            "type": "TemplateRef<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4454,
                                "end": 4459,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>TemplateRef to render in the snackbar</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4519,
                                "end": 4525,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "config"
                            },
                            "type": "SnackBarConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4513,
                                "end": 4518,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Snackbar config</p>\n"
                        }
                    ]
                },
                {
                    "name": "setSnackbarProperties",
                    "args": [
                        {
                            "name": "config",
                            "type": "SnackBarConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet snackbar properties\n\n",
                    "description": "<p>Set snackbar properties</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2402,
                                "end": 2408,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "config"
                            },
                            "type": "SnackBarConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2396,
                                "end": 2401,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Snackbar config</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2437,
                                "end": 2444,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "pos": 2431,
                                "end": 2436,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Snackbar message</p>\n"
                        }
                    ]
                },
                {
                    "name": "triggerActionEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTrigger the action event for the parent using the snackbar reference\n",
                    "description": "<p>Trigger the action event for the parent using the snackbar reference</p>\n"
                },
                {
                    "name": "triggerSnackBar",
                    "args": [
                        {
                            "name": "duration",
                            "type": "number | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet snackbar display timeout with the given config duration\n\n",
                    "description": "<p>Set snackbar display timeout with the given config duration</p>\n",
                    "modifierKind": [
                        121,
                        132
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2820,
                                "end": 2828,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "duration"
                            },
                            "type": "number | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2814,
                                "end": 2819,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Snackbar display duration</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>UI Snackbar component\nSnackbar is a UI component that displays a temporary message about an operation.</p>\n",
            "rawdescription": "\n\nUI Snackbar component\nSnackbar is a UI component that displays a temporary message about an operation.\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport { SnackBarConfig } from './interfaces/snackbar.interfaces';\nimport { ComponentType } from '@angular/cdk/portal';\nimport { SnackBarData, SNACKBAR_DATA } from './snackbar.token';\nimport { BehaviorSubject } from 'rxjs';\n\n/**\n * UI Snackbar component\n * Snackbar is a UI component that displays a temporary message about an operation.\n */\n@Component({\n  selector: 'ui-snackbar',\n  templateUrl: './snackbar.component.html',\n  styleUrls: ['./snackbar.component.scss'],\n})\nexport class SnackbarComponent implements OnDestroy {\n  /** Event emitter for when an action is completed. */\n  @Output() actionComplete = new EventEmitter<void>();\n  /** Reference to the content view of the snack bar. */\n  @ViewChild('snackBarContent', { static: true, read: ViewContainerRef })\n  snackBarContentView!: ViewContainerRef;\n  /** The data for the snack bar. */\n  data!: BehaviorSubject<SnackBarData>;\n  /** Message displayed in snackbar */\n  message!: string;\n  /** Boolean indicating whether there is an error. */\n  error = false;\n  /** Boolean indicating whether to display the snack bar. */\n  displaySnackBar = false;\n  /** The action to perform. */\n  action!: string;\n  /** Reference to nested component ( if created from one ) */\n  public nestedComponent?: ComponentRef<any>;\n  /** Timeout to remove snackbar */\n  private snackbarRemovalTimeoutListener!: NodeJS.Timeout;\n  /** Timeout to remove snackbar */\n  private durationResolverListener!: NodeJS.Timeout;\n\n  /**\n   * Function to resolve after a certain duration.\n   *\n   * @param duration duration in ms\n   * @returns Promise\n   */\n  durationResolver = (duration: number) => {\n    if (this.durationResolverListener) {\n      clearTimeout(this.durationResolverListener);\n    }\n    return new Promise((resolve) => {\n      this.durationResolverListener = setTimeout(resolve, duration);\n      return this.durationResolverListener;\n    });\n  };\n\n  /**\n   * UI Snackbar constructor\n   *\n   * @param host Class instance host element\n   * @param data Snackbar data token to update value\n   */\n  constructor(\n    private host: ElementRef<any>,\n    @Inject(SNACKBAR_DATA) data: BehaviorSubject<SnackBarData>\n  ) {\n    this.data = data;\n  }\n\n  /**\n   * Set snackbar properties\n   *\n   * @param config Snackbar config\n   * @param message Snackbar message\n   */\n  private setSnackbarProperties(config: SnackBarConfig, message: string = '') {\n    this.error = config.error ?? false;\n    this.message = message;\n    this.action = config.action ?? '';\n    this.data.next(config.data);\n    this.snackBarContentView?.clear();\n  }\n\n  /**\n   * Set snackbar display timeout with the given config duration\n   *\n   * @param duration Snackbar display duration\n   */\n  private async triggerSnackBar(duration: number | undefined) {\n    this.displaySnackBar = true;\n    await this.durationResolver(duration ?? 0);\n    if (duration) {\n      this.dismiss();\n    }\n  }\n\n  /**\n   * Trigger remove animation and removes the host instance from the dom\n   */\n  dismiss() {\n    this.displaySnackBar = false;\n    if (this.snackbarRemovalTimeoutListener) {\n      clearTimeout(this.snackbarRemovalTimeoutListener);\n    }\n    this.snackbarRemovalTimeoutListener = setTimeout(() => {\n      this.host.nativeElement.remove();\n    }, 300);\n  }\n\n  /**\n   * Trigger the action event for the parent using the snackbar reference\n   */\n  triggerActionEvent() {\n    this.dismiss();\n    this.actionComplete.emit();\n  }\n\n  /**\n   * Display snackbar with the given message and config\n   *\n   * @param message Message to display in the snackbar\n   * @param config Snackbar config\n   */\n  open(message: string, config: SnackBarConfig) {\n    this.setSnackbarProperties(config, message);\n    this.triggerSnackBar(config.duration);\n  }\n\n  /**\n   * Display snackbar with the given component and config\n   *\n   * @param component Component to render in the snackbar\n   * @param config Snackbar config\n   */\n  openFromComponent(component: ComponentType<any>, config: SnackBarConfig) {\n    this.setSnackbarProperties(config);\n    const ref = this.snackBarContentView?.createComponent(component);\n    this.nestedComponent = ref;\n    ref.changeDetectorRef.detectChanges();\n    this.triggerSnackBar(config.duration);\n  }\n\n  /**\n   * Display snackbar with the given templateRef and config\n   *\n   * @param template TemplateRef to render in the snackbar\n   * @param config Snackbar config\n   */\n  openFromTemplate(template: TemplateRef<any>, config: SnackBarConfig) {\n    this.setSnackbarProperties(config);\n    this.snackBarContentView?.createEmbeddedView(template);\n    this.triggerSnackBar(config.duration);\n  }\n\n  ngOnDestroy(): void {\n    if (this.snackbarRemovalTimeoutListener) {\n      clearTimeout(this.snackbarRemovalTimeoutListener);\n    }\n    if (this.durationResolverListener) {\n      clearTimeout(this.durationResolverListener);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./snackbar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>UI Snackbar constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "host",
                        "type": "ElementRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "BehaviorSubject<SnackBarData>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 64,
                "rawdescription": "\n\nUI Snackbar constructor\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 2112,
                            "end": 2116,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "host"
                        },
                        "type": "ElementRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2106,
                            "end": 2111,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Class instance host element</p>\n"
                    },
                    {
                        "name": {
                            "pos": 2157,
                            "end": 2161,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "data"
                        },
                        "type": "BehaviorSubject<SnackBarData>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2151,
                            "end": 2156,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Snackbar data token to update value</p>\n"
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<div\n  aria-live=\"assertive\"\n  class=\"pointer-events-none z-[10000] fixed inset-0 flex items-end px-4 py-6 sm:items-start sm:p-6\"\n>\n  <div class=\"flex w-full flex-col items-end space-y-4 sm:items-center\">\n    <div\n      [ngClass]=\"{\n        'translate-y-0 opacity-0 sm:translate-x-0': !displaySnackBar,\n        'transform ease-out duration-300 transition translate-y-2 opacity-100 sm:translate-y-0 sm:translate-x-2':\n          displaySnackBar\n      }\"\n      class=\"pointer-events-auto w-full transition ease-in duration-100 max-w-sm overflow-hidden rounded-lg bg-white shadow-lg ring-1 ring-black ring-opacity-5\"\n    >\n      <div class=\"p-4\">\n        <div class=\"flex justify-between items-center\">\n          <ng-template #snackBarContent></ng-template>\n          <ng-container *ngIf=\"!snackBarContentView?.length\">\n            <div class=\"flex-shrink-0 pr-2\">\n              <ui-icon\n                [variant]=\"error ? 'danger' : 'success'\"\n                [size]=\"21\"\n                [icon]=\"error ? 'close' : 'done'\"\n              ></ui-icon>\n            </div>\n            <div class=\"flex w-0 flex-1 justify-between\">\n              <p class=\"w-0 m-0 flex-1 text-sm font-medium text-gray-900\">\n                {{ message }}\n              </p>\n            </div>\n          </ng-container>\n          <div class=\"ml-4 flex flex-shrink-0\">\n            <ng-container *ngIf=\"action\">\n              <button\n                (click)=\"triggerActionEvent()\"\n                type=\"button\"\n                class=\"inline-flex mr-3 rounded-md bg-white text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2\"\n              >\n                {{ action }}\n              </button>\n            </ng-container>\n            <button\n              (click)=\"dismiss()\"\n              type=\"button\"\n              class=\"inline-flex rounded-md bg-white text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2\"\n            >\n              <span class=\"sr-only\">{{ 'common.close' | translate }}</span>\n              <svg\n                class=\"h-5 w-5\"\n                viewBox=\"0 0 20 20\"\n                fill=\"currentColor\"\n                aria-hidden=\"true\"\n              >\n                <path\n                  d=\"M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z\"\n                />\n              </svg>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "SpinnerComponent",
            "id": "component-SpinnerComponent-8e0a0f36713fc1273b866705ac3b3bce5ce6f9f218e1f7eb5641561f6e518b73344791419f25dd5069338753afee0f2e8958febd00baad89717aec867298479e",
            "file": "libs/ui/src/lib/spinner/spinner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-spinner",
            "styleUrls": [
                "./spinner.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./spinner.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "category",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCategory, defines the shape.",
                    "description": "<p>Category, defines the shape.</p>\n",
                    "line": 21,
                    "type": "Category",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'large'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSize of the spinner.",
                    "description": "<p>Size of the spinner.</p>\n",
                    "line": 17,
                    "type": "Size",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nVariant or style of the spinner, defines the color.",
                    "description": "<p>Variant or style of the spinner, defines the color.</p>\n",
                    "line": 19,
                    "type": "Variant",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>UI Spinner component\nSpinner is a UI component that displays a loading indicator.</p>\n",
            "rawdescription": "\n\nUI Spinner component\nSpinner is a UI component that displays a loading indicator.\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Size } from '../types/size';\nimport { Variant } from '../types/variant';\nimport { Category } from '../types/category';\n\n/**\n * UI Spinner component\n * Spinner is a UI component that displays a loading indicator.\n */\n@Component({\n  selector: 'ui-spinner',\n  templateUrl: './spinner.component.html',\n  styleUrls: ['./spinner.component.scss'],\n})\nexport class SpinnerComponent {\n  /** Size of the spinner. */\n  @Input() size: Size = 'large';\n  /** Variant or style of the spinner, defines the color. */\n  @Input() variant: Variant = 'default';\n  /** Category, defines the shape. */\n  @Input() category: Category = 'primary';\n\n  /** @returns general resolved classes and variant for spinner*/\n  get resolveSpinnerClasses(): string[] {\n    const classes = [];\n    classes.push('spinner-' + this.size);\n    classes.push(\n      this.category === 'secondary' || this.variant === 'light'\n        ? 'spinner-light'\n        : this.variant === 'default' || this.variant === 'primary'\n        ? 'spinner-primary'\n        : this.variant == 'danger'\n        ? 'spinner-danger'\n        : this.variant === 'grey'\n        ? 'spinner-grey'\n        : 'spinner-success'\n    );\n    return classes;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  justify-content: center;\n}\n\n.spinner-small {\n  @apply h-4 w-4;\n}\n.spinner-medium {\n  @apply h-5 w-5;\n}\n.spinner-large {\n  @apply h-12 w-12;\n}\n\n.spinner-primary {\n  @apply fill-primary-400;\n}\n\n.spinner-success {\n  @apply fill-green-400;\n}\n\n.spinner-danger {\n  @apply fill-red-400;\n}\n\n.spinner-grey {\n  @apply fill-neutral-400;\n}\n\n.spinner-light {\n  @apply fill-white;\n}\n",
                    "styleUrl": "./spinner.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "resolveSpinnerClasses": {
                    "name": "resolveSpinnerClasses",
                    "getSignature": {
                        "name": "resolveSpinnerClasses",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 24,
                        "rawdescription": "",
                        "description": "",
                        "jsdoctags": [
                            {
                                "pos": 688,
                                "end": 745,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 689,
                                    "end": 696,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>general resolved classes and variant for spinner</p>\n"
                            }
                        ]
                    }
                }
            },
            "templateData": "<div role=\"status\" class=\"overflow-hidden\">\n  <svg\n    aria-hidden=\"true\"\n    [ngClass]=\"resolveSpinnerClasses\"\n    class=\"animate-spin text-gray-300\"\n    viewBox=\"0 0 100 101\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z\"\n      fill=\"currentColor\"\n    />\n    <path\n      d=\"M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z\"\n      fill=\"currentFill\"\n    />\n  </svg>\n  <span class=\"sr-only\">{{ 'kendo.grid.loading' | translate }}...</span>\n</div>\n"
        },
        {
            "name": "TabComponent",
            "id": "component-TabComponent-f8547046157d171f40d0c279f5166e0bca3e941197ab890efe660f5157d84a50b57f1ee871d00ea649773500c17d5a0a3c1bde40dbf9d943713c8bb069b74fac",
            "file": "libs/ui/src/lib/tabs/components/tab/tab.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-tab",
            "styleUrls": [
                "./tab.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tab.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether the tab is enabled or not",
                    "description": "<p>Whether the tab is enabled or not</p>\n",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "uuidv4()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nUnique tab id",
                    "description": "<p>Unique tab id</p>\n",
                    "line": 30,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "openTab",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOutput decorator for tab opening",
                    "description": "<p>Output decorator for tab opening</p>\n",
                    "line": 38,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "<p>Button reference</p>\n",
                    "line": 35,
                    "rawdescription": "\nButton reference",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'button'"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "contentPortal",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplatePortal | null",
                    "optional": false,
                    "description": "<p>Content portal</p>\n",
                    "line": 65,
                    "rawdescription": "\nContent portal"
                },
                {
                    "name": "explicitContent",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": true,
                    "description": "<p>Tab content directive</p>\n",
                    "line": 47,
                    "rawdescription": "\nTab content directive",
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "TabContentDirective, {read: undefined}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "implicitContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "<p>Template reference</p>\n",
                    "line": 51,
                    "rawdescription": "\nTemplate reference",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TemplateRef, {static: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "index",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Tab index</p>\n",
                    "line": 60,
                    "rawdescription": "\nTab index"
                },
                {
                    "name": "resolveTabClasses",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "<p>Tab classes</p>\n",
                    "line": 62,
                    "rawdescription": "\nTab classes"
                },
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Whether the tab is selected or not</p>\n",
                    "line": 58,
                    "rawdescription": "\nWhether the tab is selected or not"
                },
                {
                    "name": "variant",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Variant",
                    "optional": false,
                    "description": "<p>Tab variant</p>\n",
                    "line": 54,
                    "rawdescription": "\nTab variant"
                },
                {
                    "name": "vertical",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Whether the tab is vertical or not</p>\n",
                    "line": 56,
                    "rawdescription": "\nWhether the tab is vertical or not"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>UI Tab component</p>\n",
            "rawdescription": "\n\nUI Tab component\n",
            "type": "component",
            "sourceCode": "import {\n  AfterContentChecked,\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Variant } from '../../../types/variant';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { TabContentDirective } from '../../directives/tab-content.directive';\nimport { v4 as uuidv4 } from 'uuid';\n\n/**\n * UI Tab component\n */\n@Component({\n  selector: 'ui-tab',\n  templateUrl: './tab.component.html',\n  styleUrls: ['./tab.component.scss'],\n})\nexport class TabComponent implements AfterContentChecked, AfterContentInit {\n  /** Unique tab id */\n  @Input()\n  id = uuidv4();\n  /** Whether the tab is enabled or not */\n  @Input() disabled = false;\n  /** Button reference */\n  @ViewChild('button')\n  button!: ElementRef;\n\n  /** Output decorator for tab opening */\n  @Output() openTab: EventEmitter<void> = new EventEmitter();\n\n  /** @returns content portal of the tab */\n  get content(): TemplatePortal | null {\n    return this.contentPortal;\n  }\n\n  /** Tab content directive */\n  @ContentChild(TabContentDirective, { read: TemplateRef<any> })\n  explicitContent?: TemplateRef<any> = undefined;\n\n  /** Template reference */\n  @ViewChild(TemplateRef, { static: true })\n  implicitContent!: TemplateRef<any>;\n\n  /** Tab variant */\n  variant: Variant = 'default';\n  /** Whether the tab is vertical or not */\n  vertical = false;\n  /** Whether the tab is selected or not */\n  selected = false;\n  /** Tab index */\n  index = 0;\n  /** Tab classes */\n  resolveTabClasses: string[] = [];\n\n  /** Content portal */\n  contentPortal: TemplatePortal | null = null;\n\n  /**\n   * UI tab component\n   *\n   * @param viewContainerRef Angular view container reference\n   */\n  constructor(private viewContainerRef: ViewContainerRef) {}\n\n  ngAfterContentInit(): void {\n    this.contentPortal = new TemplatePortal(\n      this.explicitContent || this.implicitContent,\n      this.viewContainerRef\n    );\n  }\n\n  ngAfterContentChecked(): void {\n    const classes = [];\n    if (this.vertical) {\n      classes.push('ui-tab__vertical');\n      if (this.selected) {\n        classes.push('bg-gray-100');\n        classes.push('text-gray-700');\n      }\n    } else {\n      classes.push('ui-tab__horizontal');\n      if (this.selected) {\n        classes.push(\n          'ui-tab__' +\n            (this.variant === 'default'\n              ? 'primary'\n              : this.variant === 'light'\n              ? 'grey'\n              : this.variant)\n        );\n      }\n    }\n    this.resolveTabClasses = classes;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".button-min-width {\n  min-width: 150px;\n  @media (max-width: 598px) {\n    min-width: unset !important;\n  }\n}\n\n.ui-tab__horizontal {\n  @apply border-b-2 text-gray-700 border-transparent px-3 flex justify-center gap-1.5;\n  &[selected='false']:not([disabled]) {\n    @apply text-gray-500 hover:bg-gray-100 hover:border-gray-500 hover:text-gray-700;\n  }\n  &[disabled] {\n    @apply text-gray-400;\n  }\n}\n\n.ui-tab__vertical {\n  @apply rounded-md text-left p-2 text-gray-700 gap-1.5 inline-flex items-center;\n  &[selected='false']:not([disabled]) {\n    @apply hover:text-gray-700 text-gray-500;\n  }\n  &[disabled] {\n    @apply text-gray-400;\n  }\n}\n\n// === VARIANTS ===\n.ui-tab__primary {\n  @apply text-primary-400 border-primary-300 focus:ring-primary-600;\n}\n\n.ui-tab__success {\n  @apply text-green-400 border-green-300 focus:ring-green-600;\n}\n\n.ui-tab__danger {\n  @apply text-red-400 border-red-300 focus:ring-red-600;\n}\n\n.ui-tab__grey {\n  @apply text-gray-400 border-gray-300 focus:ring-gray-600;\n}\n\n@media (max-width: 598px) {\n  .ui-tab__vertical {\n    width: unset !important;\n    padding: 1rem;\n    ::ng-deep span {\n      display: none !important;\n    }\n    ui-icon {\n      pointer-events: all !important;\n    }\n  }\n}\n",
                    "styleUrl": "./tab.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>UI tab component</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 65,
                "rawdescription": "\n\nUI tab component\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1711,
                            "end": 1727,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "viewContainerRef"
                        },
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1705,
                            "end": 1710,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Angular view container reference</p>\n"
                    }
                ]
            },
            "implements": [
                "AfterContentChecked",
                "AfterContentInit"
            ],
            "accessors": {
                "content": {
                    "name": "content",
                    "getSignature": {
                        "name": "content",
                        "type": "",
                        "returnType": "TemplatePortal | null",
                        "line": 41,
                        "rawdescription": "",
                        "description": "",
                        "jsdoctags": [
                            {
                                "pos": 950,
                                "end": 985,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 951,
                                    "end": 958,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>content portal of the tab</p>\n"
                            }
                        ]
                    }
                }
            },
            "templateData": "<div>\n  <button\n    [attr.selected]=\"selected\"\n    [disabled]=\"disabled\"\n    [ngClass]=\"resolveTabClasses\"\n    class=\"w-full whitespace-nowrap py-2 text-sm font-medium button-min-width\"\n    (click)=\"openTab.emit()\"\n  >\n    <ng-content select=\"label\"></ng-content>\n  </button>\n</div>\n\n<ng-template>\n  <ng-content></ng-content>\n</ng-template>\n"
        },
        {
            "name": "TabsComponent",
            "id": "component-TabsComponent-f2ce11eb8053ea992458f301b38125d35d95d497c2703ede4a0443299ae5e4a63c8a4ea33fa8918fbd0bf6f6e061dae0db9b189957fcafc35ae3df291bb81f0c",
            "file": "libs/ui/src/lib/tabs/tabs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-tabs",
            "styleUrls": [
                "./tabs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tabs.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "selectedIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndex of the default selected tab\n",
                    "description": "<p>Index of the default selected tab</p>\n",
                    "line": 61,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTrue if the navigation tab is to be vertical, false otherwise\n",
                    "description": "<p>True if the navigation tab is to be vertical, false otherwise</p>\n",
                    "line": 69,
                    "type": "Variant",
                    "decorators": []
                },
                {
                    "name": "vertical",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTrue if the navigation tab is to be vertical, false otherwise\n",
                    "description": "<p>True if the navigation tab is to be vertical, false otherwise</p>\n",
                    "line": 65,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "openedTab",
                    "defaultValue": "new EventEmitter<TabComponent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEvent emitter for when a tab is opened.",
                    "description": "<p>Event emitter for when a tab is opened.</p>\n",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectedIndexChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOutput emitted whenever a new tab is clicked, gives the index of the new tab\n",
                    "description": "<p>Output emitted whenever a new tab is clicked, gives the index of the new tab</p>\n",
                    "line": 73,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Destroy subject</p>\n",
                    "line": 88,
                    "rawdescription": "\nDestroy subject"
                },
                {
                    "name": "previousTabsLength",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Previous tabs length</p>\n",
                    "line": 84,
                    "rawdescription": "\nPrevious tabs length"
                },
                {
                    "name": "reorder$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Reorder subject</p>\n",
                    "line": 90,
                    "rawdescription": "\nReorder subject"
                },
                {
                    "name": "showContentTimeoutListener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NodeJS.Timeout",
                    "optional": false,
                    "description": "<p>Timeout to show content</p>\n",
                    "line": 92,
                    "rawdescription": "\nTimeout to show content",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tabBodyHost",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabBodyHostDirective",
                    "optional": false,
                    "description": "<p>Reference to the TabBodyHostDirective.</p>\n",
                    "line": 78,
                    "rawdescription": "\nReference to the TabBodyHostDirective.",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TabBodyHostDirective"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "tabList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<any>",
                    "optional": false,
                    "description": "<p>Reference to tab list element</p>\n",
                    "line": 81,
                    "rawdescription": "\nReference to tab list element",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tabList'"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "tabs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<TabComponent>",
                    "optional": false,
                    "description": "<p>List of tabs</p>\n",
                    "line": 56,
                    "rawdescription": "\n\nList of tabs\n",
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TabComponent, {descendants: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "triggerAnimation",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Trigger animation</p>\n",
                    "line": 86,
                    "rawdescription": "\nTrigger animation"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setSelectedTab",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate select state of all the tabs\n",
                    "description": "<p>Update select state of all the tabs</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showContent",
                    "args": [
                        {
                            "name": "tab",
                            "type": "TabComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow the content linked to the tab clicked + manages classes so the good tab is selected in design\n\n",
                    "description": "<p>Show the content linked to the tab clicked + manages classes so the good tab is selected in design</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4064,
                                "end": 4067,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "tab"
                            },
                            "type": "TabComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4058,
                                "end": 4063,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>tab to display</p>\n"
                        }
                    ]
                },
                {
                    "name": "subscribeToOpenTabEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets all the tabs, initialize them and listen to the openTab event\n",
                    "description": "<p>Gets all the tabs, initialize them and listen to the openTab event</p>\n",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>UI Tabs component\nTabs are used to split content between multiple sections. Tabs can be either horizontal or vertical.</p>\n",
            "rawdescription": "\n\nUI Tabs component\nTabs are used to split content between multiple sections. Tabs can be either horizontal or vertical.\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  QueryList,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { Variant } from '../types/variant';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\nimport { TabComponent } from './components/tab/tab.component';\nimport { Subject, takeUntil, startWith } from 'rxjs';\nimport { TabBodyHostDirective } from './directives/tab-body-host.directive';\n\n/**\n * UI Tabs component\n * Tabs are used to split content between multiple sections. Tabs can be either horizontal or vertical.\n */\n@Component({\n  selector: 'ui-tabs',\n  templateUrl: './tabs.component.html',\n  styleUrls: ['./tabs.component.scss'],\n  animations: [\n    trigger('tabContentDisplay', [\n      // Initial state of content when loading component is visible(no animation)\n      state('initial', style({ opacity: 1, transform: 'translateX(0%)' })),\n      // Load content state is hidden when we load another tab that is not the default one\n      state(\n        'loadContent',\n        style({ opacity: 0.1, transform: 'translateX(100%)' })\n      ),\n      // From the load content to content-in we would trigger the animation that loads the content in from bottom to top\n      transition('loadContent => initial', [animate('.3s ease-in-out')]),\n      transition('initial => loadContent', [animate('.001s ease-in-out')]),\n    ]),\n  ],\n})\nexport class TabsComponent implements AfterViewInit, OnDestroy, OnChanges {\n  /**\n   * List of tabs\n   */\n  @ContentChildren(TabComponent, { descendants: true })\n  tabs!: QueryList<TabComponent>;\n\n  /**\n   * Index of the default selected tab\n   */\n  @Input() selectedIndex = 0;\n  /**\n   * True if the navigation tab is to be vertical, false otherwise\n   */\n  @Input() vertical = false;\n  /**\n   * True if the navigation tab is to be vertical, false otherwise\n   */\n  @Input() variant: Variant = 'default';\n  /**\n   * Output emitted whenever a new tab is clicked, gives the index of the new tab\n   */\n  @Output() selectedIndexChange = new EventEmitter<number>();\n  /** Event emitter for when a tab is opened. */\n  @Output() openedTab = new EventEmitter<TabComponent>();\n  /** Reference to the TabBodyHostDirective. */\n  @ViewChild(TabBodyHostDirective)\n  tabBodyHost!: TabBodyHostDirective;\n  /** Reference to tab list element */\n  @ViewChild('tabList')\n  tabList!: ElementRef<any>;\n\n  /** Previous tabs length */\n  previousTabsLength = 0;\n  /** Trigger animation */\n  triggerAnimation = false;\n  /** Destroy subject */\n  destroy$ = new Subject<void>();\n  /** Reorder subject */\n  reorder$ = new Subject<void>();\n  /** Timeout to show content */\n  private showContentTimeoutListener!: NodeJS.Timeout;\n\n  /**\n   * Ui Sidenav constructor\n   *\n   * @param cdr ChangeDetectorRef\n   */\n  constructor(private cdr: ChangeDetectorRef) {}\n\n  /** @returns general resolved position classes for navigation tabs*/\n  get resolveTabPositionClasses(): string[] {\n    const classes = [];\n    if (this.vertical) {\n      classes.push('col-span-3');\n      classes.push('flex-col');\n      classes.push('h-full');\n      classes.push('mr-4');\n    } else {\n      classes.push('border-b');\n      classes.push('mb-4');\n      classes.push('overflow-x-auto');\n    }\n    return classes;\n  }\n\n  ngAfterViewInit() {\n    // This ensures that the subscription logic is executed for both existing and new tab elements\n    this.tabs.changes\n      .pipe(startWith(this.tabs), takeUntil(this.destroy$))\n      .subscribe((tabs: QueryList<TabComponent>) => {\n        this.cdr.detectChanges();\n        this.reorder$.next();\n        this.previousTabsLength = tabs.length;\n        this.subscribeToOpenTabEvents();\n        this.setSelectedTab();\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['selectedIndex']) {\n      this.setSelectedTab();\n    }\n  }\n\n  /**\n   * Show the content linked to the tab clicked + manages classes so the good tab is selected in design\n   *\n   * @param tab tab to display\n   */\n  showContent(tab: TabComponent) {\n    this.selectedIndex = tab.index;\n    this.setSelectedTab();\n\n    // Clean up previous displayed content\n    this.triggerAnimation = false;\n\n    // Creates the content element thanks to the hidden html content of the tab component\n    // Timeout so the animation has the time to render (elsewhere it can't cause delete then create is instantaneous)\n    if (this.showContentTimeoutListener) {\n      clearTimeout(this.showContentTimeoutListener);\n    }\n    this.showContentTimeoutListener = setTimeout(() => {\n      this.triggerAnimation = true;\n      this.openedTab.emit(tab);\n    }, 100);\n    // Emits the current selected index\n    this.selectedIndexChange.emit(this.selectedIndex);\n  }\n\n  /**\n   * Update select state of all the tabs\n   */\n  public setSelectedTab() {\n    this.tabs?.forEach((tab) => {\n      if (tab.index === this.selectedIndex) {\n        tab.selected = true;\n      } else {\n        tab.selected = false;\n      }\n    });\n  }\n\n  /**\n   * Gets all the tabs, initialize them and listen to the openTab event\n   */\n  private subscribeToOpenTabEvents(): void {\n    this.tabs?.forEach((tab, index) => {\n      tab.variant = this.variant;\n      tab.vertical = this.vertical;\n      tab.index = index;\n      tab.openTab\n        .pipe(takeUntil(this.reorder$), takeUntil(this.destroy$))\n        .subscribe(() => {\n          if (\n            tab.index !== this.selectedIndex ||\n            !this.tabBodyHost.hasAttached()\n          ) {\n            this.showContent(tab);\n          }\n          this.selectedIndex = index;\n        });\n    });\n    // To avoid that we select all tabs by default\n    this.tabs?.forEach((tab) => {\n      if (tab.index === this.selectedIndex) {\n        this.showContent(tab);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.showContentTimeoutListener) {\n      clearTimeout(this.showContentTimeoutListener);\n    }\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./tabs.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Ui Sidenav constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 92,
                "rawdescription": "\n\nUi Sidenav constructor\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 2849,
                            "end": 2852,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "cdr"
                        },
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2843,
                            "end": 2848,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>ChangeDetectorRef</p>\n"
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "OnDestroy",
                "OnChanges"
            ],
            "accessors": {
                "resolveTabPositionClasses": {
                    "name": "resolveTabPositionClasses",
                    "getSignature": {
                        "name": "resolveTabPositionClasses",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 102,
                        "rawdescription": "",
                        "description": "",
                        "jsdoctags": [
                            {
                                "pos": 2933,
                                "end": 2995,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 2934,
                                    "end": 2941,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>general resolved position classes for navigation tabs</p>\n"
                            }
                        ]
                    }
                }
            },
            "templateData": "<!-- Wrapper of the component, allows to display content \n     not in the body while not interfering with the list of tabs -->\n<div\n  #tabGroupWrapper\n  class=\"overflow-x-hidden\"\n  [ngClass]=\"{ flex: vertical }\"\n  id=\"tab-group-wrapper\"\n>\n  <!-- List of tabs -->\n  <div\n    id=\"tab-list\"\n    #tabList\n    class=\"justify-start flex\"\n    [ngClass]=\"resolveTabPositionClasses\"\n  >\n    <ng-content></ng-content>\n  </div>\n  <!-- The directive will display the content here -->\n  <div\n    id=\"tab-body-host\"\n    [ngClass]=\"{ 'overflow-x-hidden': vertical }\"\n    class=\"flex-1\"\n    [@tabContentDisplay]=\"triggerAnimation ? 'initial' : 'loadContent'\"\n  >\n    <ng-template uiTabBodyHost [openedTab]=\"openedTab\"></ng-template>\n  </div>\n</div>\n"
        },
        {
            "name": "TextareaComponent",
            "id": "component-TextareaComponent-89341733cccdde1c0d539ec0f8ca433fcebb5d9f3a0267f9794d9cc58cf8039e445decce5a8ac245ca03b68521ae3a4c71eb7d161d8c1d70d7f2274a9404f9e4",
            "file": "libs/ui/src/lib/textarea/textarea.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "CONTROL_VALUE_ACCESSOR"
                }
            ],
            "selector": "ui-textarea",
            "styleUrls": [
                "./textarea.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./textarea.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "maxRows",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMaximum number of rows that the textarea can display.",
                    "description": "<p>Maximum number of rows that the textarea can display.</p>\n",
                    "line": 60,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "minRows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1281,
                            "end": 1307,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 344,
                            "tagName": {
                                "pos": 1282,
                                "end": 1287,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>row number</p>\n",
                            "name": {
                                "pos": 1288,
                                "end": 1292,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "rows"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "rawdescription": "\n\nSet minimal rows for the textarea\n\nIf the minimal rows given is greater than the current max row values, or no max row values was provided\nthen we set the minimal rows to the max rows value\n\n",
                    "description": "<p>Set minimal rows for the textarea</p>\n<p>If the minimal rows given is greater than the current max row values, or no max row values was provided\nthen we set the minimal rows to the max rows value</p>\n",
                    "line": 50,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nName of the textarea.",
                    "description": "<p>Name of the textarea.</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nPlaceholder text for the textarea.",
                    "description": "<p>Placeholder text for the textarea.</p>\n",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nValue of the textarea.",
                    "description": "<p>Value of the textarea.</p>\n",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "autosize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CdkTextareaAutosize",
                    "optional": false,
                    "description": "<p>Reference to the autosize directive.</p>\n",
                    "line": 81,
                    "rawdescription": "\nReference to the autosize directive.",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'autosize'"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Whether the textarea is disabled.</p>\n",
                    "line": 75,
                    "rawdescription": "\nWhether the textarea is disabled."
                },
                {
                    "name": "kendoFocus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FocusableDirective",
                    "optional": false,
                    "description": "FocusableDirective",
                    "line": 68,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        167,
                        167,
                        123
                    ]
                },
                {
                    "name": "minRowsNumber",
                    "defaultValue": "2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>The minimum number of rows in the textarea.</p>\n",
                    "line": 71,
                    "rawdescription": "\nThe minimum number of rows in the textarea."
                },
                {
                    "name": "onChanged",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Function to handle value changes.</p>\n",
                    "line": 79,
                    "rawdescription": "\nFunction to handle value changes."
                },
                {
                    "name": "onTouched",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Function to handle touch events.</p>\n",
                    "line": 77,
                    "rawdescription": "\nFunction to handle touch events."
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<boolean>",
                    "optional": false,
                    "description": "<p>Event emitter for value changes.</p>\n",
                    "line": 73,
                    "rawdescription": "\nEvent emitter for value changes."
                }
            ],
            "methodsClass": [
                {
                    "name": "onTextChange",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetect text change\n\n",
                    "description": "<p>Detect text change</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2995,
                                "end": 2996,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2989,
                                "end": 2994,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>HTML event containing target</p>\n"
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister change of the control\n\n",
                    "description": "<p>Register change of the control</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2372,
                                "end": 2374,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "pos": 2366,
                                "end": 2371,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>callback</p>\n"
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister touch event\n\n",
                    "description": "<p>Register touch event</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2532,
                                "end": 2534,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "pos": 2526,
                                "end": 2531,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>callback</p>\n"
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet disabled state of the control\n\n",
                    "description": "<p>Set disabled state of the control</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2693,
                                "end": 2703,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "isDisabled"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2687,
                                "end": 2692,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>is control disabled</p>\n"
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWrite new value\n\n",
                    "description": "<p>Write new value</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2866,
                                "end": 2871,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2860,
                                "end": 2865,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>text</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>UI Textarea component.\nLong text, that can be displayed on multiple lines. Ideal for comments, description.</p>\n",
            "rawdescription": "\n\nUI Textarea component.\nLong text, that can be displayed on multiple lines. Ideal for comments, description.\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  forwardRef,\n  Input,\n  Provider,\n  ViewChild,\n  EventEmitter,\n  Optional,\n  Self,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CdkTextareaAutosize } from '@angular/cdk/text-field';\nimport { FocusableDirective } from '@progress/kendo-angular-grid';\n\n/**\n * Control value accessor\n */\nconst CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => TextareaComponent),\n  multi: true,\n};\n\n/**\n * UI Textarea component.\n * Long text, that can be displayed on multiple lines. Ideal for comments, description.\n */\n@Component({\n  selector: 'ui-textarea',\n  templateUrl: './textarea.component.html',\n  styleUrls: ['./textarea.component.scss'],\n  providers: [CONTROL_VALUE_ACCESSOR],\n})\nexport class TextareaComponent implements ControlValueAccessor {\n  /** Value of the textarea. */\n  @Input() value = '';\n  /** Placeholder text for the textarea. */\n  @Input() placeholder = '';\n  /** Name of the textarea. */\n  @Input() name!: string;\n\n  /**\n   * Set minimal rows for the textarea\n   *\n   * If the minimal rows given is greater than the current max row values, or no max row values was provided\n   * then we set the minimal rows to the max rows value\n   *\n   * @param rows row number\n   */\n  @Input() set minRows(rows: number) {\n    if (rows) {\n      this.minRowsNumber = rows;\n      if (rows > this.maxRows) {\n        this.maxRows = rows;\n      }\n    }\n  }\n\n  /** Maximum number of rows that the textarea can display. */\n  @Input() maxRows = 5;\n\n  /**\n   * UI Textarea component.\n   * Long text, that can be displayed on multiple lines. Ideal for comments, description.\n   *\n   * @param kendoFocus FocusableDirective\n   */\n  constructor(@Self() @Optional() public kendoFocus: FocusableDirective) {}\n\n  /** The minimum number of rows in the textarea. */\n  minRowsNumber = 2;\n  /** Event emitter for value changes. */\n  valueChange: EventEmitter<boolean> = new EventEmitter();\n  /** Whether the textarea is disabled. */\n  disabled = false;\n  /** Function to handle touch events. */\n  onTouched!: () => void;\n  /** Function to handle value changes. */\n  onChanged!: (value: string) => void;\n  /** Reference to the autosize directive. */\n  @ViewChild('autosize') autosize!: CdkTextareaAutosize;\n\n  /**\n   * Register change of the control\n   *\n   * @param fn callback\n   */\n  public registerOnChange(fn: (value: string) => void): void {\n    this.onChanged = fn;\n  }\n\n  /**\n   * Register touch event\n   *\n   * @param fn callback\n   */\n  public registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Set disabled state of the control\n   *\n   * @param isDisabled is control disabled\n   */\n  public setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /**\n   * Write new value\n   *\n   * @param value text\n   */\n  writeValue(value: string): void {\n    this.value = value;\n  }\n\n  /**\n   * Detect text change\n   *\n   * @param e HTML event containing target\n   */\n  onTextChange(e: Event): void {\n    this.value = (e.target as HTMLTextAreaElement).value;\n    if (this.onTouched && this.onChanged) {\n      this.onTouched();\n      this.onChanged(this.value);\n    }\n    this.valueChange.emit(!!this.value);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./textarea.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>UI Textarea component.\nLong text, that can be displayed on multiple lines. Ideal for comments, description.</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "kendoFocus",
                        "type": "FocusableDirective",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 60,
                "rawdescription": "\n\nUI Textarea component.\nLong text, that can be displayed on multiple lines. Ideal for comments, description.\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1708,
                            "end": 1718,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "kendoFocus"
                        },
                        "type": "FocusableDirective",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1702,
                            "end": 1707,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>FocusableDirective</p>\n"
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "minRows": {
                    "name": "minRows",
                    "setSignature": {
                        "name": "minRows",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "rows",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 50,
                        "rawdescription": "\n\nSet minimal rows for the textarea\n\nIf the minimal rows given is greater than the current max row values, or no max row values was provided\nthen we set the minimal rows to the max rows value\n\n",
                        "description": "<p>Set minimal rows for the textarea</p>\n<p>If the minimal rows given is greater than the current max row values, or no max row values was provided\nthen we set the minimal rows to the max rows value</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 1288,
                                    "end": 1292,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "rows"
                                },
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "pos": 1282,
                                    "end": 1287,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "param"
                                },
                                "comment": "<p>row number</p>\n"
                            }
                        ]
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"kendoFocus; else regularTextareaTmpl\">\n  <textarea\n    kendoGridFocusable\n    cdkTextareaAutosize\n    #autosize=\"cdkTextareaAutosize\"\n    [cdkAutosizeMinRows]=\"minRowsNumber\"\n    [cdkAutosizeMaxRows]=\"maxRows\"\n    class=\"form-textarea block w-full rounded-md border-0 px-2 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-primary-600 sm:text-sm sm:leading-6\"\n    [placeholder]=\"placeholder\"\n    [name]=\"name\"\n    (input)=\"onTextChange($event)\"\n    [value]=\"value\"\n    [disabled]=\"disabled\"\n  >\n  </textarea>\n</ng-container>\n<ng-template #regularTextareaTmpl>\n  <textarea\n    cdkTextareaAutosize\n    #autosize=\"cdkTextareaAutosize\"\n    [cdkAutosizeMinRows]=\"minRowsNumber\"\n    [cdkAutosizeMaxRows]=\"maxRows\"\n    class=\"form-textarea block w-full rounded-md border-0 px-2 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-primary-600 sm:text-sm sm:leading-6\"\n    [placeholder]=\"placeholder\"\n    [name]=\"name\"\n    (input)=\"onTextChange($event)\"\n    [value]=\"value\"\n    [disabled]=\"disabled\"\n  >\n  </textarea>\n</ng-template>\n"
        },
        {
            "name": "TimePickerComponent",
            "id": "component-TimePickerComponent-6f7c973c8d5a4a32c5eb4113d0cc12c26dec9bae0ea577b0f0a1ba9368c4a6c37142bf16b55b267ebfea18883a15239e3d4b1ff0b0ad7d4549923c15bfd9e03f",
            "file": "libs/ui/src/lib/cron-editor/time-picker/time-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-cron-time-picker",
            "styleUrls": [
                "./time-picker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./time-picker.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether time picker is disabled or not",
                    "description": "<p>Whether time picker is disabled or not</p>\n",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hideHours",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether to hide hours or not",
                    "description": "<p>Whether to hide hours or not</p>\n",
                    "line": 39,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hideMinutes",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether to hide minutes or not",
                    "description": "<p>Whether to hide minutes or not</p>\n",
                    "line": 41,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hideSeconds",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether to hide seconds or not",
                    "description": "<p>Whether to hide seconds or not</p>\n",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "use24HourTime",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether to use 24 hour time or not",
                    "description": "<p>Whether to use 24 hour time or not</p>\n",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "<p>Form group</p>\n",
                    "line": 46,
                    "rawdescription": "\nForm group"
                },
                {
                    "name": "hourTypes",
                    "defaultValue": "['AM', 'PM']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "<p>Hour types</p>\n",
                    "line": 53,
                    "rawdescription": "\nHour types",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "minutes",
                    "defaultValue": "[...range(0, 59)]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "<p>Minutes range</p>\n",
                    "line": 49,
                    "rawdescription": "\nMinutes range",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "parent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControlContainer",
                    "optional": false,
                    "description": "parent ControlContainer",
                    "line": 65,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "seconds",
                    "defaultValue": "[...range(0, 59)]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "<p>Seconds range</p>\n",
                    "line": 51,
                    "rawdescription": "\nSeconds range",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>UI TimePicker Component</p>\n",
            "rawdescription": "\n\nUI TimePicker Component\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { ControlContainer, FormGroup } from '@angular/forms';\n\n/** TimePicker interface declaration */\nexport interface TimePickerModel {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n}\n\n/**\n * generate numbers in some range\n *\n * @param start start range\n * @param end end range\n * @yields i\n */\nfunction* range(start: number, end: number) {\n  for (let i = start; i <= end; i++) {\n    yield i;\n  }\n}\n\n/**\n * UI TimePicker Component\n */\n@Component({\n  selector: 'ui-cron-time-picker',\n  templateUrl: './time-picker.component.html',\n  styleUrls: ['./time-picker.component.scss'],\n})\nexport class TimePickerComponent implements OnInit {\n  /** Whether time picker is disabled or not */\n  @Input() public disabled = false;\n  /** Whether to use 24 hour time or not */\n  @Input() public use24HourTime = true;\n  /** Whether to hide hours or not */\n  @Input() public hideHours = false;\n  /** Whether to hide minutes or not */\n  @Input() public hideMinutes = false;\n  /** Whether to hide seconds or not */\n  @Input() public hideSeconds = true;\n\n  /** Form group */\n  allForm!: FormGroup;\n\n  /** Minutes range */\n  public minutes = [...range(0, 59)];\n  /** Seconds range */\n  public seconds = [...range(0, 59)];\n  /** Hour types */\n  public hourTypes = ['AM', 'PM'];\n\n  /** @returns hours */\n  get hours(): number[] {\n    return this.use24HourTime ? [...range(0, 23)] : [...range(0, 12)];\n  }\n\n  /**\n   * Ui TimePicker constructor\n   *\n   * @param parent parent ControlContainer\n   */\n  constructor(public parent: ControlContainer) {}\n\n  ngOnInit(): void {\n    this.allForm = this.parent.control as FormGroup;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./time-picker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Ui TimePicker constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "parent",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 58,
                "rawdescription": "\n\nUi TimePicker constructor\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1521,
                            "end": 1527,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "parent"
                        },
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1515,
                            "end": 1520,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>parent ControlContainer</p>\n"
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "hours": {
                    "name": "hours",
                    "getSignature": {
                        "name": "hours",
                        "type": "[]",
                        "returnType": "number[]",
                        "line": 56,
                        "rawdescription": "",
                        "description": "",
                        "jsdoctags": [
                            {
                                "pos": 1347,
                                "end": 1362,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 1348,
                                    "end": 1355,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>hours</p>\n"
                            }
                        ]
                    }
                }
            },
            "templateData": "<ng-container [formGroup]=\"allForm\">\n  <div [ngClass]=\"{ 'flex gap-3 items-center': !hideHours }\">\n    <ng-container *ngIf=\"!hideHours\">\n      <div uiFormFieldDirective>\n        <label>{{ 'common.cronEditor.hours' | translate }}</label>\n        <ui-select-menu formControlName=\"hours\">\n          <ui-select-option *ngFor=\"let hour of hours\" [value]=\"hour\">\n            {{ hour }}\n          </ui-select-option>\n        </ui-select-menu>\n      </div>\n    </ng-container>\n\n    <span *ngIf=\"!hideHours && !hideMinutes\">:</span>\n\n    <ng-container *ngIf=\"!hideMinutes\">\n      <div uiFormFieldDirective>\n        <label>{{ 'common.cronEditor.minutes' | translate }}</label>\n        <ui-select-menu formControlName=\"minutes\">\n          <ui-select-option *ngFor=\"let minute of minutes\" [value]=\"minute\">\n            {{ minute }}\n          </ui-select-option>\n        </ui-select-menu>\n      </div>\n    </ng-container>\n\n    <span *ngIf=\"!hideMinutes && !hideSeconds\">:</span>\n\n    <ng-container *ngIf=\"!hideSeconds\">\n      <div uiFormFieldDirective>\n        <label>{{ 'common.cronEditor.seconds' | translate }}</label>\n        <ui-select-menu formControlName=\"seconds\">\n          <ui-select-option *ngFor=\"let second of seconds\" [value]=\"second\">\n            {{ second }}\n          </ui-select-option>\n        </ui-select-menu>\n      </div>\n    </ng-container>\n\n    <span *ngIf=\"!hideSeconds && !use24HourTime\">.</span>\n\n    <ng-container *ngIf=\"!use24HourTime\">\n      <div uiFormFieldDirective>\n        <ui-select-menu formControlName=\"hourType\">\n          <ui-select-option\n            *ngFor=\"let hourType of hourTypes\"\n            [value]=\"hourType\"\n          >\n            {{ hourType }}\n          </ui-select-option>\n        </ui-select-menu>\n      </div>\n    </ng-container>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "ToggleComponent",
            "id": "component-ToggleComponent-fbc4e3a42f5bb49e6d44c87e435c7fa5f119fe16beeb9c456e09432b55724d5ae0dd61265bf9183e22ed137b84809750c6e08522a413f15bd5e1b81fac87e129",
            "file": "libs/ui/src/lib/toggle/toggle.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "CONTROL_VALUE_ACCESSOR"
                }
            ],
            "selector": "ui-toggle",
            "styleUrls": [
                "./toggle.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toggle.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIcon of the toggle.",
                    "description": "<p>Icon of the toggle.</p>\n",
                    "line": 33,
                    "type": "ToggleIcon",
                    "decorators": []
                },
                {
                    "name": "labelPosition",
                    "defaultValue": "'right'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nPosition of the label, relative to the toggle.",
                    "description": "<p>Position of the label, relative to the toggle.</p>\n",
                    "line": 35,
                    "type": "\"right\" | \"left\"",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'short'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDisplay type of toggle, can be short or normal.",
                    "description": "<p>Display type of toggle, can be short or normal.</p>\n",
                    "line": 31,
                    "type": "ToggleType",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nVariant or style of the toggle, defines the color.",
                    "description": "<p>Variant or style of the toggle, defines the color.</p>\n",
                    "line": 37,
                    "type": "Variant",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Is the toggle disabled.</p>\n",
                    "line": 41,
                    "rawdescription": "\nIs the toggle disabled."
                },
                {
                    "name": "onChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Function to handle value changes.</p>\n",
                    "line": 45,
                    "rawdescription": "\nFunction to handle value changes."
                },
                {
                    "name": "onTouched",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Function to handle touch events.</p>\n",
                    "line": 47,
                    "rawdescription": "\nFunction to handle touch events."
                },
                {
                    "name": "value",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Current value of the input.</p>\n",
                    "line": 39,
                    "rawdescription": "\nCurrent value of the input."
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<boolean>",
                    "optional": false,
                    "description": "<p>Event emitter for value changes.</p>\n",
                    "line": 43,
                    "rawdescription": "\nEvent emitter for value changes."
                }
            ],
            "methodsClass": [
                {
                    "name": "onToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles the selection of a content\n\n",
                    "description": "<p>Handles the selection of a content</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "boolean",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister new method to call when control state change\n\n",
                    "description": "<p>Register new method to call when control state change</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3115,
                                "end": 3117,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "boolean",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "pos": 3109,
                                "end": 3114,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>callback function</p>\n"
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister new method to call when control touch state change\n\n",
                    "description": "<p>Register new method to call when control touch state change</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3323,
                                "end": 3325,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "pos": 3317,
                                "end": 3322,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>callback function</p>\n"
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet disabled state of the control\n\n",
                    "description": "<p>Set disabled state of the control</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3493,
                                "end": 3503,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "isDisabled"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3487,
                                "end": 3492,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>is control disabled</p>\n"
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWrite value of control.\n\n",
                    "description": "<p>Write value of control.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2938,
                                "end": 2943,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2932,
                                "end": 2937,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>new value</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Toggle is a UI component that allows users to switch between two mutually exclusive options (checked or unchecked, on or off) through a single click or tap.</p>\n",
            "rawdescription": "\n\nToggle is a UI component that allows users to switch between two mutually exclusive options (checked or unchecked, on or off) through a single click or tap.\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  Input,\n  Provider,\n  forwardRef,\n} from '@angular/core';\nimport { ToggleType } from './types/toggle-type';\nimport { ToggleIcon } from './interfaces/toggle-icon.interface';\nimport { Variant } from '../types/variant';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n/** A provider for the ControlValueAccessor interface. */\nconst CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ToggleComponent),\n  multi: true,\n};\n\n/**\n * Toggle is a UI component that allows users to switch between two mutually exclusive options (checked or unchecked, on or off) through a single click or tap.\n */\n@Component({\n  selector: 'ui-toggle',\n  templateUrl: './toggle.component.html',\n  styleUrls: ['./toggle.component.scss'],\n  providers: [CONTROL_VALUE_ACCESSOR],\n})\nexport class ToggleComponent implements ControlValueAccessor {\n  /** Display type of toggle, can be short or normal. */\n  @Input() type: ToggleType = 'short';\n  /** Icon of the toggle. */\n  @Input() icon!: ToggleIcon;\n  /** Position of the label, relative to the toggle. */\n  @Input() labelPosition: 'right' | 'left' = 'right';\n  /** Variant or style of the toggle, defines the color. */\n  @Input() variant: Variant = 'primary';\n  /** Current value of the input. */\n  value = false;\n  /** Is the toggle disabled. */\n  disabled = false;\n  /** Event emitter for value changes. */\n  valueChange: EventEmitter<boolean> = new EventEmitter();\n  /** Function to handle value changes. */\n  onChange!: (value: boolean) => void;\n  /** Function to handle touch events. */\n  onTouched!: () => void;\n\n  /** @returns general toggle classes and variant */\n  get toggleClasses(): string[] {\n    const classes: string[] = [];\n    // Disable state\n    classes.push(this.disabled ? 'opacity-70' : '');\n    // Space from button to label depending on label position\n    classes.push(this.labelPosition === 'left' ? 'ml-3' : 'mr-3');\n    // Order of button depending on label position\n    classes.push(this.labelPosition === 'left' ? 'order-2' : 'order-1');\n    // Variants\n    classes.push('focus-' + this.variant);\n    if (this.type === 'simple') {\n      classes.push('button-simple');\n      if (!this.value) {\n        classes.push('bg-gray-200');\n      } else {\n        classes.push('toggle-' + this.variant);\n      }\n    } else {\n      classes.push('button-short');\n    }\n    return classes;\n  }\n\n  /** @returns shot toggle classes and variant */\n  get shortToggleClasses(): string[] {\n    const classes: string[] = [];\n    if (!this.value) {\n      classes.push('bg-gray-200');\n    } else {\n      classes.push('toggle-' + this.variant);\n    }\n    return classes;\n  }\n\n  /**\n   * Handles the selection of a content\n   *\n   */\n  public onToggle(): void {\n    this.value = !this.value;\n    this.onChange(this.value);\n    this.onTouched();\n  }\n\n  /**\n   * Write value of control.\n   *\n   * @param value new value\n   */\n  public writeValue(value: boolean): void {\n    this.value = value;\n  }\n\n  /**\n   * Register new method to call when control state change\n   *\n   * @param fn callback function\n   */\n  public registerOnChange(fn: (value: boolean) => void): void {\n    this.onChange = fn;\n  }\n\n  /**\n   * Register new method to call when control touch state change\n   *\n   * @param fn callback function\n   */\n  public registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Set disabled state of the control\n   *\n   * @param isDisabled is control disabled\n   */\n  public setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".toggle-button {\n  &:not(:disabled) {\n    @apply cursor-pointer;\n  }\n  @apply relative inline-flex flex-shrink-0 rounded-full focus:outline-none focus:ring-2 focus:ring-primary-600 focus:ring-offset-2;\n}\n\n.button-simple {\n  @apply bg-gray-200 h-6 w-11 border-2 border-transparent transition-colors ease-in-out duration-200;\n}\n\n.button-short {\n  @apply h-5 w-10 items-center justify-center;\n}\n\n.span-simple {\n  @apply translate-x-0 inline-block h-5 w-5 transform rounded-full shadow ring-0 transition duration-200 ease-in-out bg-white;\n}\n\n.span-short {\n  @apply absolute h-full w-full rounded-md;\n}\n\n// === SHORT TOGGLE TYPE DETAILS ===\n.short-color {\n  @apply bg-gray-200 pointer-events-none absolute mx-auto h-4 w-9 rounded-full transition-colors duration-200 ease-in-out;\n}\n\n.short-translate {\n  @apply pointer-events-none absolute left-0 inline-block h-5 w-5 transform rounded-full\n    border border-gray-200 bg-white shadow ring-0 transition-transform duration-200 ease-in-out;\n}\n\n// === ICONS ===\n.icon {\n  @apply absolute inset-0 flex h-full w-full items-center justify-center transition-opacity;\n}\n\n// === VARIANTS ===\n.toggle-default {\n  @apply bg-black;\n}\n.focus-default {\n  @apply focus:ring-black;\n}\n\n.toggle-primary {\n  @apply bg-primary-400;\n}\n.focus-primary {\n  @apply focus:ring-primary-600;\n}\n\n.toggle-success {\n  @apply bg-green-400;\n}\n.focus-success {\n  @apply focus:ring-green-600;\n}\n\n.toggle-danger {\n  @apply bg-red-400;\n}\n.focus-danger {\n  @apply focus:ring-red-600;\n}\n\n.toggle-grey {\n  @apply bg-gray-400;\n}\n.focus-grey {\n  @apply focus:ring-gray-600;\n}\n\n.toggle-light {\n  @apply bg-white;\n}\n.focus-light {\n  @apply focus:ring-white;\n}\n",
                    "styleUrl": "./toggle.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "toggleClasses": {
                    "name": "toggleClasses",
                    "getSignature": {
                        "name": "toggleClasses",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 50,
                        "rawdescription": "",
                        "description": "",
                        "jsdoctags": [
                            {
                                "pos": 1657,
                                "end": 1701,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 1658,
                                    "end": 1665,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>general toggle classes and variant</p>\n"
                            }
                        ]
                    }
                },
                "shortToggleClasses": {
                    "name": "shortToggleClasses",
                    "getSignature": {
                        "name": "shortToggleClasses",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 74,
                        "rawdescription": "",
                        "description": "",
                        "jsdoctags": [
                            {
                                "pos": 2448,
                                "end": 2489,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 2449,
                                    "end": 2456,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>shot toggle classes and variant</p>\n"
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"flex items-center\">\n  <!-- TOGGLE -->\n  <button\n    type=\"button\"\n    role=\"switch\"\n    aria-labelledby=\"toggle-label\"\n    aria-describedby=\"toggle-description\"\n    [attr.aria-checked]=\"value\"\n    [disabled]=\"disabled\"\n    class=\"toggle-button\"\n    [ngClass]=\"toggleClasses\"\n    (click)=\"onToggle()\"\n  >\n    <span\n      aria-hidden=\"true\"\n      [ngClass]=\"{\n        'span-simple': type === 'simple',\n        'span-short': type === 'short',\n        'translate-x-0': !value && type === 'simple',\n        'translate-x-5': value && type === 'simple'\n      }\"\n      class=\"pointer-events-none\"\n    >\n      <!-- ICON -->\n      <ng-container *ngIf=\"icon\">\n        <ng-container *ngTemplateOutlet=\"iconTemplate\"></ng-container>\n      </ng-container>\n    </span>\n\n    <ng-container *ngIf=\"type === 'short'\">\n      <ng-container *ngTemplateOutlet=\"shortToggleTemplate\"></ng-container>\n    </ng-container>\n  </button>\n  <!-- LABEL -->\n  <div\n    [ngClass]=\"{\n      'order-2': labelPosition === 'right',\n      'order-1': labelPosition === 'left'\n    }\"\n    class=\"text-sm\"\n  >\n    <span\n      class=\"flex font-medium leading-6 text-gray-900 flex-wrap whitespace-pre-wrap\"\n    >\n      <!-- TEXT -->\n      <ng-content select=\"label\"></ng-content>\n    </span>\n    <!-- DESCRIPTION -->\n    <p class=\"m-0 font-normal text-gray-500\">\n      <ng-content select=\"description\"></ng-content>\n    </p>\n  </div>\n</div>\n\n<ng-template #shortToggleTemplate>\n  <span aria-hidden=\"true\" [ngClass]=\"shortToggleClasses\" class=\"short-color\">\n  </span>\n  <span\n    aria-hidden=\"true\"\n    [ngClass]=\"{ 'translate-x-0': !value, 'translate-x-5': value }\"\n    class=\"short-translate\"\n  >\n  </span>\n</ng-template>\n\n<ng-template #iconTemplate>\n  <!-- ICON FOR SIMPLE TOGGLES -->\n  <span class=\"icon\" aria-hidden=\"true\">\n    <ui-icon\n      [icon]=\"value ? icon.enableIcon : icon.disableIcon\"\n      [size]=\"12\"\n    ></ui-icon>\n  </span>\n</ng-template>\n"
        },
        {
            "name": "TooltipComponent",
            "id": "component-TooltipComponent-b77da657f69da3bcb7166ff6877b5979e777ebbace1c195b4cf3b0805b1e752e6cbac0a02657a754054311ca01d5624ac1c82a6b790d647102a4a42b7305ee6b",
            "file": "libs/ui/src/lib/tooltip/tooltip.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-tooltip",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tooltip.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "uiTooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nTooltip text",
                    "description": "<p>Tooltip text</p>\n",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Tooltip is a UI component that displays a hint when hovering over an element.</p>\n",
            "rawdescription": "\n\nTooltip is a UI component that displays a hint when hovering over an element.\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n/**\n * Tooltip is a UI component that displays a hint when hovering over an element.\n */\n@Component({\n  selector: 'ui-tooltip',\n  templateUrl: './tooltip.component.html',\n})\nexport class TooltipComponent {\n  /** Tooltip text */\n  @Input() uiTooltip!: string;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<span\n  #tooltip\n  class=\"block transition-opacity delay-300 bg-gray-800 p-2 max-w-xs whitespace-pre-wrap text-xs text-gray-100 rounded-md z-[9999] break-words pointer-events-none\"\n  >{{ uiTooltip }}</span\n>\n"
        },
        {
            "name": "TooltipDummyComponent",
            "id": "component-TooltipDummyComponent-a9cbf9a34d655fc3d4c10d020afd8254ba975fef11a7bbc7cd74b57e61414d0a50313c0ab24ecc9fd0f4befe50d5693dcd794c9126fbac4d1fbbe2870b3d22f3",
            "file": "libs/ui/src/lib/tooltip/tooltip.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-tooltip-dummy",
            "styleUrls": [],
            "styles": [],
            "template": "<button [uiTooltip]=\"tooltip\" [uiTooltipPosition]=\"position\">   Hover me\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "position",
                    "defaultValue": "'bottom'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "TooltipPosition",
                    "decorators": []
                },
                {
                    "name": "tooltip",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n\n\n",
            "type": "component",
            "sourceCode": "import { moduleMetadata, Story, Meta } from '@storybook/angular';\nimport { TooltipComponent } from './tooltip.component';\nimport { TooltipModule } from './tooltip.module';\nimport { TooltipPosition, tooltipPositions } from './types/tooltip-positions';\nimport { Component, Input } from '@angular/core';\n\n/**\n *\n */\n@Component({\n  selector: 'ui-tooltip-dummy',\n  template: ` <button [uiTooltip]=\"tooltip\" [uiTooltipPosition]=\"position\">\n    Hover me\n  </button>`,\n})\nclass TooltipDummyComponent {\n  /**\n   *\n   */\n  @Input() public tooltip = '';\n  /**\n   *\n   */\n  @Input() public position: TooltipPosition = 'bottom';\n}\n\nexport default {\n  title: 'Directives/Tooltip',\n  tags: ['autodocs'],\n  component: TooltipDummyComponent,\n  argTypes: {\n    position: {\n      options: tooltipPositions,\n      control: 'select',\n    },\n  },\n  decorators: [\n    moduleMetadata({\n      imports: [TooltipModule],\n    }),\n  ],\n} as Meta<TooltipComponent>;\n\n/**\n * Template for storybook's test of the directive\n *\n * @param args Tooltip component args\n * @returns TooltipComponent\n */\nconst Template: Story<TooltipDummyComponent> = (\n  args: TooltipDummyComponent\n) => ({\n  props: args,\n});\n\n/**\n * Top centered element\n */\nexport const TopExample = Template.bind({});\nTopExample.args = {\n  position: 'top',\n  tooltip: 'test',\n};\n\n/**\n * Bottom centered element\n */\nexport const BottomExample = Template.bind({});\nBottomExample.args = {\n  position: 'bottom',\n  tooltip: 'test',\n};\n\n/**\n * Middle left element\n */\nexport const LeftExample = Template.bind({});\nLeftExample.args = {\n  position: 'left',\n  tooltip: 'test',\n};\n\n/**\n * Middle right element\n */\nexport const RightExample = Template.bind({});\nRightExample.args = {\n  position: 'right',\n  tooltip: 'test',\n};\n\n/**\n * Long text element\n */\nexport const LongTextExample = Template.bind({});\nLongTextExample.args = {\n  position: 'top',\n  tooltip:\n    'The Tooltip can either be assigned auto height and width values or specific pixel values. The width and height properties are used to set the outer dimension ... The Tooltip can either be assigned auto height and width values or specific pixel values. The width and height properties are used to set the outer dimension ... The Tooltip can either be assigned auto height and width values or specific pixel values. The width and height properties are used to set the outer dimension ... The Tooltip can either be assigned auto height and width values or specific pixel values. The width and height properties are used to set the outer dimension ...',\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "addChipsFromInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(chips: string[] | string) => {\n  if (chips instanceof Array) {\n    statuses = statuses.concat([...chips]);\n  } else {\n    statuses.push(chips);\n  }\n  formControl.setValue(statuses);\n}",
                "rawdescription": "Callback to test the chip input directive change event",
                "description": "<p>Callback to test the chip input directive change event</p>\n"
            },
            {
                "name": "afterTomorrow",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/date/date-range/date-range.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Date()",
                "rawdescription": "After tomorrow date",
                "description": "<p>After tomorrow date</p>\n"
            },
            {
                "name": "allButtons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  size: 'medium',\n}",
                "rawdescription": "Tertiary button",
                "description": "<p>Tertiary button</p>\n"
            },
            {
                "name": "AllButtonsTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<StoryType>",
                "defaultValue": "(args: StoryType) => {\n  return {\n    template: `\n      <h1 class=\"text-lg mb-4\">Grouped by variant</h1>\n      <div class=\"flex flex-wrap gap-4\">\n        <div class=\"border rounded-lg\" *ngFor=\"let variant of configurations\">\n          <h2 class=\"w-full text-center border-b py-2\">{{variant.title}}</h2>\n          <div class=\"flex gap-2 p-4\">\n            <ui-button\n              *ngFor=\"let btn of variant.items\"\n              [variant]=\"btn.variant\"\n              [category]=\"btn.category\"\n              [disabled]=\"btn.disabled\"\n              [title]=\"btn.category\"\n              [size]=\"'${args.size}'\"\n            >\n              {{btn.text}}\n            </ui-button>\n          </div>\n        </div>\n      </div>\n    `,\n    props: {\n      configurations,\n    },\n  };\n}",
                "rawdescription": "Template button",
                "description": "<p>Template button</p>\n"
            },
            {
                "name": "AllIconsTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/icon/icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<any>",
                "defaultValue": "(args: any) => {\n  return {\n    template: `\n      <div class=\"h-screen pb-20\">\n        <h1 class=\"text-lg mb-4\">List of all icons</h1>\n        <div class=\"flex flex-wrap gap-4 overflow-auto max-h-full\">\n          <div class=\"border rounded-lg flex items-center\" *ngFor=\"let icon of MAT_ICON_LIST\">\n              <ui-icon\n                class=\"p-4 border-r bg-gray-100 rounded-l-lg\"\n                [icon]=\"icon\"\n                variant=\"${args.variant}\"\n                [size]=\"${args.size}\"\n              ></ui-icon>\n              <h2 class=\"w-full text-center px-4\">{{icon}}</h2>\n          </div>\n        </div>\n      </div>`,\n    props: {\n      MAT_ICON_LIST,\n    },\n  };\n}",
                "rawdescription": "Template for all icons",
                "description": "<p>Template for all icons</p>\n"
            },
            {
                "name": "avatars",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/avatar-group/avatar-group.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MockedAvatar[]",
                "defaultValue": "[\n  {\n    size: 'large',\n    variant: 'tertiary',\n    image: '',\n    shape: 'circle',\n    initials: 'JL',\n  },\n  {\n    size: 'large',\n    variant: 'tertiary',\n    image:\n      'https://images.unsplash.com/photo-1491528323818-fdd1faba62cc?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80',\n    shape: 'circle',\n    initials: 'PM',\n  },\n  {\n    size: 'large',\n    variant: 'secondary',\n    image:\n      'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2.25&w=256&h=256&q=80',\n    shape: 'circle',\n    initials: '',\n  },\n  {\n    size: 'large',\n    variant: 'secondary',\n    image:\n      'https://images.unsplash.com/photo-1550525811-e5869dd03032?ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80',\n    shape: 'rectangle',\n    initials: '',\n  },\n]",
                "rawdescription": "Mocked avatar array",
                "description": "<p>Mocked avatar array</p>\n"
            },
            {
                "name": "BottomDatePicker",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/date/date-picker/date-picker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "BottomDatePickerTemplate.bind({})",
                "rawdescription": "Date picker bottom",
                "description": "<p>Date picker bottom</p>\n"
            },
            {
                "name": "BottomDatePickerTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/date/date-picker/date-picker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<DatePickerComponent>",
                "defaultValue": "(\n  args: DatePickerComponent\n) => {\n  return {\n    component: DatePickerComponent,\n    template: `\n    <p class=\"absolute\">selected value: {{formControl.value}}</p>\n    <div class=\"flex flex-col h-screen justify-end\">\n    <div [uiDateWrapper]=\"calendar\">\n    <input [uiDatePicker] [formControl]=\"formControl\" [label]=\"'Select a date'\"/>\n      <ui-date-picker #calendar>\n      </ui-date-picker> \n      </div>\n      </div>\n      `,\n    props: {\n      ...args,\n      formControl,\n    },\n  };\n}",
                "rawdescription": "Date picker bottom template",
                "description": "<p>Date picker bottom template</p>\n"
            },
            {
                "name": "BottomDateRange",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/date/date-range/date-range.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "BottomDateRangeTemplate.bind({})",
                "rawdescription": "Date range bottom",
                "description": "<p>Date range bottom</p>\n"
            },
            {
                "name": "BottomDateRangeTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/date/date-range/date-range.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<DateRangeComponent>",
                "defaultValue": "(\n  args: DateRangeComponent\n) => {\n  return {\n    component: DateRangeComponent,\n    template: `\n    <div class=\"absolute\">\n    <p>start value: {{formControlStart.value}}</p>\n    <p>end value: {{formControlEnd.value}}</p>\n    </div>\n    <div class=\"flex flex-col h-screen justify-end\">\n    <div [uiDateWrapper]=\"calendar\">\n    <input [uiDatePicker] [formControl]=\"formControlStart\" [label]=\"'Select a start date'\"/>\n    <input [uiDatePicker] [formControl]=\"formControlEnd\" [label]=\"'Select a end date'\"/>\n      <ui-date-range #calendar>\n      </ui-date-range> \n      </div>\n      </div>\n      `,\n    props: {\n      ...args,\n      formControlStart,\n      formControlEnd,\n    },\n  };\n}",
                "rawdescription": "Date range bottom template",
                "description": "<p>Date range bottom template</p>\n"
            },
            {
                "name": "BottomExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/tooltip/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Bottom centered element",
                "description": "<p>Bottom centered element</p>\n"
            },
            {
                "name": "ChipsInputTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<ChipComponent>",
                "defaultValue": "(args: ChipComponent) => {\n  return {\n    component: ChipComponent,\n    template: `\n      <div uiChipList [formControl]=\"formControl\" #chipList>\n        <ui-chip\n          [removable]=\"${args.removable}\"\n          [disabled]=\"${args.disabled}\"\n          [variant]=\"'${args.variant}'\"\n          [value]=\"status\"\n          *ngFor=\"let status of statuses; let i = index\"\n          (removed)=\"removeStatus(i)\"\n        >\n          {{ status }}\n        </ui-chip>\n      </div>\n      <input\n        placeholder=\"New status...\"\n        [uiChipListFor]=\"chipList\"\n        [chipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n        (chipTokenEnd)=\"addChipsFromInput($event)\"\n        >\n        <br>\n        <p>value: <span *ngFor=\"let val of formControl.value;let last = last\">{{val}} <span *ngIf=\"!last\">, </span></span></p>\n        <p>touched: {{formControl.touched}}</p>\n        `,\n    props: {\n      ...args,\n      statuses,\n      formControl,\n      removeStatus,\n      addChipsFromInput,\n      separatorKeysCodes,\n    },\n  };\n}",
                "rawdescription": "Template chip list with input",
                "description": "<p>Template chip list with input</p>\n"
            },
            {
                "name": "ChipVariants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ChipVariantsTemplate.bind({})",
                "rawdescription": "Chips variants demonstration",
                "description": "<p>Chips variants demonstration</p>\n"
            },
            {
                "name": "ChipVariantsTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<ChipComponent>",
                "defaultValue": "(args: ChipComponent) => {\n  return {\n    component: ChipComponent,\n    template: `\n      <div class=\"flex gap-1\">\n        <ui-chip variant=\"default\" [removable]=\"true\"> Default </ui-chip>\n        <ui-chip variant=\"primary\" [removable]=\"true\"> Primary </ui-chip>\n        <ui-chip variant=\"success\" [removable]=\"true\"> Success </ui-chip>\n        <ui-chip variant=\"danger\" [removable]=\"true\"> Danger </ui-chip>\n        <ui-chip variant=\"danger\" [removable]=\"true\" [disabled]=\"true\"> Disabled </ui-chip>\n      </div>\n    `,\n    props: {\n      ...args,\n    },\n  };\n}",
                "rawdescription": "Template chip variants",
                "description": "<p>Template chip variants</p>\n"
            },
            {
                "name": "ChipWithInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ChipsInputTemplate.bind({})",
                "rawdescription": "Chip list with input",
                "description": "<p>Chip list with input</p>\n"
            },
            {
                "name": "clickEvent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/menu/menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(name: string) =>\n  window.alert(`You pressed the ${name} button!`)",
                "rawdescription": "Click event handler for menu items template",
                "description": "<p>Click event handler for menu items template</p>\n"
            },
            {
                "name": "closeEvent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {\n  console.log('isClosed');\n}",
                "rawdescription": "Used to test if emission of output \"closed\" works",
                "description": "<p>Used to test if emission of output &quot;closed&quot; works</p>\n"
            },
            {
                "name": "closesAutocompletePanel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {\n  console.log('Closed autocomplete panel event');\n}",
                "rawdescription": "Callback to test the autocomplete directive closed event",
                "description": "<p>Callback to test the autocomplete directive closed event</p>\n"
            },
            {
                "name": "columnDefinitionArray",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/table/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  'name',\n  'email',\n  'phone',\n  'city',\n  'active',\n  'selected',\n  'id',\n]",
                "rawdescription": "Column definition for table",
                "description": "<p>Column definition for table</p>\n"
            },
            {
                "name": "configurations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    title: 'Default',\n    items: categories.map((category) => ({\n      variant: 'default',\n      category: category,\n      text: 'default',\n    })),\n  },\n  {\n    title: 'Primary',\n    items: categories.map((category) => ({\n      variant: 'primary',\n      category: category,\n      text: 'primary',\n    })),\n  },\n  {\n    title: 'Success',\n    items: categories.map((category) => ({\n      variant: 'success',\n      category: category,\n      text: 'success',\n    })),\n  },\n  {\n    title: 'Danger',\n    items: categories.map((category) => ({\n      variant: 'danger',\n      category: category,\n      text: 'danger',\n    })),\n  },\n  {\n    title: 'Grey',\n    items: categories.map((category) => ({\n      variant: 'grey',\n      category: category,\n      text: 'grey',\n    })),\n  },\n  {\n    title: 'Light',\n    items: categories.map((category) => ({\n      variant: 'light',\n      category: category,\n      text: 'light',\n    })),\n  },\n  {\n    title: 'Warning',\n    items: categories.map((category) => ({\n      variant: 'warning',\n      category: category,\n      text: 'warning',\n    })),\n  },\n  {\n    title: 'Disabled',\n    items: categories.map((category) => ({\n      variant: 'primary',\n      category: category,\n      text: 'disabled',\n      disabled: true,\n    })),\n  },\n]",
                "rawdescription": "List of all available buttons",
                "description": "<p>List of all available buttons</p>\n"
            },
            {
                "name": "Contained",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/breadcrumbs/breadcrumbs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<BreadcrumbsComponent>",
                "defaultValue": "{\n  args: {\n    breadcrumbs: [\n      {\n        text: 'item 0',\n        uri: '#',\n        showLabel: true,\n      },\n      {\n        text: 'item 1',\n        uri: '#',\n        showLabel: true,\n      },\n      {\n        text: 'item 2',\n        uri: '#',\n        showLabel: true,\n      },\n    ],\n    separator: 'chevron',\n    display: 'contained',\n  },\n}",
                "rawdescription": "Container story",
                "description": "<p>Container story</p>\n"
            },
            {
                "name": "CONTROL_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/checkbox/checkbox.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Provider",
                "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => CheckboxComponent),\n  multi: true,\n}",
                "rawdescription": "A provider for the ControlValueAccessor interface.",
                "description": "<p>A provider for the ControlValueAccessor interface.</p>\n"
            },
            {
                "name": "CONTROL_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/textarea/textarea.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Provider",
                "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => TextareaComponent),\n  multi: true,\n}",
                "rawdescription": "Control value accessor",
                "description": "<p>Control value accessor</p>\n"
            },
            {
                "name": "CONTROL_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/toggle/toggle.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Provider",
                "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ToggleComponent),\n  multi: true,\n}",
                "rawdescription": "A provider for the ControlValueAccessor interface.",
                "description": "<p>A provider for the ControlValueAccessor interface.</p>\n"
            },
            {
                "name": "cronEditor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/cron-editor/cron-editor.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<CronEditorComponent>",
                "defaultValue": "{\n  args: {\n    options: {\n      defaultTime: '00:00:00',\n      // Cron Tab Options\n      hideMinutesTab: false,\n      hideHourlyTab: false,\n      hideDailyTab: false,\n      hideWeeklyTab: false,\n      hideMonthlyTab: false,\n      hideYearlyTab: false,\n      hideAdvancedTab: true,\n      hideSpecificWeekDayTab: false,\n      hideSpecificMonthWeekTab: false,\n      // Time options\n      use24HourTime: true,\n      hideSeconds: false,\n      // standard or quartz\n      cronFlavor: 'standard',\n    },\n  },\n}",
                "rawdescription": "CronEditor story",
                "description": "<p>CronEditor story</p>\n"
            },
            {
                "name": "customTriggerSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n<ng-template #customTemplate>\n<span class=\"inline-flex items-center rounded-full bg-pink-50 px-2 py-1 text-xs font-medium text-pink-700 ring-1 ring-inset ring-pink-700/10\">{{formGroup.get('selectMenu').value}}</span>\n</ng-template>`",
                "rawdescription": "Custom template trigger to be placed between the select tag",
                "description": "<p>Custom template trigger to be placed between the select tag</p>\n"
            },
            {
                "name": "customTriggerSelectTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`<ui-select-menu\n  formControlName=\"selectMenu\"\n  (opened)=\"openEvent($event)\" \n  (closed)=\"closeEvent($event)\" \n  (selectedOption)=\"selectEvent($event)\"\n  [multiselect]=\"multiselect\"\n  [disabled]=\"disabled\"\n  [customTemplate]=\"customTemplate\"\n>\n  ${customTriggerSelect}\n  <ui-select-option *ngFor=\"let option of options\" [value]=\"option\">\n    {{option}}\n  </ui-select-option>\n</ui-select-menu>`",
                "rawdescription": "Select with the custom template trigger placed between the select tag",
                "description": "<p>Select with the custom template trigger placed between the select tag</p>\n"
            },
            {
                "name": "dailyExp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/\\d+ \\d+ \\d+ 1\\/\\d+ \\* [?*] \\*/",
                "rawdescription": "daily regex",
                "description": "<p>daily regex</p>\n"
            },
            {
                "name": "dailyWeekdayExp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/\\d+ \\d+ \\d+ [?*] \\* MON-FRI \\*/",
                "rawdescription": "dailyWeekday regex",
                "description": "<p>dailyWeekday regex</p>\n"
            },
            {
                "name": "DatePicker",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/date/date-picker/date-picker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "DatePickerTemplate.bind({})",
                "rawdescription": "Date picker",
                "description": "<p>Date picker</p>\n"
            },
            {
                "name": "DatePickerTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/date/date-picker/date-picker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<DatePickerComponent>",
                "defaultValue": "(\n  args: DatePickerComponent\n) => {\n  return {\n    component: DatePickerComponent,\n    template: `\n    <div [uiDateWrapper]=\"calendar\">\n    <input [uiDatePicker] [formControl]=\"formControl\" [label]=\"'Select a date'\"/>\n      <ui-date-picker #calendar>\n      </ui-date-picker> \n      </div>\n      <br>\n      <p>selected value: {{formControl.value}}</p>\n      `,\n    props: {\n      ...args,\n      formControl,\n    },\n  };\n}",
                "rawdescription": "Date picker template",
                "description": "<p>Date picker template</p>\n"
            },
            {
                "name": "DateRange",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/date/date-range/date-range.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "DateRangeTemplate.bind({})",
                "rawdescription": "Date range",
                "description": "<p>Date range</p>\n"
            },
            {
                "name": "DateRangeTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/date/date-range/date-range.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<DateRangeComponent>",
                "defaultValue": "(\n  args: DateRangeComponent\n) => {\n  return {\n    component: DateRangeComponent,\n    template: `\n    <div [uiDateWrapper]=\"calendar\">\n    <input [uiDatePicker] [formControl]=\"formControlStart\" [label]=\"'Select a start date'\"/>\n    <input [uiDatePicker] [formControl]=\"formControlEnd\" [label]=\"'Select a end date'\"/>\n      <ui-date-range #calendar>\n      </ui-date-range> \n      </div>\n      <br>\n      <p>start value: {{formControlStart.value}}</p>\n      <p>end value: {{formControlEnd.value}}</p>`,\n    props: {\n      ...args,\n      formControlStart,\n      formControlEnd,\n    },\n  };\n}",
                "rawdescription": "Date range template",
                "description": "<p>Date range template</p>\n"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<Story>",
                "defaultValue": "{\n  args: {\n    content:\n      'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam pellentesque rhoncus odio, a accumsan purus venenatis eget. Suspendisse pretium nunc non tellus pulvinar, ut dapibus velit mollis. Vivamus dictum tempus ligula, vitae condimentum justo scelerisque sit amet. Donec ultrices quis turpis vitae tincidunt.',\n  },\n}",
                "rawdescription": "Alert story",
                "description": "<p>Alert story</p>\n"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/avatar-group/avatar-group.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<StoryType>",
                "defaultValue": "{\n  args: {},\n}",
                "rawdescription": "AvatarGroup with top stack, limit 2",
                "description": "<p>AvatarGroup with top stack, limit 2</p>\n"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/dialog/dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Primary launchDialog",
                "description": "<p>Primary launchDialog</p>\n"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/icon/icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Primary icon component",
                "description": "<p>Primary icon component</p>\n"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/tabs/tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<TabsComponent>",
                "defaultValue": "{\n  args: {\n    vertical: false,\n  },\n}",
                "rawdescription": "Default story",
                "description": "<p>Default story</p>\n"
            },
            {
                "name": "Defaut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/avatar/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<AvatarComponent>",
                "defaultValue": "{\n  args: {},\n}",
                "rawdescription": "Default inputs",
                "description": "<p>Default inputs</p>\n"
            },
            {
                "name": "DisabledSelection",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateDisabledSelection.bind({})",
                "rawdescription": "Actual export of disabled select story",
                "description": "<p>Actual export of disabled select story</p>\n"
            },
            {
                "name": "FormAutocomplete",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "FormControlTemplate.bind({})",
                "rawdescription": "Form control autocomplete",
                "description": "<p>Form control autocomplete</p>\n"
            },
            {
                "name": "FormCheckbox",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/checkbox/checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "FormControlTemplate.bind({})",
                "rawdescription": "Form control checkbox",
                "description": "<p>Form control checkbox</p>\n"
            },
            {
                "name": "formControl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FormControl()",
                "rawdescription": "Form control to test autocomplete story",
                "description": "<p>Form control to test autocomplete story</p>\n"
            },
            {
                "name": "formControl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FormControl()",
                "rawdescription": "Form control to test chip story",
                "description": "<p>Form control to test chip story</p>\n"
            },
            {
                "name": "formControl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FormGroup({\n  name: new FormControl(''),\n})",
                "rawdescription": "Form group to test story with disable option",
                "description": "<p>Form group to test story with disable option</p>\n"
            },
            {
                "name": "formControl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/radio/radio.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FormControl()",
                "rawdescription": "Form control for story testing",
                "description": "<p>Form control for story testing</p>\n"
            },
            {
                "name": "formControl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/date/date-picker/date-picker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FormControl(new Date())",
                "rawdescription": "FormControl for story testing",
                "description": "<p>FormControl for story testing</p>\n"
            },
            {
                "name": "formControlEnd",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/date/date-range/date-range.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FormControl(\n  afterTomorrow.setDate(today.getDate() + 2)\n)",
                "rawdescription": "FormControl for end date",
                "description": "<p>FormControl for end date</p>\n"
            },
            {
                "name": "formControlSelectTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n<div [formGroup]=\"formGroup\" class=\"py-5\">\n  <ui-select-menu \n    formControlName=\"selectMenu\"\n    (opened)=\"openEvent($event)\" \n    (closed)=\"closeEvent($event)\" \n    (selectedOption)=\"selectEvent($event)\" \n    [multiselect]=\"multiselect\"\n    [filterable]=\"filterable\"\n  >\n    <ui-select-option\n      *ngFor=\"let option of options\"\n      [value]=\"option\"\n      [selected]=\"formGroup.get('selectMenu')?.value.includes(option)\">\n      {{option}}\n    </ui-select-option>\n  </ui-select-menu>\n</div>\n`",
                "rawdescription": "Template used to render the stories (using a formGroup with pre-selected values)",
                "description": "<p>Template used to render the stories (using a formGroup with pre-selected values)</p>\n"
            },
            {
                "name": "formControlStart",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/date/date-range/date-range.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FormControl(today)",
                "rawdescription": "FormControl for start date",
                "description": "<p>FormControl for start date</p>\n"
            },
            {
                "name": "FormControlTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<any>",
                "defaultValue": "(args: any) => {\n  formControl.setValue(SIMPLE_OPTIONS[2]);\n  return {\n    template: `\n    <input\n    type=\"text\"\n    placeholder=\"Select a value\"\n    [formControl]=\"formControl\"\n    [uiAutocomplete]=\"auto\"\n    [autocompleteDisplayKey]=\"'label'\"\n    (opened)=\"openedAutocompletePanel()\"\n    (closed)=\"closesAutocompletePanel()\"\n    (optionSelected)=\"selectedOption($event)\"\n    class=\"relative w-full rounded-md border-0 p-1.5 shadow-sm ring-1 ring-inset sm:leading-6 focus:ring-2 focus:ring-inset\"\n  >\n  <ui-autocomplete #auto>\n  <ui-option *ngFor=\"let option of SIMPLE_OPTIONS\" [value]=\"option\">\n    {{option.label}}\n    <ng-container ngProjectsAs=\"icon\">\n    <ui-icon\n      icon=\"edit\"\n      [size]=\"18\"\n    ></ui-icon>\n    </ng-container>\n  </ui-option>\n  </ui-autocomplete>\n      <br>\n      <p>value: {{formControl.value | json}}</p>\n      <p>touched: {{formControl.touched}}</p>\n    `,\n    props: {\n      ...args,\n      SIMPLE_OPTIONS,\n      formControl,\n      openedAutocompletePanel,\n      closesAutocompletePanel,\n      selectedOption,\n    },\n  };\n}",
                "rawdescription": "Form control template autocomplete",
                "description": "<p>Form control template autocomplete</p>\n"
            },
            {
                "name": "FormControlTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/checkbox/checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<CheckboxComponent>",
                "defaultValue": "(\n  args: CheckboxComponent\n) => {\n  const formGroup = new FormGroup({\n    checkbox: new FormControl(false),\n  });\n  args.variant = 'default';\n  return {\n    component: CheckboxComponent,\n    template: `\n      <form [formGroup]=\"formGroup\">\n      <ui-checkbox [variant]=\"'${args.variant}'\" formControlName=\"checkbox\">\n      <ng-container ngProjectAs=\"label\">Form control checkbox</ng-container>\n      </ui-checkbox>\n        </form>\n        <br>\n        <p>value: {{formGroup.get('checkbox').value}}</p>\n        <p>touched: {{formGroup.get('checkbox').touched}}</p>\n        `,\n    props: {\n      ...args,\n      formGroup,\n    },\n  };\n}",
                "rawdescription": "Form control template checkbox",
                "description": "<p>Form control template checkbox</p>\n"
            },
            {
                "name": "FormControlTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/radio/radio.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<RadioComponent>",
                "defaultValue": "(args: RadioComponent) => {\n  args.name = 'notification-method';\n  return {\n    component: RadioComponent,\n    template: `\n    <div class=\"space-y-4\" [formControl]=\"formControl\" [uiRadioGroupDirective]=\"'${args.name}'\">\n    <ui-radio *ngFor=\"let option of radioOptions\" [disabled]=\"${args.disabled}\" [variant]=\"'${args.variant}'\" [value]=\"option.value\" >\n      <ng-container ngProjectAs=\"label\">{{option.label}}</ng-container>\n    </ui-radio>\n    </div>\n    <br>\n    <p>value: {{formControl.value}}</p>\n    <p>touched: {{formControl.touched}}</p>\n`,\n    props: {\n      ...args,\n      formControl,\n      radioOptions,\n    },\n  };\n}",
                "rawdescription": "Form control template radio",
                "description": "<p>Form control template radio</p>\n"
            },
            {
                "name": "FormControlTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/textarea/textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<TextareaComponent>",
                "defaultValue": "(\n  args: TextareaComponent\n) => {\n  const formGroup = new FormGroup({\n    textarea: new FormControl('Default value'),\n  });\n  return {\n    component: TextareaComponent,\n    template: `\n      <form [formGroup]=\"formGroup\">\n      <ui-textarea [placeholder]=\"'${args.placeholder}'\" formControlName=\"textarea\"></ui-textarea>\n        </form>\n        <br>\n        <p>value: {{formGroup.get('textarea').value}}</p>\n        <p>touched: {{formGroup.get('textarea').touched}}</p>\n        `,\n    props: {\n      ...args,\n      formGroup,\n    },\n  };\n}",
                "rawdescription": "Form control template textarea",
                "description": "<p>Form control template textarea</p>\n"
            },
            {
                "name": "FormControlTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/toggle/toggle.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<ToggleComponent>",
                "defaultValue": "(\n  args: ToggleComponent\n) => {\n  const formGroup = new FormGroup({\n    toggle: new FormControl(true),\n  });\n  return {\n    component: ToggleComponent,\n    template: `\n      <form [formGroup]=\"formGroup\">\n      <ui-toggle [type]=\"'${args.type}'\" [variant]=\"'${args.variant}'\" [labelPosition]=\"'${args.labelPosition}'\" formControlName=\"toggle\">\n        <ng-container ngProjectAs=\"label\">Test test test!</ng-container>\n        <ng-container ngProjectAs=\"description\">\n          Test test test test test test test test test test test test test\n        </ng-container>\n      </ui-toggle>\n        </form>\n        <br>\n        <p>value: {{formGroup.get('toggle').value}}</p>\n        <p>touched: {{formGroup.get('toggle').touched}}</p>\n        `,\n    props: {\n      ...args,\n      formGroup,\n    },\n  };\n}",
                "rawdescription": "Form control template toggle",
                "description": "<p>Form control template toggle</p>\n"
            },
            {
                "name": "formGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FormGroup({\n  selectMenu: new FormControl(),\n})",
                "rawdescription": "Form group to test select-menu control value accessor",
                "description": "<p>Form group to test select-menu control value accessor</p>\n"
            },
            {
                "name": "formGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/slider/slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FormGroup({\n  slider: new FormControl(4),\n})",
                "rawdescription": "Form group to test slider control value accessor",
                "description": "<p>Form group to test slider control value accessor</p>\n"
            },
            {
                "name": "FormRadio",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/radio/radio.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "FormControlTemplate.bind({})",
                "rawdescription": "Form control radio",
                "description": "<p>Form control radio</p>\n"
            },
            {
                "name": "FormTextarea",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/textarea/textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "FormControlTemplate.bind({})",
                "rawdescription": "Form control textarea",
                "description": "<p>Form control textarea</p>\n"
            },
            {
                "name": "FormToggle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/toggle/toggle.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "FormControlTemplate.bind({})",
                "rawdescription": "Form control toggle",
                "description": "<p>Form control toggle</p>\n"
            },
            {
                "name": "Full",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/breadcrumbs/breadcrumbs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<BreadcrumbsComponent>",
                "defaultValue": "{\n  args: {\n    breadcrumbs: [\n      {\n        text: 'item 0',\n        uri: '#',\n        showLabel: true,\n      },\n      {\n        text: 'item 1',\n        uri: '#',\n        showLabel: true,\n      },\n      {\n        text: 'item 2',\n        uri: '#',\n        showLabel: true,\n      },\n    ],\n    separator: 'chevron',\n    display: 'full',\n  },\n}",
                "rawdescription": "Full width story",
                "description": "<p>Full width story</p>\n"
            },
            {
                "name": "getRadioChangeSelection",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/radio/radio.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(radioSelectionChange: any) => {\n  selectedOption = radioSelectionChange;\n  addons.getChannel().emit(FORCE_RE_RENDER);\n}",
                "rawdescription": "Function to test radio change callback when no form control is used",
                "description": "<p>Function to test radio change callback when no form control is used</p>\n"
            },
            {
                "name": "GROUPED_OPTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    optionName: 'A',\n    channels: [\n      {\n        optionName: 'option A 1',\n      },\n    ],\n  },\n  {\n    optionName: 'B',\n    channels: [\n      {\n        optionName: 'B 1',\n      },\n      {\n        optionName: 'b',\n      },\n    ],\n  },\n  {\n    optionName: 'C',\n  },\n  {\n    optionName: 'D',\n    channels: [\n      {\n        optionName: 'D 1',\n      },\n      {\n        optionName: 'D two',\n      },\n      {\n        optionName: 'D a b',\n      },\n    ],\n  },\n]",
                "rawdescription": "Autocomplete grouped options example",
                "description": "<p>Autocomplete grouped options example</p>\n"
            },
            {
                "name": "GroupedAutocompletePanel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "GroupedAutocompletePanelTemplate.bind(\n  {}\n)",
                "rawdescription": "Autocomplete panel inject in a input with grouped options",
                "description": "<p>Autocomplete panel inject in a input with grouped options</p>\n"
            },
            {
                "name": "GroupedAutocompletePanelTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<any>",
                "defaultValue": "(args: any) => {\n  return {\n    template: `\n    <input\n    type=\"text\"\n    placeholder=\"Select a value\"\n    [uiAutocomplete]=\"auto\"\n    [autocompleteDisplayKey]=\"'optionName'\"\n    (opened)=\"openedAutocompletePanel()\"\n    (closed)=\"closesAutocompletePanel()\"\n    (optionSelected)=\"selectedOption($event)\"\n    class=\"relative w-full rounded-md border-0 p-1.5 shadow-sm ring-1 ring-inset sm:leading-6 focus:ring-2 focus:ring-inset\"\n  >\n  <ui-autocomplete #auto>\n  <ui-option [isGroup]=\"true\" *ngFor=\"let option of GROUPED_OPTIONS\">\n    {{option.optionName}}\n    <ui-option *ngFor=\"let child of option.channels\" [value]=\"child\">\n    {{child.optionName}}\n    <ng-container ngProjectsAs=\"icon\">\n    <ui-icon\n      icon=\"edit\"\n      [size]=\"18\"\n    ></ui-icon>\n    </ng-container>\n  </ui-option>\n  </ui-option>\n  <ui-autocomplete>\n    `,\n    props: {\n      ...args,\n      GROUPED_OPTIONS,\n      openedAutocompletePanel,\n      closesAutocompletePanel,\n      selectedOption,\n    },\n  };\n}",
                "rawdescription": "Grouped autocomplete template",
                "description": "<p>Grouped autocomplete template</p>\n"
            },
            {
                "name": "Horizontal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/divider/divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<DividerComponent>",
                "defaultValue": "{\n  args: {\n    position: 'center',\n    text: 'Test',\n    orientation: 'horizontal',\n  },\n}",
                "rawdescription": "Horizontal divider",
                "description": "<p>Horizontal divider</p>\n"
            },
            {
                "name": "hourlyExp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/\\d+ \\d+ 0\\/\\d+ 1\\/1 \\* [?*] \\*/",
                "rawdescription": "hourly regex",
                "description": "<p>hourly regex</p>\n"
            },
            {
                "name": "IconList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/icon/icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "AllIconsTemplate.bind({})",
                "rawdescription": "All icons",
                "description": "<p>All icons</p>\n"
            },
            {
                "name": "individualBtnArgs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "{\n  label: {\n    control: {\n      type: 'text',\n    },\n    description: 'Text content of the button ( storybook only ).',\n  },\n  category: {\n    options: categories,\n    control: {\n      type: 'select',\n    },\n  },\n  variant: {\n    options: variants,\n    control: {\n      type: 'select',\n    },\n    defaultValue: 'default',\n  },\n  iconPosition: {\n    options: buttonIconPositions,\n    control: {\n      type: 'select',\n    },\n    defaultValue: 'prefix',\n  },\n  icon: {\n    control: 'text',\n    defaultValue: '',\n  },\n  isIcon: {\n    control: {\n      type: 'boolean',\n    },\n    defaultValue: false,\n  },\n  loading: {\n    control: {\n      type: 'boolean',\n    },\n    defaultValue: false,\n  },\n  disabled: {\n    control: {\n      type: 'boolean',\n    },\n    defaultValue: false,\n  },\n} as Meta<StoryType>",
                "rawdescription": "ArgTypes for individual button stories",
                "description": "<p>ArgTypes for individual button stories</p>\n"
            },
            {
                "name": "ITEMS_PER_RELOAD",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/graphql-select/graphql-select.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "10",
                "rawdescription": "A constant that is used to determine how many items should be added on scroll.",
                "description": "<p>A constant that is used to determine how many items should be added on scroll.</p>\n"
            },
            {
                "name": "itemsArray",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/paginator/paginator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number[]",
                "defaultValue": "[...Array(100).keys()]",
                "rawdescription": "Total items for the paginator",
                "description": "<p>Total items for the paginator</p>\n"
            },
            {
                "name": "KendoFocusTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/textarea/textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<TextareaComponent>",
                "defaultValue": "(\n  args: TextareaComponent\n) => {\n  return {\n    component: TextareaComponent,\n    template: `\n      <ui-textarea kendoGridFocusable [placeholder]=\"'${args.placeholder}'\"></ui-textarea>\n        `,\n    props: {\n      ...args,\n    },\n  };\n}",
                "rawdescription": "Kendo focusable template textarea",
                "description": "<p>Kendo focusable template textarea</p>\n"
            },
            {
                "name": "KendoFocusTextarea",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/textarea/textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "KendoFocusTemplate.bind({})",
                "rawdescription": "Kendo focus textarea",
                "description": "<p>Kendo focus textarea</p>\n"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/spinner/spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Large spinner",
                "description": "<p>Large spinner</p>\n"
            },
            {
                "name": "largeSpinner",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/spinner/spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  size: 'large',\n}",
                "rawdescription": "Large spinner",
                "description": "<p>Large spinner</p>\n"
            },
            {
                "name": "LeftBottomCornerMenu",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/menu/menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "LeftBottomCornerMenuTemplate.bind({})",
                "rawdescription": "Menu template in bottom left corner of screen",
                "description": "<p>Menu template in bottom left corner of screen</p>\n"
            },
            {
                "name": "LeftBottomCornerMenuTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/menu/menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<MenuComponent>",
                "defaultValue": "(\n  args: MenuComponent\n) => {\n  return {\n    component: MenuComponent,\n    template: `\n    <div style=\"height: calc(100vh - 50px)\" class=\"flex items-end\">\n    <ui-button  [uiMenuTriggerFor]=\"menu\">Open menu</ui-button>\n    </div>\n    ${menuItemsTemplate} `,\n    props: {\n      ...args,\n      clickEvent,\n    },\n  };\n}",
                "rawdescription": "Menu template",
                "description": "<p>Menu template</p>\n"
            },
            {
                "name": "LeftExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/tooltip/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Middle left element",
                "description": "<p>Middle left element</p>\n"
            },
            {
                "name": "LeftTopCornerMenu",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/menu/menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "LeftTopCornerMenuTemplate.bind({})",
                "rawdescription": "Menu template in top left corner of screen",
                "description": "<p>Menu template in top left corner of screen</p>\n"
            },
            {
                "name": "LeftTopCornerMenuTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/menu/menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<MenuComponent>",
                "defaultValue": "(\n  args: MenuComponent\n) => {\n  return {\n    component: MenuComponent,\n    template: `\n    <div class=\"flex justify-start\">\n    <ui-button [uiMenuTriggerFor]=\"menu\">Open menu</ui-button>\n    </div>\n    ${menuItemsTemplate}`,\n    props: {\n      ...args,\n      clickEvent,\n    },\n  };\n}",
                "rawdescription": "Menu template",
                "description": "<p>Menu template</p>\n"
            },
            {
                "name": "LongTextExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/tooltip/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Long text element",
                "description": "<p>Long text element</p>\n"
            },
            {
                "name": "Medium",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/spinner/spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Medium spinner",
                "description": "<p>Medium spinner</p>\n"
            },
            {
                "name": "mediumSpinner",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/spinner/spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  size: 'medium',\n}",
                "rawdescription": "Medium spinner",
                "description": "<p>Medium spinner</p>\n"
            },
            {
                "name": "menuItemsTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/menu/menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`<ui-menu #menu>\n  <div uiMenuItem (click)=\"clickEvent('First')\">Button 1</div>\n  <ui-divider></ui-divider>\n  <div uiMenuItem (click)=\"clickEvent('Second')\">Button 2</div>\n  <ui-divider></ui-divider>\n  <div uiMenuItem (click)=\"clickEvent('Third')\">Button 3</div>\n  </ui-menu>`",
                "rawdescription": "Default menu items template",
                "description": "<p>Default menu items template</p>\n"
            },
            {
                "name": "minutesExp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/\\d+ 0\\/\\d+ \\* 1\\/1 \\* [?*] \\*/",
                "rawdescription": "minutes regex",
                "description": "<p>minutes regex</p>\n"
            },
            {
                "name": "monthlyExpo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/\\d+ \\d+ \\d+ (\\d+|L|LW|1W) 1\\/\\d+ [?*] \\*/",
                "rawdescription": "monthly regex",
                "description": "<p>monthly regex</p>\n"
            },
            {
                "name": "monthlyWeekdayExpo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/\\d+ \\d+ \\d+ [?*] 1\\/\\d+ (MON|TUE|WED|THU|FRI|SAT|SUN)((#[1-5])|L) \\*/",
                "rawdescription": "MonthlyWeekday regex",
                "description": "<p>MonthlyWeekday regex</p>\n"
            },
            {
                "name": "MultiPanel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/expansion-panel/expansion-panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateMulti.bind({})",
                "rawdescription": "Multi expansion panel",
                "description": "<p>Multi expansion panel</p>\n"
            },
            {
                "name": "MultiSelection",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateMultiSelection.bind({})",
                "rawdescription": "Actual export of multi select story",
                "description": "<p>Actual export of multi select story</p>\n"
            },
            {
                "name": "onClose",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/expansion-panel/expansion-panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {\n  console.log('panel closed');\n}",
                "rawdescription": "Test panel close",
                "description": "<p>Test panel close</p>\n"
            },
            {
                "name": "openedAutocompletePanel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {\n  console.log('Opened autocomplete panel event');\n}",
                "rawdescription": "Callback to test the autocomplete directive opened event",
                "description": "<p>Callback to test the autocomplete directive opened event</p>\n"
            },
            {
                "name": "openEvent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {\n  console.log('isOpened');\n}",
                "rawdescription": "Used to test if emission of output \"opened\" works",
                "description": "<p>Used to test if emission of output &quot;opened&quot; works</p>\n"
            },
            {
                "name": "options",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  'french',\n  'spanish',\n  'english',\n  'japanese',\n  'javanese',\n  'chinese',\n]",
                "rawdescription": "List of options for the select menu included template",
                "description": "<p>List of options for the select menu included template</p>\n"
            },
            {
                "name": "options",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  'French',\n  'English',\n  'Japanese',\n  'Javanese',\n  'Polish',\n  'German',\n  'Spanish',\n  'Dutch',\n  'Chinese',\n]",
                "rawdescription": "Options for select menu",
                "description": "<p>Options for select menu</p>\n"
            },
            {
                "name": "OutlineFalse",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Outline = False design",
                "description": "<p>Outline = False design</p>\n"
            },
            {
                "name": "OutlineFalseAutocomplete",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateAutocomplete.bind({})",
                "rawdescription": "Outline = False design + use of autocomplete",
                "description": "<p>Outline = False design + use of autocomplete</p>\n"
            },
            {
                "name": "OutlineFalseSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateSelect.bind({})",
                "rawdescription": "Outline = False design + use of select menu",
                "description": "<p>Outline = False design + use of select menu</p>\n"
            },
            {
                "name": "OutlineTrue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Outline = True design",
                "description": "<p>Outline = True design</p>\n"
            },
            {
                "name": "OutlineTrueAutocomplete",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateAutocomplete.bind({})",
                "rawdescription": "Outline = True design + use of autocomplete",
                "description": "<p>Outline = True design + use of autocomplete</p>\n"
            },
            {
                "name": "OutlineTrueSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateSelect.bind({})",
                "rawdescription": "Outline = True design + use of select menu",
                "description": "<p>Outline = True design + use of select menu</p>\n"
            },
            {
                "name": "OverlaySidenav",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/sidenav/sidenav.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "OverlaySidenavTemplate.bind({})",
                "rawdescription": "Sidenav sidenav",
                "description": "<p>Sidenav sidenav</p>\n"
            },
            {
                "name": "OverlaySidenavTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/sidenav/sidenav.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<SidenavContainerComponent>",
                "defaultValue": "(\n  args: SidenavContainerComponent\n) => {\n  args.showSidenav = [true];\n  return {\n    component: SidenavContainerComponent,\n    template: `\n      <ui-sidenav-container>\n        <ng-container ngProjectAs=\"content\">\n        <div class=\"flex flex-col\">\n        <ui-button class=\"mx-auto\" (click)=\"nav.toggle()\">Toggle sidenav</ui-button>\n          <p class=\"mt-3 mx-auto\">Main content</p>\n          </div>\n        </ng-container>\n        <div\n          uiSidenavDirective\n          #nav=\"uiSidenavDirective\"\n          [(opened)]=\"showSidenav\"\n          [mode]=\"'over'\"\n          ngProjectAs=\"sidenavContent\"\n        >\n          <div *ngFor=\"let i of [].constructor(25)\">Sidenav Content</div>\n        </div>\n      </ui-sidenav-container>\n    `,\n    props: {\n      ...args,\n    },\n  };\n}",
                "rawdescription": "Overlay sidenav template",
                "description": "<p>Overlay sidenav template</p>\n"
            },
            {
                "name": "pageChange",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/paginator/paginator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(event: UIPageChangeEvent) => {\n  console.log('UIPageChangeEvent: ', event);\n  pagedItems = [...itemsArray.slice(event.skip, event.skip + event.pageSize)];\n  addons.getChannel().emit(FORCE_RE_RENDER);\n}",
                "rawdescription": "Custom method to update paged items for story testing",
                "description": "<p>Custom method to update paged items for story testing</p>\n"
            },
            {
                "name": "pagedItems",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/paginator/paginator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number[]",
                "defaultValue": "itemsArray.filter((value) => value < 10)"
            },
            {
                "name": "Paginator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/paginator/paginator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Paginator story",
                "description": "<p>Paginator story</p>\n"
            },
            {
                "name": "panelOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/expansion-panel/expansion-panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "PanelOption[]",
                "defaultValue": "[\n  {\n    title: 'Item 1',\n    expanded: true,\n    text: 'Lorem ipsum dolor, sit amet consectetur adipisicing elit. Perferendis excepturi incidunt ipsum deleniti labore, tempore non nam doloribus blanditiis veritatis illo autem iure aliquid ullam rem tenetur deserunt velit culpa?',\n  },\n  {\n    title: 'Item 2',\n    expanded: false,\n    text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Repudiandae ab harum eius, ullam, ex expedita animi nihil, et ut fugit commodi quam! Saepe, recusandae quo sapiente id quidem velit, beatae error distinctio asperiores nesciunt officiis iusto. Sed, aliquid labore pariatur, optio sequi recusandae blanditiis voluptas perferendis sint eveniet inventore harum porro nemo consequatur nesciunt quos delectus, id amet quae? Exercitationem ab debitis ipsum sapiente? A, culpa, quaerat assumenda amet nulla id, quod quia facilis tempora fugit aut provident natus omnis doloremque dolorem odit! Voluptatum assumenda, ipsum vel architecto possimus adipisci ipsam. Fugiat hic impedit rem voluptatem expedita architecto fugit.',\n  },\n  {\n    title: 'Item 3',\n    expanded: false,\n    text: 'Lorem ipsum dolor, sit amet consectetur adipisicing elit. Perferendis excepturi incidunt ipsum deleniti labore, tempore non nam doloribus blanditiis veritatis illo autem iure aliquid ullam rem tenetur deserunt velit culpa?',\n  },\n]"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Primary button",
                "description": "<p>Primary button</p>\n"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/checkbox/checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Primary checkbox",
                "description": "<p>Primary checkbox</p>\n"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/radio/radio.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Primary radio",
                "description": "<p>Primary radio</p>\n"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/textarea/textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Primary textarea",
                "description": "<p>Primary textarea</p>\n"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/toggle/toggle.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "PrimaryTemplate.bind({})",
                "rawdescription": "Primary toggle",
                "description": "<p>Primary toggle</p>\n"
            },
            {
                "name": "primaryButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  label: 'Primary button',\n  category: 'primary',\n  variant: 'default',\n  size: 'medium',\n  icon: '',\n}",
                "rawdescription": "Primary button",
                "description": "<p>Primary button</p>\n"
            },
            {
                "name": "PrimaryCircleAvatarLarge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/avatar/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<AvatarComponent>",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    shape: 'circle',\n    initials: '',\n    image: '',\n    variant: 'primary',\n  },\n}",
                "rawdescription": "Primary large circle avatar story",
                "description": "<p>Primary large circle avatar story</p>\n"
            },
            {
                "name": "PrimaryCircleAvatarMedium",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/avatar/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<AvatarComponent>",
                "defaultValue": "{\n  args: {\n    size: 'medium',\n    shape: 'circle',\n    initials: '',\n    image: '',\n    variant: 'primary',\n  },\n}",
                "rawdescription": "Primary medium circle avatar story",
                "description": "<p>Primary medium circle avatar story</p>\n"
            },
            {
                "name": "PrimaryCircleAvatarSmall",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/avatar/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<AvatarComponent>",
                "defaultValue": "{\n  args: {\n    size: 'small',\n    shape: 'circle',\n    initials: '',\n    image: '',\n    variant: 'primary',\n  },\n}",
                "rawdescription": "Primary small circle avatar story",
                "description": "<p>Primary small circle avatar story</p>\n"
            },
            {
                "name": "PrimaryCircleImageAvatarLarge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/avatar/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<AvatarComponent>",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    shape: 'circle',\n    initials: '',\n    image:\n      'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80',\n    variant: 'primary',\n  },\n}",
                "rawdescription": "Primary large circle avatar with image story",
                "description": "<p>Primary large circle avatar with image story</p>\n"
            },
            {
                "name": "PrimaryRectangleAvatarLarge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/avatar/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<AvatarComponent>",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    shape: 'rectangle',\n    initials: '',\n    image: '',\n    variant: 'primary',\n  },\n}",
                "rawdescription": "Primary large rectangle avatar story",
                "description": "<p>Primary large rectangle avatar story</p>\n"
            },
            {
                "name": "PrimaryRectangleAvatarMedium",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/avatar/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<AvatarComponent>",
                "defaultValue": "{\n  args: {\n    size: 'medium',\n    shape: 'rectangle',\n    initials: '',\n    image: '',\n    variant: 'primary',\n  },\n}",
                "rawdescription": "Primary medium rectangle avatar story",
                "description": "<p>Primary medium rectangle avatar story</p>\n"
            },
            {
                "name": "PrimaryRectangleAvatarSmall",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/avatar/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<AvatarComponent>",
                "defaultValue": "{\n  args: {\n    size: 'small',\n    shape: 'rectangle',\n    initials: '',\n    image: '',\n    variant: 'primary',\n  },\n}",
                "rawdescription": "Primary small rectangle avatar story",
                "description": "<p>Primary small rectangle avatar story</p>\n"
            },
            {
                "name": "PrimaryRectangleImageAvatarLarge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/avatar/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<AvatarComponent>",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    shape: 'rectangle',\n    initials: '',\n    image:\n      'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80',\n    variant: 'primary',\n  },\n}",
                "rawdescription": "Primary large rectangle with image avatar story",
                "description": "<p>Primary large rectangle with image avatar story</p>\n"
            },
            {
                "name": "PrimaryTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/toggle/toggle.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<ToggleComponent>",
                "defaultValue": "(args: ToggleComponent) => {\n  args.icon = {\n    disableIcon: 'close',\n    enableIcon: 'save',\n  };\n  return {\n    component: ToggleComponent,\n    template: `\n      <ui-toggle [type]=\"'${args.type}'\" [icon]=\"icon\" [variant]=\"'${args.variant}'\" [labelPosition]=\"'${args.labelPosition}'\">\n        <ng-container ngProjectAs=\"label\">Test test test!</ng-container>\n        <ng-container ngProjectAs=\"description\">\n          Test test test test test test test test test test test test test\n        </ng-container>\n      </ui-toggle>\n        `,\n    props: {\n      ...args,\n    },\n  };\n}",
                "rawdescription": "Primary template toggle",
                "description": "<p>Primary template toggle</p>\n"
            },
            {
                "name": "PushSidenav",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/sidenav/sidenav.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "PushSidenavTemplate.bind({})",
                "rawdescription": "Sidenav sidenav",
                "description": "<p>Sidenav sidenav</p>\n"
            },
            {
                "name": "PushSidenavTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/sidenav/sidenav.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<SidenavContainerComponent>",
                "defaultValue": "(\n  args: SidenavContainerComponent\n) => {\n  args.showSidenav = [true];\n  return {\n    component: SidenavContainerComponent,\n    template: `\n      <ui-sidenav-container>\n        <ng-container ngProjectAs=\"content\">\n        <ui-button (click)=\"nav.toggle()\">Toggle sidenav</ui-button>\n          <p class=\"mt-3\">Main content</p>\n        </ng-container>\n        <div\n          uiSidenavDirective\n          #nav=\"uiSidenavDirective\"\n          [(opened)]=\"showSidenav\"\n          ngProjectAs=\"sidenavContent\"\n        >\n          <div *ngFor=\"let i of [].constructor(25)\">Sidenav Content</div>\n        </div>\n      </ui-sidenav-container>\n    `,\n    props: {\n      ...args,\n    },\n  };\n}",
                "rawdescription": "Push sidenav template",
                "description": "<p>Push sidenav template</p>\n"
            },
            {
                "name": "radioOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/radio/radio.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "RadioOption[]",
                "defaultValue": "[\n  {\n    label: 'Email',\n    value: 'email',\n  },\n  {\n    label: 'Phone (SMS)',\n    value: 'sms',\n  },\n  {\n    label: 'Push Notification',\n    value: 'push',\n  },\n]"
            },
            {
                "name": "removeStatus",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(index: number) => {\n  statuses.splice(index, 1);\n}",
                "rawdescription": "Callback to test the chip remove event",
                "description": "<p>Callback to test the chip remove event</p>\n"
            },
            {
                "name": "RightBottomCornerMenu",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/menu/menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "RightBottomCornerMenuTemplate.bind({})",
                "rawdescription": "Menu template in bottom right corner of screen",
                "description": "<p>Menu template in bottom right corner of screen</p>\n"
            },
            {
                "name": "RightBottomCornerMenuTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/menu/menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<MenuComponent>",
                "defaultValue": "(\n  args: MenuComponent\n) => {\n  return {\n    component: MenuComponent,\n    template: `\n    <div style=\"height: calc(100vh - 50px)\" class=\"flex justify-end items-end\">\n    <ui-button  [uiMenuTriggerFor]=\"menu\">Open menu</ui-button>\n    </div> \n    ${menuItemsTemplate}`,\n    props: {\n      ...args,\n      clickEvent,\n    },\n  };\n}",
                "rawdescription": "Menu template",
                "description": "<p>Menu template</p>\n"
            },
            {
                "name": "RightExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/tooltip/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Middle right element",
                "description": "<p>Middle right element</p>\n"
            },
            {
                "name": "RightTopCornerMenu",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/menu/menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "RightTopCornerMenuTemplate.bind({})",
                "rawdescription": "Menu template in top right corner of screen",
                "description": "<p>Menu template in top right corner of screen</p>\n"
            },
            {
                "name": "RightTopCornerMenuTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/menu/menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<MenuComponent>",
                "defaultValue": "(\n  args: MenuComponent\n) => {\n  return {\n    component: MenuComponent,\n    template: `\n    <div class=\"flex justify-end\">\n    <ui-button [uiMenuTriggerFor]=\"menu\">Open menu</ui-button>\n    </div>\n    ${menuItemsTemplate} `,\n    props: {\n      ...args,\n      clickEvent,\n    },\n  };\n}",
                "rawdescription": "Menu template",
                "description": "<p>Menu template</p>\n"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Secondary button",
                "description": "<p>Secondary button</p>\n"
            },
            {
                "name": "secondaryButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  label: 'Secondary button',\n  category: 'secondary',\n  variant: 'default',\n  size: 'medium',\n  icon: '',\n}",
                "rawdescription": "Secondary button",
                "description": "<p>Secondary button</p>\n"
            },
            {
                "name": "SecondaryCircleAvatarLarge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/avatar/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<AvatarComponent>",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    shape: 'circle',\n    initials: '',\n    image: '',\n    variant: 'secondary',\n  },\n}",
                "rawdescription": "Secondary large circle avatar story",
                "description": "<p>Secondary large circle avatar story</p>\n"
            },
            {
                "name": "SecondaryRectangleAvatarLarge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/avatar/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<AvatarComponent>",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    shape: 'rectangle',\n    initials: '',\n    image: '',\n    variant: 'secondary',\n  },\n}",
                "rawdescription": "Secondary large rectangle avatar story",
                "description": "<p>Secondary large rectangle avatar story</p>\n"
            },
            {
                "name": "selectedOption",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(option: string) => {\n  console.log('Option selected: ', option);\n}",
                "rawdescription": "Callback to test the autocomplete directive optionSelected event",
                "description": "<p>Callback to test the autocomplete directive optionSelected event</p>\n"
            },
            {
                "name": "selectedOption",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/radio/radio.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "selectEvent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(event: any) => {\n  console.log('Select Event: ', event);\n  console.log('Form control: ', formGroup.get('selectMenu')?.value);\n}",
                "rawdescription": "Used to test if emission of output \"selectedOption\" works",
                "description": "<p>Used to test if emission of output &quot;selectedOption&quot; works</p>\n"
            },
            {
                "name": "selectMenuTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`<div [formGroup]=\"formGroup\" class=\"py-5\">\n${selectTemplate}\n</div>\n`",
                "rawdescription": "Template used to render the stories (using a formGroup)",
                "description": "<p>Template used to render the stories (using a formGroup)</p>\n"
            },
            {
                "name": "selectTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`<ui-select-menu \n  formControlName=\"selectMenu\"\n  (opened)=\"openEvent($event)\" \n  (closed)=\"closeEvent($event)\" \n  (selectedOption)=\"selectEvent($event)\" \n  [multiselect]=\"multiselect\"\n  [disabled]=\"disabled\"\n  [filterable]=\"filterable\">\n  <ui-select-option *ngFor=\"let option of options\" [value]=\"option\">\n    {{option}}\n  </ui-select-option>\n</ui-select-menu>`",
                "rawdescription": "Select with no custom template",
                "description": "<p>Select with no custom template</p>\n"
            },
            {
                "name": "separatorKeysCodes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[ENTER, COMMA]",
                "rawdescription": "Separator key codes for story testing",
                "description": "<p>Separator key codes for story testing</p>\n"
            },
            {
                "name": "SIMPLE_OPTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    label: 'A',\n  },\n  {\n    label: 'a B',\n  },\n  {\n    label: 'C',\n  },\n  {\n    label: 'D',\n  },\n]",
                "rawdescription": "Autocomplete options example",
                "description": "<p>Autocomplete options example</p>\n"
            },
            {
                "name": "SimpleAutocompletePanel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "SimpleAutocompletePanelTemplate.bind({})",
                "rawdescription": "Autocomplete panel inject in a input with simples (not grouped) options",
                "description": "<p>Autocomplete panel inject in a input with simples (not grouped) options</p>\n"
            },
            {
                "name": "SimpleAutocompletePanelTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<any>",
                "defaultValue": "(args: any) => {\n  return {\n    component: AutocompleteComponent,\n    template: `\n      <input\n        type=\"text\"\n        placeholder=\"Select a value\"\n        [uiAutocomplete]=\"auto\"\n        [autocompleteDisplayKey]=\"'label'\"\n        (opened)=\"openedAutocompletePanel()\"\n        (closed)=\"closesAutocompletePanel()\"\n        (optionSelected)=\"selectedOption($event)\"\n        class=\"relative w-full rounded-md border-0 p-1.5 shadow-sm ring-1 ring-inset sm:leading-6 focus:ring-2 focus:ring-inset\"\n      >\n      <ui-autocomplete #auto>\n      <ui-option *ngFor=\"let option of SIMPLE_OPTIONS\" [value]=\"option\">\n        {{option.label}}\n        <ng-container ngProjectsAs=\"icon\">\n        <ui-icon\n          icon=\"edit\"\n          [size]=\"18\"\n        ></ui-icon>\n        </ng-container>\n      </ui-option>\n      <ui-autocomplete>\n    `,\n    props: {\n      ...args,\n      SIMPLE_OPTIONS,\n      openedAutocompletePanel,\n      closesAutocompletePanel,\n      selectedOption,\n    },\n  };\n}",
                "rawdescription": "Simple autocomplete template",
                "description": "<p>Simple autocomplete template</p>\n"
            },
            {
                "name": "SimpleChevron",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/breadcrumbs/breadcrumbs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<BreadcrumbsComponent>",
                "defaultValue": "{\n  args: {\n    breadcrumbs: [\n      {\n        text: 'item 0',\n        uri: '#',\n        showLabel: true,\n      },\n      {\n        text: 'item 1',\n        uri: '#',\n        showLabel: true,\n      },\n      {\n        text: 'item 2',\n        uri: '#',\n        showLabel: true,\n      },\n    ],\n    separator: 'chevron',\n    display: 'simple',\n  },\n}",
                "rawdescription": "Simple Chevron story",
                "description": "<p>Simple Chevron story</p>\n"
            },
            {
                "name": "SimpleSlash",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/breadcrumbs/breadcrumbs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<BreadcrumbsComponent>",
                "defaultValue": "{\n  args: {\n    breadcrumbs: [\n      {\n        text: 'item 0',\n        uri: '#',\n        showLabel: true,\n      },\n      {\n        text: 'item 1',\n        uri: '#',\n        showLabel: true,\n      },\n      {\n        text: 'item 2',\n        uri: '#',\n        showLabel: true,\n      },\n    ],\n    separator: 'slash',\n    display: 'simple',\n  },\n}",
                "rawdescription": "Simple slash story",
                "description": "<p>Simple slash story</p>\n"
            },
            {
                "name": "singleSelectMenuTemplateWithTrigger",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`<div [formGroup]=\"formGroup\" class=\"py-5\">\n${customTriggerSelectTemplate}\n</div>\n`",
                "rawdescription": "Template used to render the stories (using a formGroup) and use of a ngTemplate as selectTriggerTemplate input",
                "description": "<p>Template used to render the stories (using a formGroup) and use of a ngTemplate as selectTriggerTemplate input</p>\n"
            },
            {
                "name": "Slider",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/slider/slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "One to fourteen slider version",
                "description": "<p>One to fourteen slider version</p>\n"
            },
            {
                "name": "sliderTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/slider/slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`<div [formGroup]=\"formGroup\" class=\"py-5\">\n<ui-slider formControlName=\"slider\" [minValue]=\"minValue\" [maxValue]=\"maxValue\"></ui-slider>\n</div>\n<br>\n<p>value: {{formGroup.get('slider').value}}</p>\n<p>touched: {{formGroup.get('slider').touched}}</p>\n`",
                "rawdescription": "Slider default template",
                "description": "<p>Slider default template</p>\n"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/spinner/spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Small spinner",
                "description": "<p>Small spinner</p>\n"
            },
            {
                "name": "smallSpinner",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/spinner/spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  size: 'small',\n}",
                "rawdescription": "Small spinner",
                "description": "<p>Small spinner</p>\n"
            },
            {
                "name": "Snackbar",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/snackbar/snackbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "LaunchSnackbarComponent",
                "description": "<p>LaunchSnackbarComponent</p>\n"
            },
            {
                "name": "sortTableByKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/table/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(column: TableSort) => {\n  console.log(column);\n}",
                "rawdescription": "Console log receive table sort data",
                "description": "<p>Console log receive table sort data</p>\n"
            },
            {
                "name": "StandaloneSelection",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateStandaloneSelection.bind({})",
                "rawdescription": "Actual export of standalone select story",
                "description": "<p>Actual export of standalone select story</p>\n"
            },
            {
                "name": "StandaloneSelectionDefaultValue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateStandaloneSelectionDefaultValue.bind({})",
                "rawdescription": "Actual export of standalone select story",
                "description": "<p>Actual export of standalone select story</p>\n"
            },
            {
                "name": "statuses",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "['Active', 'Pending', 'Archived']",
                "rawdescription": "Status array for story testing",
                "description": "<p>Status array for story testing</p>\n"
            },
            {
                "name": "Table",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/table/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Table component",
                "description": "<p>Table component</p>\n"
            },
            {
                "name": "tableData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/table/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MockedTable[]",
                "defaultValue": "[\n  {\n    name: 'Name 1',\n    email: { value: 'email@email.com' },\n    phone: { value: '111111111' },\n    cityVal: 'City 1',\n    isValid: false,\n    id: '1',\n  },\n  {\n    name: 'Name 3',\n    email: { value: 'email@email.com' },\n    phone: { value: '333333333' },\n    cityVal: 'City 3',\n    isValid: true,\n    id: '3',\n  },\n  {\n    name: 'Name 2',\n    email: { value: 'email@email.com' },\n    phone: { value: '222222222' },\n    cityVal: 'City 2',\n    isValid: true,\n    id: '2',\n  },\n  {\n    name: 'Name 4',\n    email: { value: 'email@email.com' },\n    phone: { value: '444444444' },\n    cityVal: 'City 4',\n    isValid: false,\n    id: '4',\n  },\n  {\n    name: 'Name 5',\n    email: { value: 'email@email.com' },\n    phone: { value: '555555555' },\n    cityVal: 'City 5',\n    isValid: false,\n    id: '5',\n  },\n  {\n    name: 'Name 6',\n    email: { value: 'email@email.com' },\n    phone: { value: '666666666' },\n    cityVal: 'City 6',\n    isValid: true,\n    id: '6',\n  },\n  {\n    name: 'Name 1',\n    email: { value: 'email@email.com' },\n    phone: { value: '111111111' },\n    cityVal: 'City 1',\n    isValid: false,\n    id: '1',\n  },\n  {\n    name: 'Name 3',\n    email: { value: 'email@email.com' },\n    phone: { value: '333333333' },\n    cityVal: 'City 3',\n    isValid: true,\n    id: '3',\n  },\n  {\n    name: 'Name 2',\n    email: { value: 'email@email.com' },\n    phone: { value: '222222222' },\n    cityVal: 'City 2',\n    isValid: true,\n    id: '2',\n  },\n  {\n    name: 'Name 4',\n    email: { value: 'email@email.com' },\n    phone: { value: '444444444' },\n    cityVal: 'City 4',\n    isValid: false,\n    id: '4',\n  },\n  {\n    name: 'Name 5',\n    email: { value: 'email@email.com' },\n    phone: { value: '555555555' },\n    cityVal: 'City 5',\n    isValid: false,\n    id: '5',\n  },\n  {\n    name: 'Name 6',\n    email: { value: 'email@email.com' },\n    phone: { value: '666666666' },\n    cityVal: 'City 6',\n    isValid: true,\n    id: '6',\n  },\n  {\n    name: 'Name 1',\n    email: { value: 'email@email.com' },\n    phone: { value: '111111111' },\n    cityVal: 'City 1',\n    isValid: false,\n\n    id: '1',\n  },\n  {\n    name: 'Name 3',\n    email: { value: 'email@email.com' },\n    phone: { value: '333333333' },\n    cityVal: 'City 3',\n    isValid: true,\n    id: '3',\n  },\n  {\n    name: 'Name 2',\n    email: { value: 'email@email.com' },\n    phone: { value: '222222222' },\n    cityVal: 'City 2',\n    isValid: true,\n    id: '2',\n  },\n  {\n    name: 'Name 4',\n    email: { value: 'email@email.com' },\n    phone: { value: '444444444' },\n    cityVal: 'City 4',\n    isValid: false,\n    id: '4',\n  },\n  {\n    name: 'Name 5',\n    email: { value: 'email@email.com' },\n    phone: { value: '555555555' },\n    cityVal: 'City 5',\n    isValid: false,\n    id: '5',\n  },\n  {\n    name: 'Name 6',\n    email: { value: 'email@email.com' },\n    phone: { value: '666666666' },\n    cityVal: 'City 6',\n    isValid: true,\n    id: '6',\n  },\n]",
                "rawdescription": "Mocked table data",
                "description": "<p>Mocked table data</p>\n"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<StoryType>",
                "defaultValue": "(args: StoryType) => {\n  return {\n    template: `\n      <ui-button\n        (click)=\"testClick()\"\n        [disabled]=\"${args.disabled}\"\n        icon=\"${args.icon}\"\n        iconPosition=\"${args.iconPosition}\"\n        [loading]=\"${args.loading}\"\n        [isIcon]=\"${args.isIcon}\"\n        [size]=\"'${args.size}'\"\n        [variant]=\"'${args.variant}'\"\n        [category]=\"'${args.category}'\"\n      >\n        ${args.label}\n      </ui-button>\n    `,\n    props: {\n      ...args,\n      testClick,\n    },\n  };\n}",
                "rawdescription": "Template button",
                "description": "<p>Template button</p>\n"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/checkbox/checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<CheckboxComponent>",
                "defaultValue": "(args: CheckboxComponent) => {\n  args.variant = 'default';\n  return {\n    component: CheckboxComponent,\n    template: `\n      <ui-checkbox [variant]=\"'${args.variant}'\">\n      <ng-container ngProjectAs=\"label\">Checkbox text</ng-container>\n      <ng-container ngProjectAs=\"description\">Description text text text.</ng-container>\n      <ng-container ngProjectAs=\"icon\">\n      <ui-icon\n      icon=\"info_outline\"\n      [inline]=\"true\"\n      [size]=\"18\"\n      variant=\"grey\"\n    ></ui-icon>\n      </ng-container>\n      </ui-checkbox>\n        `,\n    props: {\n      ...args,\n    },\n  };\n}",
                "rawdescription": "Template checkbox",
                "description": "<p>Template checkbox</p>\n"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/dialog/dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<LaunchDialogComponent>",
                "defaultValue": "(\n  args: LaunchDialogComponent\n) => ({\n  props: args,\n})",
                "rawdescription": "Template launchDialog",
                "description": "<p>Template launchDialog</p>\n"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/expansion-panel/expansion-panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<ExpansionPanelComponent>",
                "defaultValue": "(\n  args: ExpansionPanelComponent\n) => {\n  return {\n    component: ExpansionPanelComponent,\n    template: `\n      <cdk-accordion>\n        <ui-expansion-panel \n          *ngFor=\"let panel of panelOptions; let i = index;\" \n          [disabled]=\"${args.disabled}\" \n          [displayIcon]=\"${args.displayIcon}\" \n          [expanded]=\"panel.expanded\"\n          [index]=\"i\"\n          (closePanel)=\"onClose()\"\n        >\n          <ng-container ngProjectAs=\"title\">\n            {{panel.title}}\n          </ng-container>\n          <p class=\"mb-2 text-gray-500\">{{panel.text}}</p>\n        </ui-expansion-panel>\n      </cdk-accordion>\n    `,\n    props: {\n      ...args,\n      panelOptions,\n      onClose,\n    },\n  };\n}",
                "rawdescription": "Template expansion panel group",
                "description": "<p>Template expansion panel group</p>\n"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<any>",
                "defaultValue": "(args: any) => {\n  return {\n    template: `<div uiFormFieldDirective [outline]=\"${args.outline}\">\n    <label>Phone Number</label>\n    <input type=\"text\" name=\"account-number\" id=\"account-number\" placeholder=\"000-00-0000\"/>\n    <ui-spinner [size]=\"'medium'\" uiSuffix></ui-spinner>\n    <ui-icon icon=\"search\" uiPrefix></ui-icon>\n  </div>`,\n    props: {\n      ...args,\n    },\n  };\n}",
                "rawdescription": "Template to create form wrapper component's story",
                "description": "<p>Template to create form wrapper component&#39;s story</p>\n"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/icon/icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<IconComponent>",
                "defaultValue": "(args: IconComponent) => ({\n  props: args,\n})",
                "rawdescription": "Icon component template",
                "description": "<p>Icon component template</p>\n"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/paginator/paginator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<PaginatorComponent>",
                "defaultValue": "(args: PaginatorComponent) => {\n  return {\n    component: PaginatorComponent,\n    template: `\n    <div class=\"overflow-y-auto max-h-70\">\n      <ng-container *ngFor=\"let item of pagedItems\">\n        <p>{{item}}</p>\n      </ng-container>\n    </div>\n    <ui-paginator [disabled]=\"${args.disabled}\" (pageChange)=\"pageChange($event)\" [totalItems]=\"itemsArray.length\" ></ui-paginator>\n        `,\n    props: {\n      ...args,\n      itemsArray,\n      pagedItems,\n      pageChange,\n    },\n  };\n}",
                "rawdescription": "Paginator template",
                "description": "<p>Paginator template</p>\n"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/radio/radio.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<RadioComponent>",
                "defaultValue": "(args: RadioComponent) => {\n  args.name = 'notification-method';\n  return {\n    component: RadioComponent,\n    template: `\n    <div class=\"space-y-4\" (groupValueChange)=\"getRadioChangeSelection($event)\" [uiRadioGroupDirective]=\"'${args.name}'\">\n    <ui-radio *ngFor=\"let option of radioOptions; \" [disabled]=\"${args.disabled}\" [variant]=\"'${args.variant}'\" [value]=\"option.value\">\n      <ng-container ngProjectAs=\"label\">{{option.label}}</ng-container>\n    </ui-radio>\n    </div>\n    <br>\n    <p>value: {{selectedOption}}</p>\n    `,\n    props: {\n      ...args,\n      radioOptions,\n      getRadioChangeSelection,\n      selectedOption,\n    },\n  };\n}",
                "rawdescription": "Template radio group",
                "description": "<p>Template radio group</p>\n"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/slider/slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SliderComponent>",
                "defaultValue": "(args: SliderComponent) => {\n  args.minValue = 1;\n  args.maxValue = 14;\n  return {\n    component: SliderComponent,\n    template: sliderTemplate,\n    props: {\n      ...args,\n      formGroup,\n    },\n  };\n}",
                "rawdescription": "Template for storybook's test of the component",
                "description": "<p>Template for storybook&#39;s test of the component</p>\n"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/snackbar/snackbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<LaunchSnackbarComponent>",
                "defaultValue": "(\n  args: LaunchSnackbarComponent\n) => ({\n  props: args,\n})",
                "rawdescription": "Template LaunchSnackbarComponent",
                "description": "<p>Template LaunchSnackbarComponent</p>\n"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/spinner/spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<SpinnerComponent>",
                "defaultValue": "(args: SpinnerComponent) => ({\n  props: args,\n})",
                "rawdescription": "Template spinner",
                "description": "<p>Template spinner</p>\n"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/table/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<any>",
                "defaultValue": "(args: any) => {\n  const pagedTableData = tableData.filter((el, index) => index < 10);\n  return {\n    template: `\n    <!--TABLE CONTENT-->\n<table\n  cdk-table \n  uiTableWrapper\n  (sortChange)=\"sortTableByKey($event)\"\n  [dataSource]=\"pagedTableData\"\n>\n  <ng-container cdkColumnDef=\"name\">\n    <th\n    uiTableHeaderSort=\"name\"\n      uiCellHeader\n      *cdkHeaderCellDef\n      scope=\"col\"\n      \n    >\n      name\n    </th>\n    <td uiCell *cdkCellDef=\"let element\">\n      {{ element.name }}\n    </td>\n  </ng-container>\n\n  <ng-container cdkColumnDef=\"email\">\n    <th\n      uiCellHeader\n      *cdkHeaderCellDef\n      scope=\"col\"\n      \n    >\n      email\n    </th>\n    <td uiCell *cdkCellDef=\"let element\">\n      {{ element.email.value }}\n    </td>\n  </ng-container>\n\n  <ng-container cdkColumnDef=\"phone\">\n    <th\n    uiTableHeaderSort=\"phone\"\n      uiCellHeader\n      *cdkHeaderCellDef\n      scope=\"col\"\n      \n    >\n      phone\n    </th>\n    <td uiCell *cdkCellDef=\"let element\">\n      {{ element.phone.value }}\n    </td>\n  </ng-container>\n\n  <ng-container cdkColumnDef=\"city\">\n    <th\n    uiTableHeaderSort=\"cityVal\"\n      uiCellHeader\n      *cdkHeaderCellDef\n      scope=\"col\"\n      \n    >\n      city\n    </th>\n    <td uiCell *cdkCellDef=\"let element\">\n      {{ element.cityVal }}\n    </td>\n  </ng-container>\n\n  <ng-container cdkColumnDef=\"active\">\n    <th\n      uiCellHeader\n      *cdkHeaderCellDef\n      scope=\"col\"\n      \n    >\n      active\n    </th>\n    <td uiCell *cdkCellDef=\"let element\">\n    <div class=\"flex items-center justify-end gap-x-2 sm:justify-start\">\n    <div [ngClass]=\"{'text-rose-400 bg-rose-400/10': !element.isValid, 'text-green-400 bg-green-400/10': element.isValid}\" class=\"flex-none rounded-full p-1\">\n      <div class=\"h-1.5 w-1.5 rounded-full bg-current\"></div>\n    </div>\n    <div class=\"text-neutral sm:block\">{{element.isValid ? 'Completed' : 'Error' }}</div>\n  </div>\n    </td>\n  </ng-container>\n\n  <ng-container cdkColumnDef=\"selected\">\n    <th\n      uiCellHeader\n      *cdkHeaderCellDef\n      scope=\"col\"\n      \n    >\n      selected\n    </th>\n    <td uiCell *cdkCellDef=\"let element\">\n      <ui-toggle></ui-toggle>\n    </td>\n  </ng-container>\n\n  <ng-container cdkColumnDef=\"id\">\n    <th\n      uiCellHeader\n      *cdkHeaderCellDef\n      scope=\"col\"\n      \n    >\n      id\n    </th>\n    <td uiCell *cdkCellDef=\"let element\">\n      {{ element.id }}\n    </td>\n  </ng-container>\n  <tr cdk-header-row *cdkHeaderRowDef=\"columnDefinitionArray\"></tr>\n  <tr cdk-row *cdkRowDef=\"let row; columns: columnDefinitionArray\"></tr>\n</table>`,\n    props: {\n      ...args,\n      pagedTableData,\n      sortTableByKey,\n      columnDefinitionArray,\n    },\n  };\n}",
                "rawdescription": "Template divider for table",
                "description": "<p>Template divider for table</p>\n"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/textarea/textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<TextareaComponent>",
                "defaultValue": "(args: TextareaComponent) => ({\n  props: args,\n})",
                "rawdescription": "Template textarea",
                "description": "<p>Template textarea</p>\n"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/tooltip/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TooltipDummyComponent>",
                "defaultValue": "(\n  args: TooltipDummyComponent\n) => ({\n  props: args,\n})",
                "rawdescription": "Template for storybook's test of the directive",
                "description": "<p>Template for storybook&#39;s test of the directive</p>\n"
            },
            {
                "name": "TemplateAutocomplete",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<any>",
                "defaultValue": "(args: any) => {\n  return {\n    template: `\n    <div [formGroup]=\"formControl\">\n      <div uiFormFieldDirective  [outline]=\"${args.outline}\">\n        <label>Choose language</label>\n        <input\n          formControlName=\"name\"\n          type=\"text\"\n          placeholder=\"Select a value\"\n          [uiAutocomplete]=\"auto\"\n          (optionSelected)=\"selectedOption($event)\"\n        >\n        <ui-autocomplete #auto>\n          <ui-option *ngFor=\"let option of options\" [value]=\"option\">\n            {{option}}\n            <ng-container ngProjectsAs=\"icon\">\n              <ui-icon\n                [icon]=\"'edit'\"\n                [size]=\"18\"\n              ></ui-icon>\n            </ng-container>\n          </ui-option>\n        </ui-autocomplete>\n        <ui-spinner [size]=\"'medium'\" uiSuffix></ui-spinner>\n        <ui-icon icon=\"search\" uiPrefix></ui-icon>\n    </div>\n  </div>\n  <ui-button (click)=\"toggleDisabled()\">\n    Enable/disabled\n  </ui-button>\n  `,\n    props: {\n      ...args,\n      options,\n      toggleDisabled,\n      formControl,\n    },\n  };\n}",
                "rawdescription": "Template to create form wrapper component's story using autocomplete",
                "description": "<p>Template to create form wrapper component&#39;s story using autocomplete</p>\n"
            },
            {
                "name": "TemplateDisabledSelection",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<SelectMenuComponent>",
                "defaultValue": "(\n  args: SelectMenuComponent\n) => {\n  args.disabled = true;\n  return {\n    component: SelectMenuComponent,\n    template: selectMenuTemplate,\n    props: {\n      ...args,\n      options,\n      formGroup,\n      selectEvent,\n      openEvent,\n      closeEvent,\n    },\n  };\n}",
                "rawdescription": "Template for disabled selection select menu",
                "description": "<p>Template for disabled selection select menu</p>\n"
            },
            {
                "name": "TemplateMulti",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/expansion-panel/expansion-panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<ExpansionPanelComponent>",
                "defaultValue": "(\n  args: ExpansionPanelComponent\n) => {\n  args.displayIcon = true;\n  return {\n    component: ExpansionPanelComponent,\n    template: `\n      <cdk-accordion [multi]=\"true\">\n        <ui-expansion-panel \n          *ngFor=\"let panel of panelOptions; let i = index;\" \n          [disabled]=\"${args.disabled}\" \n          [displayIcon]=\"${args.displayIcon}\" \n          [expanded]=\"panel.expanded\"\n          [index]=\"i\"\n          (closePanel)=\"onClose()\"\n        >\n          <ng-container ngProjectAs=\"title\">\n            {{panel.title}}\n          </ng-container>\n          <p class=\"mb-2 text-gray-500\" >{{panel.text}}</p>\n        </ui-expansion-panel>\n      </cdk-accordion>\n    `,\n    props: {\n      ...args,\n      panelOptions,\n      onClose,\n    },\n  };\n}",
                "rawdescription": "Template multi expansion panel group",
                "description": "<p>Template multi expansion panel group</p>\n"
            },
            {
                "name": "TemplateMultiSelection",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<SelectMenuComponent>",
                "defaultValue": "(\n  args: SelectMenuComponent\n) => {\n  args.multiselect = true;\n  formGroup.get('selectMenu')?.setValue([options[0], options[1]]);\n  return {\n    component: SelectMenuComponent,\n    template: formControlSelectTemplate,\n    props: {\n      ...args,\n      options,\n      formGroup,\n      selectEvent,\n      openEvent,\n      closeEvent,\n    },\n  };\n}",
                "rawdescription": "Template for multi selection select menu",
                "description": "<p>Template for multi selection select menu</p>\n"
            },
            {
                "name": "TemplateMultiSelectionFilterable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateMultiSelection.bind({})",
                "rawdescription": "Actual export of multi select story using search bar",
                "description": "<p>Actual export of multi select story using search bar</p>\n"
            },
            {
                "name": "TemplateRefSelection",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateTemplateRefSelection.bind({})",
                "rawdescription": "Actual export of select story using ngTemplate as input",
                "description": "<p>Actual export of select story using ngTemplate as input</p>\n"
            },
            {
                "name": "TemplateSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<any>",
                "defaultValue": "(args: any) => {\n  return {\n    template: `<div uiFormFieldDirective [outline]=\"${args.outline}\">\n    <label>Choose language</label>\n    <ui-select-menu \n      [multiselect]=\"false\"\n      [disabled]=\"false\">\n        <ui-select-option *ngFor=\"let option of options\" [value]=\"option\">\n          {{option}}\n        </ui-select-option>\n    </ui-select-menu>\n    <ui-spinner [size]=\"'medium'\" uiSuffix></ui-spinner>\n    <ui-icon icon=\"search\" uiPrefix></ui-icon>\n  </div>`,\n    props: {\n      ...args,\n      options,\n    },\n  };\n}",
                "rawdescription": "Template to create form wrapper component's story using select menu",
                "description": "<p>Template to create form wrapper component&#39;s story using select menu</p>\n"
            },
            {
                "name": "TemplateStandaloneSelection",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<SelectMenuComponent>",
                "defaultValue": "(\n  args: SelectMenuComponent\n) => {\n  formGroup.get('selectMenu')?.setValue([]);\n  return {\n    component: SelectMenuComponent,\n    template: selectMenuTemplate,\n    props: {\n      ...args,\n      options,\n      formGroup,\n      selectEvent,\n      openEvent,\n      closeEvent,\n    },\n  };\n}",
                "rawdescription": "Template for standalone selection select menu",
                "description": "<p>Template for standalone selection select menu</p>\n"
            },
            {
                "name": "TemplateStandaloneSelectionDefaultValue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<SelectMenuComponent>",
                "defaultValue": "(\n  args: SelectMenuComponent\n) => {\n  formGroup.get('selectMenu')?.setValue([options[0]]);\n  return {\n    component: SelectMenuComponent,\n    template: formControlSelectTemplate,\n    props: {\n      ...args,\n      options,\n      formGroup,\n      selectEvent,\n      openEvent,\n      closeEvent,\n    },\n  };\n}",
                "rawdescription": "Template for standalone selection default value select menu",
                "description": "<p>Template for standalone selection default value select menu</p>\n"
            },
            {
                "name": "TemplateStandaloneSelectionFilterable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateStandaloneSelection.bind({})",
                "rawdescription": "Actual export of standalone select story using search bar",
                "description": "<p>Actual export of standalone select story using search bar</p>\n"
            },
            {
                "name": "TemplateTemplateRefSelection",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<SelectMenuComponent>",
                "defaultValue": "(\n  args: SelectMenuComponent\n) => {\n  formGroup.get('selectMenu')?.setValue([options[0]]);\n  return {\n    component: SelectMenuComponent,\n    template: singleSelectMenuTemplateWithTrigger,\n    props: {\n      ...args,\n      options,\n      formGroup,\n      selectEvent,\n      openEvent,\n      closeEvent,\n    },\n  };\n}",
                "rawdescription": "Template for single select menu using a ngTemplate as input",
                "description": "<p>Template for single select menu using a ngTemplate as input</p>\n"
            },
            {
                "name": "Tertiary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Tertiary button",
                "description": "<p>Tertiary button</p>\n"
            },
            {
                "name": "tertiaryButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  label: 'Tertiary button',\n  category: 'tertiary',\n  variant: 'default',\n  size: 'medium',\n  icon: '',\n}",
                "rawdescription": "Tertiary button",
                "description": "<p>Tertiary button</p>\n"
            },
            {
                "name": "TertiaryCircleAvatarLarge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/avatar/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<AvatarComponent>",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    shape: 'circle',\n    initials: '',\n    image: '',\n    variant: 'tertiary',\n  },\n}",
                "rawdescription": "Tertiary large circle avatar story",
                "description": "<p>Tertiary large circle avatar story</p>\n"
            },
            {
                "name": "TertiaryRectangleAvatarLarge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/avatar/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<AvatarComponent>",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    shape: 'rectangle',\n    initials: '',\n    image: '',\n    variant: 'tertiary',\n  },\n}",
                "rawdescription": "Tertiary large rectangle avatar story",
                "description": "<p>Tertiary large rectangle avatar story</p>\n"
            },
            {
                "name": "testClick",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => window.alert('Should not show if disabled!!')",
                "rawdescription": "Disable click test",
                "description": "<p>Disable click test</p>\n"
            },
            {
                "name": "today",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/date/date-range/date-range.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Date()",
                "rawdescription": "Today date",
                "description": "<p>Today date</p>\n"
            },
            {
                "name": "toggleDisabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {\n  if (formControl.disabled) {\n    formControl.enable();\n  } else {\n    formControl.disable();\n  }\n}",
                "rawdescription": "Callback to test story with disable option",
                "description": "<p>Callback to test story with disable option</p>\n"
            },
            {
                "name": "TogglePanel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/expansion-panel/expansion-panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Toggle expansion panel",
                "description": "<p>Toggle expansion panel</p>\n"
            },
            {
                "name": "TopExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/tooltip/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Top centered element",
                "description": "<p>Top centered element</p>\n"
            },
            {
                "name": "VariantsList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "AllButtonsTemplate.bind({})",
                "rawdescription": "All buttons",
                "description": "<p>All buttons</p>\n"
            },
            {
                "name": "Vertical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/divider/divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<DividerComponent>",
                "defaultValue": "{\n  args: {\n    position: 'center',\n    orientation: 'vertical',\n  },\n}",
                "rawdescription": "Vertical divider",
                "description": "<p>Vertical divider</p>\n"
            },
            {
                "name": "Vertical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/tabs/tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<TabsComponent>",
                "defaultValue": "{\n  args: {\n    vertical: true,\n  },\n}",
                "rawdescription": "Vertical story",
                "description": "<p>Vertical story</p>\n"
            },
            {
                "name": "weeklyExp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/\\d+ \\d+ \\d+ [?*] \\* (MON|TUE|WED|THU|FRI|SAT|SUN)(,(MON|TUE|WED|THU|FRI|SAT|SUN))* \\*/",
                "rawdescription": "weekly regex",
                "description": "<p>weekly regex</p>\n"
            },
            {
                "name": "yearlyExp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/\\d+ \\d+ \\d+ (\\d+|L|LW|1W) \\d+ [?*] \\*/",
                "rawdescription": "yearly regex",
                "description": "<p>yearly regex</p>\n"
            },
            {
                "name": "yearlyMonthWeekExp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/\\d+ \\d+ \\d+ [?*] \\d+ (MON|TUE|WED|THU|FRI|SAT|SUN)((#[1-5])|L) \\*/",
                "rawdescription": "yearlyMonthWeek regex",
                "description": "<p>yearlyMonthWeek regex</p>\n"
            }
        ],
        "functions": [
            {
                "name": "parseCronNumberToken",
                "file": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Parse CronNumber to token</p>\n",
                "args": [
                    {
                        "name": "val",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "CronToken",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1569,
                            "end": 1572,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "val"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1563,
                            "end": 1568,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>value</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 1583,
                            "end": 1590,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "returns"
                        },
                        "comment": "<p>obj</p>\n"
                    }
                ]
            },
            {
                "name": "range",
                "file": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>generate numbers in some range</p>\n",
                "args": [
                    {
                        "name": "start",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "end",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1862,
                            "end": 1867,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "start"
                        },
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1856,
                            "end": 1861,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>start range</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1890,
                            "end": 1893,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "end"
                        },
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1884,
                            "end": 1889,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>end range</p>\n"
                    }
                ]
            },
            {
                "name": "range",
                "file": "libs/ui/src/lib/cron-editor/time-picker/time-picker.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>generate numbers in some range</p>\n",
                "args": [
                    {
                        "name": "start",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "end",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 321,
                            "end": 326,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "start"
                        },
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 315,
                            "end": 320,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>start range</p>\n"
                    },
                    {
                        "name": {
                            "pos": 349,
                            "end": 352,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "end"
                        },
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 343,
                            "end": 348,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>end range</p>\n"
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "CronType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"minutely\" | \"hourly\" | \"daily\" | \"weekly\" | \"monthly\" | \"yearly\" | \"unknown\"",
                "file": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 189
            },
            {
                "name": "MockedAvatar",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "libs/ui/src/lib/avatar-group/avatar-group.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "MockedTable",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "libs/ui/src/lib/table/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "PanelOption",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "libs/ui/src/lib/expansion-panel/expansion-panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "RadioOption",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "libs/ui/src/lib/radio/radio.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "libs/ui/src/lib/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "StoryType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "libs/ui/src/lib/avatar-group/avatar-group.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "StoryType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "libs/ui/src/lib/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "libs/ui/src/lib/chip/chip.stories.ts": [
                {
                    "name": "addChipsFromInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(chips: string[] | string) => {\n  if (chips instanceof Array) {\n    statuses = statuses.concat([...chips]);\n  } else {\n    statuses.push(chips);\n  }\n  formControl.setValue(statuses);\n}",
                    "rawdescription": "Callback to test the chip input directive change event",
                    "description": "<p>Callback to test the chip input directive change event</p>\n"
                },
                {
                    "name": "ChipsInputTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<ChipComponent>",
                    "defaultValue": "(args: ChipComponent) => {\n  return {\n    component: ChipComponent,\n    template: `\n      <div uiChipList [formControl]=\"formControl\" #chipList>\n        <ui-chip\n          [removable]=\"${args.removable}\"\n          [disabled]=\"${args.disabled}\"\n          [variant]=\"'${args.variant}'\"\n          [value]=\"status\"\n          *ngFor=\"let status of statuses; let i = index\"\n          (removed)=\"removeStatus(i)\"\n        >\n          {{ status }}\n        </ui-chip>\n      </div>\n      <input\n        placeholder=\"New status...\"\n        [uiChipListFor]=\"chipList\"\n        [chipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n        (chipTokenEnd)=\"addChipsFromInput($event)\"\n        >\n        <br>\n        <p>value: <span *ngFor=\"let val of formControl.value;let last = last\">{{val}} <span *ngIf=\"!last\">, </span></span></p>\n        <p>touched: {{formControl.touched}}</p>\n        `,\n    props: {\n      ...args,\n      statuses,\n      formControl,\n      removeStatus,\n      addChipsFromInput,\n      separatorKeysCodes,\n    },\n  };\n}",
                    "rawdescription": "Template chip list with input",
                    "description": "<p>Template chip list with input</p>\n"
                },
                {
                    "name": "ChipVariants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ChipVariantsTemplate.bind({})",
                    "rawdescription": "Chips variants demonstration",
                    "description": "<p>Chips variants demonstration</p>\n"
                },
                {
                    "name": "ChipVariantsTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<ChipComponent>",
                    "defaultValue": "(args: ChipComponent) => {\n  return {\n    component: ChipComponent,\n    template: `\n      <div class=\"flex gap-1\">\n        <ui-chip variant=\"default\" [removable]=\"true\"> Default </ui-chip>\n        <ui-chip variant=\"primary\" [removable]=\"true\"> Primary </ui-chip>\n        <ui-chip variant=\"success\" [removable]=\"true\"> Success </ui-chip>\n        <ui-chip variant=\"danger\" [removable]=\"true\"> Danger </ui-chip>\n        <ui-chip variant=\"danger\" [removable]=\"true\" [disabled]=\"true\"> Disabled </ui-chip>\n      </div>\n    `,\n    props: {\n      ...args,\n    },\n  };\n}",
                    "rawdescription": "Template chip variants",
                    "description": "<p>Template chip variants</p>\n"
                },
                {
                    "name": "ChipWithInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ChipsInputTemplate.bind({})",
                    "rawdescription": "Chip list with input",
                    "description": "<p>Chip list with input</p>\n"
                },
                {
                    "name": "formControl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FormControl()",
                    "rawdescription": "Form control to test chip story",
                    "description": "<p>Form control to test chip story</p>\n"
                },
                {
                    "name": "removeStatus",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(index: number) => {\n  statuses.splice(index, 1);\n}",
                    "rawdescription": "Callback to test the chip remove event",
                    "description": "<p>Callback to test the chip remove event</p>\n"
                },
                {
                    "name": "separatorKeysCodes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[ENTER, COMMA]",
                    "rawdescription": "Separator key codes for story testing",
                    "description": "<p>Separator key codes for story testing</p>\n"
                },
                {
                    "name": "statuses",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "['Active', 'Pending', 'Archived']",
                    "rawdescription": "Status array for story testing",
                    "description": "<p>Status array for story testing</p>\n"
                }
            ],
            "libs/ui/src/lib/date/date-range/date-range.stories.ts": [
                {
                    "name": "afterTomorrow",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/date/date-range/date-range.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Date()",
                    "rawdescription": "After tomorrow date",
                    "description": "<p>After tomorrow date</p>\n"
                },
                {
                    "name": "BottomDateRange",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/date/date-range/date-range.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "BottomDateRangeTemplate.bind({})",
                    "rawdescription": "Date range bottom",
                    "description": "<p>Date range bottom</p>\n"
                },
                {
                    "name": "BottomDateRangeTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/date/date-range/date-range.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<DateRangeComponent>",
                    "defaultValue": "(\n  args: DateRangeComponent\n) => {\n  return {\n    component: DateRangeComponent,\n    template: `\n    <div class=\"absolute\">\n    <p>start value: {{formControlStart.value}}</p>\n    <p>end value: {{formControlEnd.value}}</p>\n    </div>\n    <div class=\"flex flex-col h-screen justify-end\">\n    <div [uiDateWrapper]=\"calendar\">\n    <input [uiDatePicker] [formControl]=\"formControlStart\" [label]=\"'Select a start date'\"/>\n    <input [uiDatePicker] [formControl]=\"formControlEnd\" [label]=\"'Select a end date'\"/>\n      <ui-date-range #calendar>\n      </ui-date-range> \n      </div>\n      </div>\n      `,\n    props: {\n      ...args,\n      formControlStart,\n      formControlEnd,\n    },\n  };\n}",
                    "rawdescription": "Date range bottom template",
                    "description": "<p>Date range bottom template</p>\n"
                },
                {
                    "name": "DateRange",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/date/date-range/date-range.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "DateRangeTemplate.bind({})",
                    "rawdescription": "Date range",
                    "description": "<p>Date range</p>\n"
                },
                {
                    "name": "DateRangeTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/date/date-range/date-range.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<DateRangeComponent>",
                    "defaultValue": "(\n  args: DateRangeComponent\n) => {\n  return {\n    component: DateRangeComponent,\n    template: `\n    <div [uiDateWrapper]=\"calendar\">\n    <input [uiDatePicker] [formControl]=\"formControlStart\" [label]=\"'Select a start date'\"/>\n    <input [uiDatePicker] [formControl]=\"formControlEnd\" [label]=\"'Select a end date'\"/>\n      <ui-date-range #calendar>\n      </ui-date-range> \n      </div>\n      <br>\n      <p>start value: {{formControlStart.value}}</p>\n      <p>end value: {{formControlEnd.value}}</p>`,\n    props: {\n      ...args,\n      formControlStart,\n      formControlEnd,\n    },\n  };\n}",
                    "rawdescription": "Date range template",
                    "description": "<p>Date range template</p>\n"
                },
                {
                    "name": "formControlEnd",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/date/date-range/date-range.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FormControl(\n  afterTomorrow.setDate(today.getDate() + 2)\n)",
                    "rawdescription": "FormControl for end date",
                    "description": "<p>FormControl for end date</p>\n"
                },
                {
                    "name": "formControlStart",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/date/date-range/date-range.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FormControl(today)",
                    "rawdescription": "FormControl for start date",
                    "description": "<p>FormControl for start date</p>\n"
                },
                {
                    "name": "today",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/date/date-range/date-range.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Date()",
                    "rawdescription": "Today date",
                    "description": "<p>Today date</p>\n"
                }
            ],
            "libs/ui/src/lib/button/button.stories.ts": [
                {
                    "name": "allButtons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  size: 'medium',\n}",
                    "rawdescription": "Tertiary button",
                    "description": "<p>Tertiary button</p>\n"
                },
                {
                    "name": "AllButtonsTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<StoryType>",
                    "defaultValue": "(args: StoryType) => {\n  return {\n    template: `\n      <h1 class=\"text-lg mb-4\">Grouped by variant</h1>\n      <div class=\"flex flex-wrap gap-4\">\n        <div class=\"border rounded-lg\" *ngFor=\"let variant of configurations\">\n          <h2 class=\"w-full text-center border-b py-2\">{{variant.title}}</h2>\n          <div class=\"flex gap-2 p-4\">\n            <ui-button\n              *ngFor=\"let btn of variant.items\"\n              [variant]=\"btn.variant\"\n              [category]=\"btn.category\"\n              [disabled]=\"btn.disabled\"\n              [title]=\"btn.category\"\n              [size]=\"'${args.size}'\"\n            >\n              {{btn.text}}\n            </ui-button>\n          </div>\n        </div>\n      </div>\n    `,\n    props: {\n      configurations,\n    },\n  };\n}",
                    "rawdescription": "Template button",
                    "description": "<p>Template button</p>\n"
                },
                {
                    "name": "configurations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    title: 'Default',\n    items: categories.map((category) => ({\n      variant: 'default',\n      category: category,\n      text: 'default',\n    })),\n  },\n  {\n    title: 'Primary',\n    items: categories.map((category) => ({\n      variant: 'primary',\n      category: category,\n      text: 'primary',\n    })),\n  },\n  {\n    title: 'Success',\n    items: categories.map((category) => ({\n      variant: 'success',\n      category: category,\n      text: 'success',\n    })),\n  },\n  {\n    title: 'Danger',\n    items: categories.map((category) => ({\n      variant: 'danger',\n      category: category,\n      text: 'danger',\n    })),\n  },\n  {\n    title: 'Grey',\n    items: categories.map((category) => ({\n      variant: 'grey',\n      category: category,\n      text: 'grey',\n    })),\n  },\n  {\n    title: 'Light',\n    items: categories.map((category) => ({\n      variant: 'light',\n      category: category,\n      text: 'light',\n    })),\n  },\n  {\n    title: 'Warning',\n    items: categories.map((category) => ({\n      variant: 'warning',\n      category: category,\n      text: 'warning',\n    })),\n  },\n  {\n    title: 'Disabled',\n    items: categories.map((category) => ({\n      variant: 'primary',\n      category: category,\n      text: 'disabled',\n      disabled: true,\n    })),\n  },\n]",
                    "rawdescription": "List of all available buttons",
                    "description": "<p>List of all available buttons</p>\n"
                },
                {
                    "name": "individualBtnArgs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "{\n  label: {\n    control: {\n      type: 'text',\n    },\n    description: 'Text content of the button ( storybook only ).',\n  },\n  category: {\n    options: categories,\n    control: {\n      type: 'select',\n    },\n  },\n  variant: {\n    options: variants,\n    control: {\n      type: 'select',\n    },\n    defaultValue: 'default',\n  },\n  iconPosition: {\n    options: buttonIconPositions,\n    control: {\n      type: 'select',\n    },\n    defaultValue: 'prefix',\n  },\n  icon: {\n    control: 'text',\n    defaultValue: '',\n  },\n  isIcon: {\n    control: {\n      type: 'boolean',\n    },\n    defaultValue: false,\n  },\n  loading: {\n    control: {\n      type: 'boolean',\n    },\n    defaultValue: false,\n  },\n  disabled: {\n    control: {\n      type: 'boolean',\n    },\n    defaultValue: false,\n  },\n} as Meta<StoryType>",
                    "rawdescription": "ArgTypes for individual button stories",
                    "description": "<p>ArgTypes for individual button stories</p>\n"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Primary button",
                    "description": "<p>Primary button</p>\n"
                },
                {
                    "name": "primaryButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  label: 'Primary button',\n  category: 'primary',\n  variant: 'default',\n  size: 'medium',\n  icon: '',\n}",
                    "rawdescription": "Primary button",
                    "description": "<p>Primary button</p>\n"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Secondary button",
                    "description": "<p>Secondary button</p>\n"
                },
                {
                    "name": "secondaryButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  label: 'Secondary button',\n  category: 'secondary',\n  variant: 'default',\n  size: 'medium',\n  icon: '',\n}",
                    "rawdescription": "Secondary button",
                    "description": "<p>Secondary button</p>\n"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<StoryType>",
                    "defaultValue": "(args: StoryType) => {\n  return {\n    template: `\n      <ui-button\n        (click)=\"testClick()\"\n        [disabled]=\"${args.disabled}\"\n        icon=\"${args.icon}\"\n        iconPosition=\"${args.iconPosition}\"\n        [loading]=\"${args.loading}\"\n        [isIcon]=\"${args.isIcon}\"\n        [size]=\"'${args.size}'\"\n        [variant]=\"'${args.variant}'\"\n        [category]=\"'${args.category}'\"\n      >\n        ${args.label}\n      </ui-button>\n    `,\n    props: {\n      ...args,\n      testClick,\n    },\n  };\n}",
                    "rawdescription": "Template button",
                    "description": "<p>Template button</p>\n"
                },
                {
                    "name": "Tertiary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Tertiary button",
                    "description": "<p>Tertiary button</p>\n"
                },
                {
                    "name": "tertiaryButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  label: 'Tertiary button',\n  category: 'tertiary',\n  variant: 'default',\n  size: 'medium',\n  icon: '',\n}",
                    "rawdescription": "Tertiary button",
                    "description": "<p>Tertiary button</p>\n"
                },
                {
                    "name": "testClick",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => window.alert('Should not show if disabled!!')",
                    "rawdescription": "Disable click test",
                    "description": "<p>Disable click test</p>\n"
                },
                {
                    "name": "VariantsList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "AllButtonsTemplate.bind({})",
                    "rawdescription": "All buttons",
                    "description": "<p>All buttons</p>\n"
                }
            ],
            "libs/ui/src/lib/icon/icon.stories.ts": [
                {
                    "name": "AllIconsTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/icon/icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<any>",
                    "defaultValue": "(args: any) => {\n  return {\n    template: `\n      <div class=\"h-screen pb-20\">\n        <h1 class=\"text-lg mb-4\">List of all icons</h1>\n        <div class=\"flex flex-wrap gap-4 overflow-auto max-h-full\">\n          <div class=\"border rounded-lg flex items-center\" *ngFor=\"let icon of MAT_ICON_LIST\">\n              <ui-icon\n                class=\"p-4 border-r bg-gray-100 rounded-l-lg\"\n                [icon]=\"icon\"\n                variant=\"${args.variant}\"\n                [size]=\"${args.size}\"\n              ></ui-icon>\n              <h2 class=\"w-full text-center px-4\">{{icon}}</h2>\n          </div>\n        </div>\n      </div>`,\n    props: {\n      MAT_ICON_LIST,\n    },\n  };\n}",
                    "rawdescription": "Template for all icons",
                    "description": "<p>Template for all icons</p>\n"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/icon/icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Primary icon component",
                    "description": "<p>Primary icon component</p>\n"
                },
                {
                    "name": "IconList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/icon/icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "AllIconsTemplate.bind({})",
                    "rawdescription": "All icons",
                    "description": "<p>All icons</p>\n"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/icon/icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<IconComponent>",
                    "defaultValue": "(args: IconComponent) => ({\n  props: args,\n})",
                    "rawdescription": "Icon component template",
                    "description": "<p>Icon component template</p>\n"
                }
            ],
            "libs/ui/src/lib/avatar-group/avatar-group.stories.ts": [
                {
                    "name": "avatars",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/avatar-group/avatar-group.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockedAvatar[]",
                    "defaultValue": "[\n  {\n    size: 'large',\n    variant: 'tertiary',\n    image: '',\n    shape: 'circle',\n    initials: 'JL',\n  },\n  {\n    size: 'large',\n    variant: 'tertiary',\n    image:\n      'https://images.unsplash.com/photo-1491528323818-fdd1faba62cc?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80',\n    shape: 'circle',\n    initials: 'PM',\n  },\n  {\n    size: 'large',\n    variant: 'secondary',\n    image:\n      'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2.25&w=256&h=256&q=80',\n    shape: 'circle',\n    initials: '',\n  },\n  {\n    size: 'large',\n    variant: 'secondary',\n    image:\n      'https://images.unsplash.com/photo-1550525811-e5869dd03032?ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80',\n    shape: 'rectangle',\n    initials: '',\n  },\n]",
                    "rawdescription": "Mocked avatar array",
                    "description": "<p>Mocked avatar array</p>\n"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/avatar-group/avatar-group.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<StoryType>",
                    "defaultValue": "{\n  args: {},\n}",
                    "rawdescription": "AvatarGroup with top stack, limit 2",
                    "description": "<p>AvatarGroup with top stack, limit 2</p>\n"
                }
            ],
            "libs/ui/src/lib/date/date-picker/date-picker.stories.ts": [
                {
                    "name": "BottomDatePicker",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/date/date-picker/date-picker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "BottomDatePickerTemplate.bind({})",
                    "rawdescription": "Date picker bottom",
                    "description": "<p>Date picker bottom</p>\n"
                },
                {
                    "name": "BottomDatePickerTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/date/date-picker/date-picker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<DatePickerComponent>",
                    "defaultValue": "(\n  args: DatePickerComponent\n) => {\n  return {\n    component: DatePickerComponent,\n    template: `\n    <p class=\"absolute\">selected value: {{formControl.value}}</p>\n    <div class=\"flex flex-col h-screen justify-end\">\n    <div [uiDateWrapper]=\"calendar\">\n    <input [uiDatePicker] [formControl]=\"formControl\" [label]=\"'Select a date'\"/>\n      <ui-date-picker #calendar>\n      </ui-date-picker> \n      </div>\n      </div>\n      `,\n    props: {\n      ...args,\n      formControl,\n    },\n  };\n}",
                    "rawdescription": "Date picker bottom template",
                    "description": "<p>Date picker bottom template</p>\n"
                },
                {
                    "name": "DatePicker",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/date/date-picker/date-picker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "DatePickerTemplate.bind({})",
                    "rawdescription": "Date picker",
                    "description": "<p>Date picker</p>\n"
                },
                {
                    "name": "DatePickerTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/date/date-picker/date-picker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<DatePickerComponent>",
                    "defaultValue": "(\n  args: DatePickerComponent\n) => {\n  return {\n    component: DatePickerComponent,\n    template: `\n    <div [uiDateWrapper]=\"calendar\">\n    <input [uiDatePicker] [formControl]=\"formControl\" [label]=\"'Select a date'\"/>\n      <ui-date-picker #calendar>\n      </ui-date-picker> \n      </div>\n      <br>\n      <p>selected value: {{formControl.value}}</p>\n      `,\n    props: {\n      ...args,\n      formControl,\n    },\n  };\n}",
                    "rawdescription": "Date picker template",
                    "description": "<p>Date picker template</p>\n"
                },
                {
                    "name": "formControl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/date/date-picker/date-picker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FormControl(new Date())",
                    "rawdescription": "FormControl for story testing",
                    "description": "<p>FormControl for story testing</p>\n"
                }
            ],
            "libs/ui/src/lib/tooltip/tooltip.stories.ts": [
                {
                    "name": "BottomExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/tooltip/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Bottom centered element",
                    "description": "<p>Bottom centered element</p>\n"
                },
                {
                    "name": "LeftExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/tooltip/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Middle left element",
                    "description": "<p>Middle left element</p>\n"
                },
                {
                    "name": "LongTextExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/tooltip/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Long text element",
                    "description": "<p>Long text element</p>\n"
                },
                {
                    "name": "RightExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/tooltip/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Middle right element",
                    "description": "<p>Middle right element</p>\n"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/tooltip/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TooltipDummyComponent>",
                    "defaultValue": "(\n  args: TooltipDummyComponent\n) => ({\n  props: args,\n})",
                    "rawdescription": "Template for storybook's test of the directive",
                    "description": "<p>Template for storybook&#39;s test of the directive</p>\n"
                },
                {
                    "name": "TopExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/tooltip/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Top centered element",
                    "description": "<p>Top centered element</p>\n"
                }
            ],
            "libs/ui/src/lib/menu/menu.stories.ts": [
                {
                    "name": "clickEvent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/menu/menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(name: string) =>\n  window.alert(`You pressed the ${name} button!`)",
                    "rawdescription": "Click event handler for menu items template",
                    "description": "<p>Click event handler for menu items template</p>\n"
                },
                {
                    "name": "LeftBottomCornerMenu",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/menu/menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "LeftBottomCornerMenuTemplate.bind({})",
                    "rawdescription": "Menu template in bottom left corner of screen",
                    "description": "<p>Menu template in bottom left corner of screen</p>\n"
                },
                {
                    "name": "LeftBottomCornerMenuTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/menu/menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<MenuComponent>",
                    "defaultValue": "(\n  args: MenuComponent\n) => {\n  return {\n    component: MenuComponent,\n    template: `\n    <div style=\"height: calc(100vh - 50px)\" class=\"flex items-end\">\n    <ui-button  [uiMenuTriggerFor]=\"menu\">Open menu</ui-button>\n    </div>\n    ${menuItemsTemplate} `,\n    props: {\n      ...args,\n      clickEvent,\n    },\n  };\n}",
                    "rawdescription": "Menu template",
                    "description": "<p>Menu template</p>\n"
                },
                {
                    "name": "LeftTopCornerMenu",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/menu/menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "LeftTopCornerMenuTemplate.bind({})",
                    "rawdescription": "Menu template in top left corner of screen",
                    "description": "<p>Menu template in top left corner of screen</p>\n"
                },
                {
                    "name": "LeftTopCornerMenuTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/menu/menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<MenuComponent>",
                    "defaultValue": "(\n  args: MenuComponent\n) => {\n  return {\n    component: MenuComponent,\n    template: `\n    <div class=\"flex justify-start\">\n    <ui-button [uiMenuTriggerFor]=\"menu\">Open menu</ui-button>\n    </div>\n    ${menuItemsTemplate}`,\n    props: {\n      ...args,\n      clickEvent,\n    },\n  };\n}",
                    "rawdescription": "Menu template",
                    "description": "<p>Menu template</p>\n"
                },
                {
                    "name": "menuItemsTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/menu/menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`<ui-menu #menu>\n  <div uiMenuItem (click)=\"clickEvent('First')\">Button 1</div>\n  <ui-divider></ui-divider>\n  <div uiMenuItem (click)=\"clickEvent('Second')\">Button 2</div>\n  <ui-divider></ui-divider>\n  <div uiMenuItem (click)=\"clickEvent('Third')\">Button 3</div>\n  </ui-menu>`",
                    "rawdescription": "Default menu items template",
                    "description": "<p>Default menu items template</p>\n"
                },
                {
                    "name": "RightBottomCornerMenu",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/menu/menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "RightBottomCornerMenuTemplate.bind({})",
                    "rawdescription": "Menu template in bottom right corner of screen",
                    "description": "<p>Menu template in bottom right corner of screen</p>\n"
                },
                {
                    "name": "RightBottomCornerMenuTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/menu/menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<MenuComponent>",
                    "defaultValue": "(\n  args: MenuComponent\n) => {\n  return {\n    component: MenuComponent,\n    template: `\n    <div style=\"height: calc(100vh - 50px)\" class=\"flex justify-end items-end\">\n    <ui-button  [uiMenuTriggerFor]=\"menu\">Open menu</ui-button>\n    </div> \n    ${menuItemsTemplate}`,\n    props: {\n      ...args,\n      clickEvent,\n    },\n  };\n}",
                    "rawdescription": "Menu template",
                    "description": "<p>Menu template</p>\n"
                },
                {
                    "name": "RightTopCornerMenu",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/menu/menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "RightTopCornerMenuTemplate.bind({})",
                    "rawdescription": "Menu template in top right corner of screen",
                    "description": "<p>Menu template in top right corner of screen</p>\n"
                },
                {
                    "name": "RightTopCornerMenuTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/menu/menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<MenuComponent>",
                    "defaultValue": "(\n  args: MenuComponent\n) => {\n  return {\n    component: MenuComponent,\n    template: `\n    <div class=\"flex justify-end\">\n    <ui-button [uiMenuTriggerFor]=\"menu\">Open menu</ui-button>\n    </div>\n    ${menuItemsTemplate} `,\n    props: {\n      ...args,\n      clickEvent,\n    },\n  };\n}",
                    "rawdescription": "Menu template",
                    "description": "<p>Menu template</p>\n"
                }
            ],
            "libs/ui/src/lib/select-menu/select-menu.stories.ts": [
                {
                    "name": "closeEvent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {\n  console.log('isClosed');\n}",
                    "rawdescription": "Used to test if emission of output \"closed\" works",
                    "description": "<p>Used to test if emission of output &quot;closed&quot; works</p>\n"
                },
                {
                    "name": "customTriggerSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n<ng-template #customTemplate>\n<span class=\"inline-flex items-center rounded-full bg-pink-50 px-2 py-1 text-xs font-medium text-pink-700 ring-1 ring-inset ring-pink-700/10\">{{formGroup.get('selectMenu').value}}</span>\n</ng-template>`",
                    "rawdescription": "Custom template trigger to be placed between the select tag",
                    "description": "<p>Custom template trigger to be placed between the select tag</p>\n"
                },
                {
                    "name": "customTriggerSelectTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`<ui-select-menu\n  formControlName=\"selectMenu\"\n  (opened)=\"openEvent($event)\" \n  (closed)=\"closeEvent($event)\" \n  (selectedOption)=\"selectEvent($event)\"\n  [multiselect]=\"multiselect\"\n  [disabled]=\"disabled\"\n  [customTemplate]=\"customTemplate\"\n>\n  ${customTriggerSelect}\n  <ui-select-option *ngFor=\"let option of options\" [value]=\"option\">\n    {{option}}\n  </ui-select-option>\n</ui-select-menu>`",
                    "rawdescription": "Select with the custom template trigger placed between the select tag",
                    "description": "<p>Select with the custom template trigger placed between the select tag</p>\n"
                },
                {
                    "name": "DisabledSelection",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateDisabledSelection.bind({})",
                    "rawdescription": "Actual export of disabled select story",
                    "description": "<p>Actual export of disabled select story</p>\n"
                },
                {
                    "name": "formControlSelectTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n<div [formGroup]=\"formGroup\" class=\"py-5\">\n  <ui-select-menu \n    formControlName=\"selectMenu\"\n    (opened)=\"openEvent($event)\" \n    (closed)=\"closeEvent($event)\" \n    (selectedOption)=\"selectEvent($event)\" \n    [multiselect]=\"multiselect\"\n    [filterable]=\"filterable\"\n  >\n    <ui-select-option\n      *ngFor=\"let option of options\"\n      [value]=\"option\"\n      [selected]=\"formGroup.get('selectMenu')?.value.includes(option)\">\n      {{option}}\n    </ui-select-option>\n  </ui-select-menu>\n</div>\n`",
                    "rawdescription": "Template used to render the stories (using a formGroup with pre-selected values)",
                    "description": "<p>Template used to render the stories (using a formGroup with pre-selected values)</p>\n"
                },
                {
                    "name": "formGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FormGroup({\n  selectMenu: new FormControl(),\n})",
                    "rawdescription": "Form group to test select-menu control value accessor",
                    "description": "<p>Form group to test select-menu control value accessor</p>\n"
                },
                {
                    "name": "MultiSelection",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateMultiSelection.bind({})",
                    "rawdescription": "Actual export of multi select story",
                    "description": "<p>Actual export of multi select story</p>\n"
                },
                {
                    "name": "openEvent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {\n  console.log('isOpened');\n}",
                    "rawdescription": "Used to test if emission of output \"opened\" works",
                    "description": "<p>Used to test if emission of output &quot;opened&quot; works</p>\n"
                },
                {
                    "name": "options",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  'French',\n  'English',\n  'Japanese',\n  'Javanese',\n  'Polish',\n  'German',\n  'Spanish',\n  'Dutch',\n  'Chinese',\n]",
                    "rawdescription": "Options for select menu",
                    "description": "<p>Options for select menu</p>\n"
                },
                {
                    "name": "selectEvent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(event: any) => {\n  console.log('Select Event: ', event);\n  console.log('Form control: ', formGroup.get('selectMenu')?.value);\n}",
                    "rawdescription": "Used to test if emission of output \"selectedOption\" works",
                    "description": "<p>Used to test if emission of output &quot;selectedOption&quot; works</p>\n"
                },
                {
                    "name": "selectMenuTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`<div [formGroup]=\"formGroup\" class=\"py-5\">\n${selectTemplate}\n</div>\n`",
                    "rawdescription": "Template used to render the stories (using a formGroup)",
                    "description": "<p>Template used to render the stories (using a formGroup)</p>\n"
                },
                {
                    "name": "selectTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`<ui-select-menu \n  formControlName=\"selectMenu\"\n  (opened)=\"openEvent($event)\" \n  (closed)=\"closeEvent($event)\" \n  (selectedOption)=\"selectEvent($event)\" \n  [multiselect]=\"multiselect\"\n  [disabled]=\"disabled\"\n  [filterable]=\"filterable\">\n  <ui-select-option *ngFor=\"let option of options\" [value]=\"option\">\n    {{option}}\n  </ui-select-option>\n</ui-select-menu>`",
                    "rawdescription": "Select with no custom template",
                    "description": "<p>Select with no custom template</p>\n"
                },
                {
                    "name": "singleSelectMenuTemplateWithTrigger",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`<div [formGroup]=\"formGroup\" class=\"py-5\">\n${customTriggerSelectTemplate}\n</div>\n`",
                    "rawdescription": "Template used to render the stories (using a formGroup) and use of a ngTemplate as selectTriggerTemplate input",
                    "description": "<p>Template used to render the stories (using a formGroup) and use of a ngTemplate as selectTriggerTemplate input</p>\n"
                },
                {
                    "name": "StandaloneSelection",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateStandaloneSelection.bind({})",
                    "rawdescription": "Actual export of standalone select story",
                    "description": "<p>Actual export of standalone select story</p>\n"
                },
                {
                    "name": "StandaloneSelectionDefaultValue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateStandaloneSelectionDefaultValue.bind({})",
                    "rawdescription": "Actual export of standalone select story",
                    "description": "<p>Actual export of standalone select story</p>\n"
                },
                {
                    "name": "TemplateDisabledSelection",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<SelectMenuComponent>",
                    "defaultValue": "(\n  args: SelectMenuComponent\n) => {\n  args.disabled = true;\n  return {\n    component: SelectMenuComponent,\n    template: selectMenuTemplate,\n    props: {\n      ...args,\n      options,\n      formGroup,\n      selectEvent,\n      openEvent,\n      closeEvent,\n    },\n  };\n}",
                    "rawdescription": "Template for disabled selection select menu",
                    "description": "<p>Template for disabled selection select menu</p>\n"
                },
                {
                    "name": "TemplateMultiSelection",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<SelectMenuComponent>",
                    "defaultValue": "(\n  args: SelectMenuComponent\n) => {\n  args.multiselect = true;\n  formGroup.get('selectMenu')?.setValue([options[0], options[1]]);\n  return {\n    component: SelectMenuComponent,\n    template: formControlSelectTemplate,\n    props: {\n      ...args,\n      options,\n      formGroup,\n      selectEvent,\n      openEvent,\n      closeEvent,\n    },\n  };\n}",
                    "rawdescription": "Template for multi selection select menu",
                    "description": "<p>Template for multi selection select menu</p>\n"
                },
                {
                    "name": "TemplateMultiSelectionFilterable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateMultiSelection.bind({})",
                    "rawdescription": "Actual export of multi select story using search bar",
                    "description": "<p>Actual export of multi select story using search bar</p>\n"
                },
                {
                    "name": "TemplateRefSelection",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateTemplateRefSelection.bind({})",
                    "rawdescription": "Actual export of select story using ngTemplate as input",
                    "description": "<p>Actual export of select story using ngTemplate as input</p>\n"
                },
                {
                    "name": "TemplateStandaloneSelection",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<SelectMenuComponent>",
                    "defaultValue": "(\n  args: SelectMenuComponent\n) => {\n  formGroup.get('selectMenu')?.setValue([]);\n  return {\n    component: SelectMenuComponent,\n    template: selectMenuTemplate,\n    props: {\n      ...args,\n      options,\n      formGroup,\n      selectEvent,\n      openEvent,\n      closeEvent,\n    },\n  };\n}",
                    "rawdescription": "Template for standalone selection select menu",
                    "description": "<p>Template for standalone selection select menu</p>\n"
                },
                {
                    "name": "TemplateStandaloneSelectionDefaultValue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<SelectMenuComponent>",
                    "defaultValue": "(\n  args: SelectMenuComponent\n) => {\n  formGroup.get('selectMenu')?.setValue([options[0]]);\n  return {\n    component: SelectMenuComponent,\n    template: formControlSelectTemplate,\n    props: {\n      ...args,\n      options,\n      formGroup,\n      selectEvent,\n      openEvent,\n      closeEvent,\n    },\n  };\n}",
                    "rawdescription": "Template for standalone selection default value select menu",
                    "description": "<p>Template for standalone selection default value select menu</p>\n"
                },
                {
                    "name": "TemplateStandaloneSelectionFilterable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateStandaloneSelection.bind({})",
                    "rawdescription": "Actual export of standalone select story using search bar",
                    "description": "<p>Actual export of standalone select story using search bar</p>\n"
                },
                {
                    "name": "TemplateTemplateRefSelection",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<SelectMenuComponent>",
                    "defaultValue": "(\n  args: SelectMenuComponent\n) => {\n  formGroup.get('selectMenu')?.setValue([options[0]]);\n  return {\n    component: SelectMenuComponent,\n    template: singleSelectMenuTemplateWithTrigger,\n    props: {\n      ...args,\n      options,\n      formGroup,\n      selectEvent,\n      openEvent,\n      closeEvent,\n    },\n  };\n}",
                    "rawdescription": "Template for single select menu using a ngTemplate as input",
                    "description": "<p>Template for single select menu using a ngTemplate as input</p>\n"
                }
            ],
            "libs/ui/src/lib/autocomplete/autocomplete.stories.ts": [
                {
                    "name": "closesAutocompletePanel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {\n  console.log('Closed autocomplete panel event');\n}",
                    "rawdescription": "Callback to test the autocomplete directive closed event",
                    "description": "<p>Callback to test the autocomplete directive closed event</p>\n"
                },
                {
                    "name": "FormAutocomplete",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "FormControlTemplate.bind({})",
                    "rawdescription": "Form control autocomplete",
                    "description": "<p>Form control autocomplete</p>\n"
                },
                {
                    "name": "formControl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FormControl()",
                    "rawdescription": "Form control to test autocomplete story",
                    "description": "<p>Form control to test autocomplete story</p>\n"
                },
                {
                    "name": "FormControlTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<any>",
                    "defaultValue": "(args: any) => {\n  formControl.setValue(SIMPLE_OPTIONS[2]);\n  return {\n    template: `\n    <input\n    type=\"text\"\n    placeholder=\"Select a value\"\n    [formControl]=\"formControl\"\n    [uiAutocomplete]=\"auto\"\n    [autocompleteDisplayKey]=\"'label'\"\n    (opened)=\"openedAutocompletePanel()\"\n    (closed)=\"closesAutocompletePanel()\"\n    (optionSelected)=\"selectedOption($event)\"\n    class=\"relative w-full rounded-md border-0 p-1.5 shadow-sm ring-1 ring-inset sm:leading-6 focus:ring-2 focus:ring-inset\"\n  >\n  <ui-autocomplete #auto>\n  <ui-option *ngFor=\"let option of SIMPLE_OPTIONS\" [value]=\"option\">\n    {{option.label}}\n    <ng-container ngProjectsAs=\"icon\">\n    <ui-icon\n      icon=\"edit\"\n      [size]=\"18\"\n    ></ui-icon>\n    </ng-container>\n  </ui-option>\n  </ui-autocomplete>\n      <br>\n      <p>value: {{formControl.value | json}}</p>\n      <p>touched: {{formControl.touched}}</p>\n    `,\n    props: {\n      ...args,\n      SIMPLE_OPTIONS,\n      formControl,\n      openedAutocompletePanel,\n      closesAutocompletePanel,\n      selectedOption,\n    },\n  };\n}",
                    "rawdescription": "Form control template autocomplete",
                    "description": "<p>Form control template autocomplete</p>\n"
                },
                {
                    "name": "GROUPED_OPTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    optionName: 'A',\n    channels: [\n      {\n        optionName: 'option A 1',\n      },\n    ],\n  },\n  {\n    optionName: 'B',\n    channels: [\n      {\n        optionName: 'B 1',\n      },\n      {\n        optionName: 'b',\n      },\n    ],\n  },\n  {\n    optionName: 'C',\n  },\n  {\n    optionName: 'D',\n    channels: [\n      {\n        optionName: 'D 1',\n      },\n      {\n        optionName: 'D two',\n      },\n      {\n        optionName: 'D a b',\n      },\n    ],\n  },\n]",
                    "rawdescription": "Autocomplete grouped options example",
                    "description": "<p>Autocomplete grouped options example</p>\n"
                },
                {
                    "name": "GroupedAutocompletePanel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "GroupedAutocompletePanelTemplate.bind(\n  {}\n)",
                    "rawdescription": "Autocomplete panel inject in a input with grouped options",
                    "description": "<p>Autocomplete panel inject in a input with grouped options</p>\n"
                },
                {
                    "name": "GroupedAutocompletePanelTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<any>",
                    "defaultValue": "(args: any) => {\n  return {\n    template: `\n    <input\n    type=\"text\"\n    placeholder=\"Select a value\"\n    [uiAutocomplete]=\"auto\"\n    [autocompleteDisplayKey]=\"'optionName'\"\n    (opened)=\"openedAutocompletePanel()\"\n    (closed)=\"closesAutocompletePanel()\"\n    (optionSelected)=\"selectedOption($event)\"\n    class=\"relative w-full rounded-md border-0 p-1.5 shadow-sm ring-1 ring-inset sm:leading-6 focus:ring-2 focus:ring-inset\"\n  >\n  <ui-autocomplete #auto>\n  <ui-option [isGroup]=\"true\" *ngFor=\"let option of GROUPED_OPTIONS\">\n    {{option.optionName}}\n    <ui-option *ngFor=\"let child of option.channels\" [value]=\"child\">\n    {{child.optionName}}\n    <ng-container ngProjectsAs=\"icon\">\n    <ui-icon\n      icon=\"edit\"\n      [size]=\"18\"\n    ></ui-icon>\n    </ng-container>\n  </ui-option>\n  </ui-option>\n  <ui-autocomplete>\n    `,\n    props: {\n      ...args,\n      GROUPED_OPTIONS,\n      openedAutocompletePanel,\n      closesAutocompletePanel,\n      selectedOption,\n    },\n  };\n}",
                    "rawdescription": "Grouped autocomplete template",
                    "description": "<p>Grouped autocomplete template</p>\n"
                },
                {
                    "name": "openedAutocompletePanel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {\n  console.log('Opened autocomplete panel event');\n}",
                    "rawdescription": "Callback to test the autocomplete directive opened event",
                    "description": "<p>Callback to test the autocomplete directive opened event</p>\n"
                },
                {
                    "name": "selectedOption",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(option: string) => {\n  console.log('Option selected: ', option);\n}",
                    "rawdescription": "Callback to test the autocomplete directive optionSelected event",
                    "description": "<p>Callback to test the autocomplete directive optionSelected event</p>\n"
                },
                {
                    "name": "SIMPLE_OPTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    label: 'A',\n  },\n  {\n    label: 'a B',\n  },\n  {\n    label: 'C',\n  },\n  {\n    label: 'D',\n  },\n]",
                    "rawdescription": "Autocomplete options example",
                    "description": "<p>Autocomplete options example</p>\n"
                },
                {
                    "name": "SimpleAutocompletePanel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "SimpleAutocompletePanelTemplate.bind({})",
                    "rawdescription": "Autocomplete panel inject in a input with simples (not grouped) options",
                    "description": "<p>Autocomplete panel inject in a input with simples (not grouped) options</p>\n"
                },
                {
                    "name": "SimpleAutocompletePanelTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<any>",
                    "defaultValue": "(args: any) => {\n  return {\n    component: AutocompleteComponent,\n    template: `\n      <input\n        type=\"text\"\n        placeholder=\"Select a value\"\n        [uiAutocomplete]=\"auto\"\n        [autocompleteDisplayKey]=\"'label'\"\n        (opened)=\"openedAutocompletePanel()\"\n        (closed)=\"closesAutocompletePanel()\"\n        (optionSelected)=\"selectedOption($event)\"\n        class=\"relative w-full rounded-md border-0 p-1.5 shadow-sm ring-1 ring-inset sm:leading-6 focus:ring-2 focus:ring-inset\"\n      >\n      <ui-autocomplete #auto>\n      <ui-option *ngFor=\"let option of SIMPLE_OPTIONS\" [value]=\"option\">\n        {{option.label}}\n        <ng-container ngProjectsAs=\"icon\">\n        <ui-icon\n          icon=\"edit\"\n          [size]=\"18\"\n        ></ui-icon>\n        </ng-container>\n      </ui-option>\n      <ui-autocomplete>\n    `,\n    props: {\n      ...args,\n      SIMPLE_OPTIONS,\n      openedAutocompletePanel,\n      closesAutocompletePanel,\n      selectedOption,\n    },\n  };\n}",
                    "rawdescription": "Simple autocomplete template",
                    "description": "<p>Simple autocomplete template</p>\n"
                }
            ],
            "libs/ui/src/lib/table/table.stories.ts": [
                {
                    "name": "columnDefinitionArray",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/table/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  'name',\n  'email',\n  'phone',\n  'city',\n  'active',\n  'selected',\n  'id',\n]",
                    "rawdescription": "Column definition for table",
                    "description": "<p>Column definition for table</p>\n"
                },
                {
                    "name": "sortTableByKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/table/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(column: TableSort) => {\n  console.log(column);\n}",
                    "rawdescription": "Console log receive table sort data",
                    "description": "<p>Console log receive table sort data</p>\n"
                },
                {
                    "name": "Table",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/table/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Table component",
                    "description": "<p>Table component</p>\n"
                },
                {
                    "name": "tableData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/table/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockedTable[]",
                    "defaultValue": "[\n  {\n    name: 'Name 1',\n    email: { value: 'email@email.com' },\n    phone: { value: '111111111' },\n    cityVal: 'City 1',\n    isValid: false,\n    id: '1',\n  },\n  {\n    name: 'Name 3',\n    email: { value: 'email@email.com' },\n    phone: { value: '333333333' },\n    cityVal: 'City 3',\n    isValid: true,\n    id: '3',\n  },\n  {\n    name: 'Name 2',\n    email: { value: 'email@email.com' },\n    phone: { value: '222222222' },\n    cityVal: 'City 2',\n    isValid: true,\n    id: '2',\n  },\n  {\n    name: 'Name 4',\n    email: { value: 'email@email.com' },\n    phone: { value: '444444444' },\n    cityVal: 'City 4',\n    isValid: false,\n    id: '4',\n  },\n  {\n    name: 'Name 5',\n    email: { value: 'email@email.com' },\n    phone: { value: '555555555' },\n    cityVal: 'City 5',\n    isValid: false,\n    id: '5',\n  },\n  {\n    name: 'Name 6',\n    email: { value: 'email@email.com' },\n    phone: { value: '666666666' },\n    cityVal: 'City 6',\n    isValid: true,\n    id: '6',\n  },\n  {\n    name: 'Name 1',\n    email: { value: 'email@email.com' },\n    phone: { value: '111111111' },\n    cityVal: 'City 1',\n    isValid: false,\n    id: '1',\n  },\n  {\n    name: 'Name 3',\n    email: { value: 'email@email.com' },\n    phone: { value: '333333333' },\n    cityVal: 'City 3',\n    isValid: true,\n    id: '3',\n  },\n  {\n    name: 'Name 2',\n    email: { value: 'email@email.com' },\n    phone: { value: '222222222' },\n    cityVal: 'City 2',\n    isValid: true,\n    id: '2',\n  },\n  {\n    name: 'Name 4',\n    email: { value: 'email@email.com' },\n    phone: { value: '444444444' },\n    cityVal: 'City 4',\n    isValid: false,\n    id: '4',\n  },\n  {\n    name: 'Name 5',\n    email: { value: 'email@email.com' },\n    phone: { value: '555555555' },\n    cityVal: 'City 5',\n    isValid: false,\n    id: '5',\n  },\n  {\n    name: 'Name 6',\n    email: { value: 'email@email.com' },\n    phone: { value: '666666666' },\n    cityVal: 'City 6',\n    isValid: true,\n    id: '6',\n  },\n  {\n    name: 'Name 1',\n    email: { value: 'email@email.com' },\n    phone: { value: '111111111' },\n    cityVal: 'City 1',\n    isValid: false,\n\n    id: '1',\n  },\n  {\n    name: 'Name 3',\n    email: { value: 'email@email.com' },\n    phone: { value: '333333333' },\n    cityVal: 'City 3',\n    isValid: true,\n    id: '3',\n  },\n  {\n    name: 'Name 2',\n    email: { value: 'email@email.com' },\n    phone: { value: '222222222' },\n    cityVal: 'City 2',\n    isValid: true,\n    id: '2',\n  },\n  {\n    name: 'Name 4',\n    email: { value: 'email@email.com' },\n    phone: { value: '444444444' },\n    cityVal: 'City 4',\n    isValid: false,\n    id: '4',\n  },\n  {\n    name: 'Name 5',\n    email: { value: 'email@email.com' },\n    phone: { value: '555555555' },\n    cityVal: 'City 5',\n    isValid: false,\n    id: '5',\n  },\n  {\n    name: 'Name 6',\n    email: { value: 'email@email.com' },\n    phone: { value: '666666666' },\n    cityVal: 'City 6',\n    isValid: true,\n    id: '6',\n  },\n]",
                    "rawdescription": "Mocked table data",
                    "description": "<p>Mocked table data</p>\n"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/table/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<any>",
                    "defaultValue": "(args: any) => {\n  const pagedTableData = tableData.filter((el, index) => index < 10);\n  return {\n    template: `\n    <!--TABLE CONTENT-->\n<table\n  cdk-table \n  uiTableWrapper\n  (sortChange)=\"sortTableByKey($event)\"\n  [dataSource]=\"pagedTableData\"\n>\n  <ng-container cdkColumnDef=\"name\">\n    <th\n    uiTableHeaderSort=\"name\"\n      uiCellHeader\n      *cdkHeaderCellDef\n      scope=\"col\"\n      \n    >\n      name\n    </th>\n    <td uiCell *cdkCellDef=\"let element\">\n      {{ element.name }}\n    </td>\n  </ng-container>\n\n  <ng-container cdkColumnDef=\"email\">\n    <th\n      uiCellHeader\n      *cdkHeaderCellDef\n      scope=\"col\"\n      \n    >\n      email\n    </th>\n    <td uiCell *cdkCellDef=\"let element\">\n      {{ element.email.value }}\n    </td>\n  </ng-container>\n\n  <ng-container cdkColumnDef=\"phone\">\n    <th\n    uiTableHeaderSort=\"phone\"\n      uiCellHeader\n      *cdkHeaderCellDef\n      scope=\"col\"\n      \n    >\n      phone\n    </th>\n    <td uiCell *cdkCellDef=\"let element\">\n      {{ element.phone.value }}\n    </td>\n  </ng-container>\n\n  <ng-container cdkColumnDef=\"city\">\n    <th\n    uiTableHeaderSort=\"cityVal\"\n      uiCellHeader\n      *cdkHeaderCellDef\n      scope=\"col\"\n      \n    >\n      city\n    </th>\n    <td uiCell *cdkCellDef=\"let element\">\n      {{ element.cityVal }}\n    </td>\n  </ng-container>\n\n  <ng-container cdkColumnDef=\"active\">\n    <th\n      uiCellHeader\n      *cdkHeaderCellDef\n      scope=\"col\"\n      \n    >\n      active\n    </th>\n    <td uiCell *cdkCellDef=\"let element\">\n    <div class=\"flex items-center justify-end gap-x-2 sm:justify-start\">\n    <div [ngClass]=\"{'text-rose-400 bg-rose-400/10': !element.isValid, 'text-green-400 bg-green-400/10': element.isValid}\" class=\"flex-none rounded-full p-1\">\n      <div class=\"h-1.5 w-1.5 rounded-full bg-current\"></div>\n    </div>\n    <div class=\"text-neutral sm:block\">{{element.isValid ? 'Completed' : 'Error' }}</div>\n  </div>\n    </td>\n  </ng-container>\n\n  <ng-container cdkColumnDef=\"selected\">\n    <th\n      uiCellHeader\n      *cdkHeaderCellDef\n      scope=\"col\"\n      \n    >\n      selected\n    </th>\n    <td uiCell *cdkCellDef=\"let element\">\n      <ui-toggle></ui-toggle>\n    </td>\n  </ng-container>\n\n  <ng-container cdkColumnDef=\"id\">\n    <th\n      uiCellHeader\n      *cdkHeaderCellDef\n      scope=\"col\"\n      \n    >\n      id\n    </th>\n    <td uiCell *cdkCellDef=\"let element\">\n      {{ element.id }}\n    </td>\n  </ng-container>\n  <tr cdk-header-row *cdkHeaderRowDef=\"columnDefinitionArray\"></tr>\n  <tr cdk-row *cdkRowDef=\"let row; columns: columnDefinitionArray\"></tr>\n</table>`,\n    props: {\n      ...args,\n      pagedTableData,\n      sortTableByKey,\n      columnDefinitionArray,\n    },\n  };\n}",
                    "rawdescription": "Template divider for table",
                    "description": "<p>Template divider for table</p>\n"
                }
            ],
            "libs/ui/src/lib/breadcrumbs/breadcrumbs.stories.ts": [
                {
                    "name": "Contained",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/breadcrumbs/breadcrumbs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<BreadcrumbsComponent>",
                    "defaultValue": "{\n  args: {\n    breadcrumbs: [\n      {\n        text: 'item 0',\n        uri: '#',\n        showLabel: true,\n      },\n      {\n        text: 'item 1',\n        uri: '#',\n        showLabel: true,\n      },\n      {\n        text: 'item 2',\n        uri: '#',\n        showLabel: true,\n      },\n    ],\n    separator: 'chevron',\n    display: 'contained',\n  },\n}",
                    "rawdescription": "Container story",
                    "description": "<p>Container story</p>\n"
                },
                {
                    "name": "Full",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/breadcrumbs/breadcrumbs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<BreadcrumbsComponent>",
                    "defaultValue": "{\n  args: {\n    breadcrumbs: [\n      {\n        text: 'item 0',\n        uri: '#',\n        showLabel: true,\n      },\n      {\n        text: 'item 1',\n        uri: '#',\n        showLabel: true,\n      },\n      {\n        text: 'item 2',\n        uri: '#',\n        showLabel: true,\n      },\n    ],\n    separator: 'chevron',\n    display: 'full',\n  },\n}",
                    "rawdescription": "Full width story",
                    "description": "<p>Full width story</p>\n"
                },
                {
                    "name": "SimpleChevron",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/breadcrumbs/breadcrumbs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<BreadcrumbsComponent>",
                    "defaultValue": "{\n  args: {\n    breadcrumbs: [\n      {\n        text: 'item 0',\n        uri: '#',\n        showLabel: true,\n      },\n      {\n        text: 'item 1',\n        uri: '#',\n        showLabel: true,\n      },\n      {\n        text: 'item 2',\n        uri: '#',\n        showLabel: true,\n      },\n    ],\n    separator: 'chevron',\n    display: 'simple',\n  },\n}",
                    "rawdescription": "Simple Chevron story",
                    "description": "<p>Simple Chevron story</p>\n"
                },
                {
                    "name": "SimpleSlash",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/breadcrumbs/breadcrumbs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<BreadcrumbsComponent>",
                    "defaultValue": "{\n  args: {\n    breadcrumbs: [\n      {\n        text: 'item 0',\n        uri: '#',\n        showLabel: true,\n      },\n      {\n        text: 'item 1',\n        uri: '#',\n        showLabel: true,\n      },\n      {\n        text: 'item 2',\n        uri: '#',\n        showLabel: true,\n      },\n    ],\n    separator: 'slash',\n    display: 'simple',\n  },\n}",
                    "rawdescription": "Simple slash story",
                    "description": "<p>Simple slash story</p>\n"
                }
            ],
            "libs/ui/src/lib/checkbox/checkbox.component.ts": [
                {
                    "name": "CONTROL_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/checkbox/checkbox.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Provider",
                    "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => CheckboxComponent),\n  multi: true,\n}",
                    "rawdescription": "A provider for the ControlValueAccessor interface.",
                    "description": "<p>A provider for the ControlValueAccessor interface.</p>\n"
                }
            ],
            "libs/ui/src/lib/textarea/textarea.component.ts": [
                {
                    "name": "CONTROL_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/textarea/textarea.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Provider",
                    "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => TextareaComponent),\n  multi: true,\n}",
                    "rawdescription": "Control value accessor",
                    "description": "<p>Control value accessor</p>\n"
                }
            ],
            "libs/ui/src/lib/toggle/toggle.component.ts": [
                {
                    "name": "CONTROL_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/toggle/toggle.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Provider",
                    "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ToggleComponent),\n  multi: true,\n}",
                    "rawdescription": "A provider for the ControlValueAccessor interface.",
                    "description": "<p>A provider for the ControlValueAccessor interface.</p>\n"
                }
            ],
            "libs/ui/src/lib/cron-editor/cron-editor.stories.ts": [
                {
                    "name": "cronEditor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/cron-editor/cron-editor.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<CronEditorComponent>",
                    "defaultValue": "{\n  args: {\n    options: {\n      defaultTime: '00:00:00',\n      // Cron Tab Options\n      hideMinutesTab: false,\n      hideHourlyTab: false,\n      hideDailyTab: false,\n      hideWeeklyTab: false,\n      hideMonthlyTab: false,\n      hideYearlyTab: false,\n      hideAdvancedTab: true,\n      hideSpecificWeekDayTab: false,\n      hideSpecificMonthWeekTab: false,\n      // Time options\n      use24HourTime: true,\n      hideSeconds: false,\n      // standard or quartz\n      cronFlavor: 'standard',\n    },\n  },\n}",
                    "rawdescription": "CronEditor story",
                    "description": "<p>CronEditor story</p>\n"
                }
            ],
            "libs/ui/src/lib/cron-editor/cron-editor.component.ts": [
                {
                    "name": "dailyExp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/\\d+ \\d+ \\d+ 1\\/\\d+ \\* [?*] \\*/",
                    "rawdescription": "daily regex",
                    "description": "<p>daily regex</p>\n"
                },
                {
                    "name": "dailyWeekdayExp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/\\d+ \\d+ \\d+ [?*] \\* MON-FRI \\*/",
                    "rawdescription": "dailyWeekday regex",
                    "description": "<p>dailyWeekday regex</p>\n"
                },
                {
                    "name": "hourlyExp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/\\d+ \\d+ 0\\/\\d+ 1\\/1 \\* [?*] \\*/",
                    "rawdescription": "hourly regex",
                    "description": "<p>hourly regex</p>\n"
                },
                {
                    "name": "minutesExp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/\\d+ 0\\/\\d+ \\* 1\\/1 \\* [?*] \\*/",
                    "rawdescription": "minutes regex",
                    "description": "<p>minutes regex</p>\n"
                },
                {
                    "name": "monthlyExpo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/\\d+ \\d+ \\d+ (\\d+|L|LW|1W) 1\\/\\d+ [?*] \\*/",
                    "rawdescription": "monthly regex",
                    "description": "<p>monthly regex</p>\n"
                },
                {
                    "name": "monthlyWeekdayExpo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/\\d+ \\d+ \\d+ [?*] 1\\/\\d+ (MON|TUE|WED|THU|FRI|SAT|SUN)((#[1-5])|L) \\*/",
                    "rawdescription": "MonthlyWeekday regex",
                    "description": "<p>MonthlyWeekday regex</p>\n"
                },
                {
                    "name": "weeklyExp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/\\d+ \\d+ \\d+ [?*] \\* (MON|TUE|WED|THU|FRI|SAT|SUN)(,(MON|TUE|WED|THU|FRI|SAT|SUN))* \\*/",
                    "rawdescription": "weekly regex",
                    "description": "<p>weekly regex</p>\n"
                },
                {
                    "name": "yearlyExp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/\\d+ \\d+ \\d+ (\\d+|L|LW|1W) \\d+ [?*] \\*/",
                    "rawdescription": "yearly regex",
                    "description": "<p>yearly regex</p>\n"
                },
                {
                    "name": "yearlyMonthWeekExp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/\\d+ \\d+ \\d+ [?*] \\d+ (MON|TUE|WED|THU|FRI|SAT|SUN)((#[1-5])|L) \\*/",
                    "rawdescription": "yearlyMonthWeek regex",
                    "description": "<p>yearlyMonthWeek regex</p>\n"
                }
            ],
            "libs/ui/src/lib/alert/alert.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<Story>",
                    "defaultValue": "{\n  args: {\n    content:\n      'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam pellentesque rhoncus odio, a accumsan purus venenatis eget. Suspendisse pretium nunc non tellus pulvinar, ut dapibus velit mollis. Vivamus dictum tempus ligula, vitae condimentum justo scelerisque sit amet. Donec ultrices quis turpis vitae tincidunt.',\n  },\n}",
                    "rawdescription": "Alert story",
                    "description": "<p>Alert story</p>\n"
                }
            ],
            "libs/ui/src/lib/dialog/dialog.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/dialog/dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Primary launchDialog",
                    "description": "<p>Primary launchDialog</p>\n"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/dialog/dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<LaunchDialogComponent>",
                    "defaultValue": "(\n  args: LaunchDialogComponent\n) => ({\n  props: args,\n})",
                    "rawdescription": "Template launchDialog",
                    "description": "<p>Template launchDialog</p>\n"
                }
            ],
            "libs/ui/src/lib/tabs/tabs.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/tabs/tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<TabsComponent>",
                    "defaultValue": "{\n  args: {\n    vertical: false,\n  },\n}",
                    "rawdescription": "Default story",
                    "description": "<p>Default story</p>\n"
                },
                {
                    "name": "Vertical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/tabs/tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<TabsComponent>",
                    "defaultValue": "{\n  args: {\n    vertical: true,\n  },\n}",
                    "rawdescription": "Vertical story",
                    "description": "<p>Vertical story</p>\n"
                }
            ],
            "libs/ui/src/lib/avatar/avatar.stories.ts": [
                {
                    "name": "Defaut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/avatar/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<AvatarComponent>",
                    "defaultValue": "{\n  args: {},\n}",
                    "rawdescription": "Default inputs",
                    "description": "<p>Default inputs</p>\n"
                },
                {
                    "name": "PrimaryCircleAvatarLarge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/avatar/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<AvatarComponent>",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    shape: 'circle',\n    initials: '',\n    image: '',\n    variant: 'primary',\n  },\n}",
                    "rawdescription": "Primary large circle avatar story",
                    "description": "<p>Primary large circle avatar story</p>\n"
                },
                {
                    "name": "PrimaryCircleAvatarMedium",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/avatar/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<AvatarComponent>",
                    "defaultValue": "{\n  args: {\n    size: 'medium',\n    shape: 'circle',\n    initials: '',\n    image: '',\n    variant: 'primary',\n  },\n}",
                    "rawdescription": "Primary medium circle avatar story",
                    "description": "<p>Primary medium circle avatar story</p>\n"
                },
                {
                    "name": "PrimaryCircleAvatarSmall",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/avatar/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<AvatarComponent>",
                    "defaultValue": "{\n  args: {\n    size: 'small',\n    shape: 'circle',\n    initials: '',\n    image: '',\n    variant: 'primary',\n  },\n}",
                    "rawdescription": "Primary small circle avatar story",
                    "description": "<p>Primary small circle avatar story</p>\n"
                },
                {
                    "name": "PrimaryCircleImageAvatarLarge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/avatar/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<AvatarComponent>",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    shape: 'circle',\n    initials: '',\n    image:\n      'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80',\n    variant: 'primary',\n  },\n}",
                    "rawdescription": "Primary large circle avatar with image story",
                    "description": "<p>Primary large circle avatar with image story</p>\n"
                },
                {
                    "name": "PrimaryRectangleAvatarLarge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/avatar/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<AvatarComponent>",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    shape: 'rectangle',\n    initials: '',\n    image: '',\n    variant: 'primary',\n  },\n}",
                    "rawdescription": "Primary large rectangle avatar story",
                    "description": "<p>Primary large rectangle avatar story</p>\n"
                },
                {
                    "name": "PrimaryRectangleAvatarMedium",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/avatar/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<AvatarComponent>",
                    "defaultValue": "{\n  args: {\n    size: 'medium',\n    shape: 'rectangle',\n    initials: '',\n    image: '',\n    variant: 'primary',\n  },\n}",
                    "rawdescription": "Primary medium rectangle avatar story",
                    "description": "<p>Primary medium rectangle avatar story</p>\n"
                },
                {
                    "name": "PrimaryRectangleAvatarSmall",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/avatar/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<AvatarComponent>",
                    "defaultValue": "{\n  args: {\n    size: 'small',\n    shape: 'rectangle',\n    initials: '',\n    image: '',\n    variant: 'primary',\n  },\n}",
                    "rawdescription": "Primary small rectangle avatar story",
                    "description": "<p>Primary small rectangle avatar story</p>\n"
                },
                {
                    "name": "PrimaryRectangleImageAvatarLarge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/avatar/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<AvatarComponent>",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    shape: 'rectangle',\n    initials: '',\n    image:\n      'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80',\n    variant: 'primary',\n  },\n}",
                    "rawdescription": "Primary large rectangle with image avatar story",
                    "description": "<p>Primary large rectangle with image avatar story</p>\n"
                },
                {
                    "name": "SecondaryCircleAvatarLarge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/avatar/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<AvatarComponent>",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    shape: 'circle',\n    initials: '',\n    image: '',\n    variant: 'secondary',\n  },\n}",
                    "rawdescription": "Secondary large circle avatar story",
                    "description": "<p>Secondary large circle avatar story</p>\n"
                },
                {
                    "name": "SecondaryRectangleAvatarLarge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/avatar/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<AvatarComponent>",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    shape: 'rectangle',\n    initials: '',\n    image: '',\n    variant: 'secondary',\n  },\n}",
                    "rawdescription": "Secondary large rectangle avatar story",
                    "description": "<p>Secondary large rectangle avatar story</p>\n"
                },
                {
                    "name": "TertiaryCircleAvatarLarge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/avatar/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<AvatarComponent>",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    shape: 'circle',\n    initials: '',\n    image: '',\n    variant: 'tertiary',\n  },\n}",
                    "rawdescription": "Tertiary large circle avatar story",
                    "description": "<p>Tertiary large circle avatar story</p>\n"
                },
                {
                    "name": "TertiaryRectangleAvatarLarge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/avatar/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<AvatarComponent>",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    shape: 'rectangle',\n    initials: '',\n    image: '',\n    variant: 'tertiary',\n  },\n}",
                    "rawdescription": "Tertiary large rectangle avatar story",
                    "description": "<p>Tertiary large rectangle avatar story</p>\n"
                }
            ],
            "libs/ui/src/lib/checkbox/checkbox.stories.ts": [
                {
                    "name": "FormCheckbox",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/checkbox/checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "FormControlTemplate.bind({})",
                    "rawdescription": "Form control checkbox",
                    "description": "<p>Form control checkbox</p>\n"
                },
                {
                    "name": "FormControlTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/checkbox/checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<CheckboxComponent>",
                    "defaultValue": "(\n  args: CheckboxComponent\n) => {\n  const formGroup = new FormGroup({\n    checkbox: new FormControl(false),\n  });\n  args.variant = 'default';\n  return {\n    component: CheckboxComponent,\n    template: `\n      <form [formGroup]=\"formGroup\">\n      <ui-checkbox [variant]=\"'${args.variant}'\" formControlName=\"checkbox\">\n      <ng-container ngProjectAs=\"label\">Form control checkbox</ng-container>\n      </ui-checkbox>\n        </form>\n        <br>\n        <p>value: {{formGroup.get('checkbox').value}}</p>\n        <p>touched: {{formGroup.get('checkbox').touched}}</p>\n        `,\n    props: {\n      ...args,\n      formGroup,\n    },\n  };\n}",
                    "rawdescription": "Form control template checkbox",
                    "description": "<p>Form control template checkbox</p>\n"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/checkbox/checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Primary checkbox",
                    "description": "<p>Primary checkbox</p>\n"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/checkbox/checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<CheckboxComponent>",
                    "defaultValue": "(args: CheckboxComponent) => {\n  args.variant = 'default';\n  return {\n    component: CheckboxComponent,\n    template: `\n      <ui-checkbox [variant]=\"'${args.variant}'\">\n      <ng-container ngProjectAs=\"label\">Checkbox text</ng-container>\n      <ng-container ngProjectAs=\"description\">Description text text text.</ng-container>\n      <ng-container ngProjectAs=\"icon\">\n      <ui-icon\n      icon=\"info_outline\"\n      [inline]=\"true\"\n      [size]=\"18\"\n      variant=\"grey\"\n    ></ui-icon>\n      </ng-container>\n      </ui-checkbox>\n        `,\n    props: {\n      ...args,\n    },\n  };\n}",
                    "rawdescription": "Template checkbox",
                    "description": "<p>Template checkbox</p>\n"
                }
            ],
            "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts": [
                {
                    "name": "formControl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FormGroup({\n  name: new FormControl(''),\n})",
                    "rawdescription": "Form group to test story with disable option",
                    "description": "<p>Form group to test story with disable option</p>\n"
                },
                {
                    "name": "options",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  'french',\n  'spanish',\n  'english',\n  'japanese',\n  'javanese',\n  'chinese',\n]",
                    "rawdescription": "List of options for the select menu included template",
                    "description": "<p>List of options for the select menu included template</p>\n"
                },
                {
                    "name": "OutlineFalse",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Outline = False design",
                    "description": "<p>Outline = False design</p>\n"
                },
                {
                    "name": "OutlineFalseAutocomplete",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateAutocomplete.bind({})",
                    "rawdescription": "Outline = False design + use of autocomplete",
                    "description": "<p>Outline = False design + use of autocomplete</p>\n"
                },
                {
                    "name": "OutlineFalseSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateSelect.bind({})",
                    "rawdescription": "Outline = False design + use of select menu",
                    "description": "<p>Outline = False design + use of select menu</p>\n"
                },
                {
                    "name": "OutlineTrue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Outline = True design",
                    "description": "<p>Outline = True design</p>\n"
                },
                {
                    "name": "OutlineTrueAutocomplete",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateAutocomplete.bind({})",
                    "rawdescription": "Outline = True design + use of autocomplete",
                    "description": "<p>Outline = True design + use of autocomplete</p>\n"
                },
                {
                    "name": "OutlineTrueSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateSelect.bind({})",
                    "rawdescription": "Outline = True design + use of select menu",
                    "description": "<p>Outline = True design + use of select menu</p>\n"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<any>",
                    "defaultValue": "(args: any) => {\n  return {\n    template: `<div uiFormFieldDirective [outline]=\"${args.outline}\">\n    <label>Phone Number</label>\n    <input type=\"text\" name=\"account-number\" id=\"account-number\" placeholder=\"000-00-0000\"/>\n    <ui-spinner [size]=\"'medium'\" uiSuffix></ui-spinner>\n    <ui-icon icon=\"search\" uiPrefix></ui-icon>\n  </div>`,\n    props: {\n      ...args,\n    },\n  };\n}",
                    "rawdescription": "Template to create form wrapper component's story",
                    "description": "<p>Template to create form wrapper component&#39;s story</p>\n"
                },
                {
                    "name": "TemplateAutocomplete",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<any>",
                    "defaultValue": "(args: any) => {\n  return {\n    template: `\n    <div [formGroup]=\"formControl\">\n      <div uiFormFieldDirective  [outline]=\"${args.outline}\">\n        <label>Choose language</label>\n        <input\n          formControlName=\"name\"\n          type=\"text\"\n          placeholder=\"Select a value\"\n          [uiAutocomplete]=\"auto\"\n          (optionSelected)=\"selectedOption($event)\"\n        >\n        <ui-autocomplete #auto>\n          <ui-option *ngFor=\"let option of options\" [value]=\"option\">\n            {{option}}\n            <ng-container ngProjectsAs=\"icon\">\n              <ui-icon\n                [icon]=\"'edit'\"\n                [size]=\"18\"\n              ></ui-icon>\n            </ng-container>\n          </ui-option>\n        </ui-autocomplete>\n        <ui-spinner [size]=\"'medium'\" uiSuffix></ui-spinner>\n        <ui-icon icon=\"search\" uiPrefix></ui-icon>\n    </div>\n  </div>\n  <ui-button (click)=\"toggleDisabled()\">\n    Enable/disabled\n  </ui-button>\n  `,\n    props: {\n      ...args,\n      options,\n      toggleDisabled,\n      formControl,\n    },\n  };\n}",
                    "rawdescription": "Template to create form wrapper component's story using autocomplete",
                    "description": "<p>Template to create form wrapper component&#39;s story using autocomplete</p>\n"
                },
                {
                    "name": "TemplateSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<any>",
                    "defaultValue": "(args: any) => {\n  return {\n    template: `<div uiFormFieldDirective [outline]=\"${args.outline}\">\n    <label>Choose language</label>\n    <ui-select-menu \n      [multiselect]=\"false\"\n      [disabled]=\"false\">\n        <ui-select-option *ngFor=\"let option of options\" [value]=\"option\">\n          {{option}}\n        </ui-select-option>\n    </ui-select-menu>\n    <ui-spinner [size]=\"'medium'\" uiSuffix></ui-spinner>\n    <ui-icon icon=\"search\" uiPrefix></ui-icon>\n  </div>`,\n    props: {\n      ...args,\n      options,\n    },\n  };\n}",
                    "rawdescription": "Template to create form wrapper component's story using select menu",
                    "description": "<p>Template to create form wrapper component&#39;s story using select menu</p>\n"
                },
                {
                    "name": "toggleDisabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {\n  if (formControl.disabled) {\n    formControl.enable();\n  } else {\n    formControl.disable();\n  }\n}",
                    "rawdescription": "Callback to test story with disable option",
                    "description": "<p>Callback to test story with disable option</p>\n"
                }
            ],
            "libs/ui/src/lib/radio/radio.stories.ts": [
                {
                    "name": "formControl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/radio/radio.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FormControl()",
                    "rawdescription": "Form control for story testing",
                    "description": "<p>Form control for story testing</p>\n"
                },
                {
                    "name": "FormControlTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/radio/radio.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<RadioComponent>",
                    "defaultValue": "(args: RadioComponent) => {\n  args.name = 'notification-method';\n  return {\n    component: RadioComponent,\n    template: `\n    <div class=\"space-y-4\" [formControl]=\"formControl\" [uiRadioGroupDirective]=\"'${args.name}'\">\n    <ui-radio *ngFor=\"let option of radioOptions\" [disabled]=\"${args.disabled}\" [variant]=\"'${args.variant}'\" [value]=\"option.value\" >\n      <ng-container ngProjectAs=\"label\">{{option.label}}</ng-container>\n    </ui-radio>\n    </div>\n    <br>\n    <p>value: {{formControl.value}}</p>\n    <p>touched: {{formControl.touched}}</p>\n`,\n    props: {\n      ...args,\n      formControl,\n      radioOptions,\n    },\n  };\n}",
                    "rawdescription": "Form control template radio",
                    "description": "<p>Form control template radio</p>\n"
                },
                {
                    "name": "FormRadio",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/radio/radio.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "FormControlTemplate.bind({})",
                    "rawdescription": "Form control radio",
                    "description": "<p>Form control radio</p>\n"
                },
                {
                    "name": "getRadioChangeSelection",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/radio/radio.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(radioSelectionChange: any) => {\n  selectedOption = radioSelectionChange;\n  addons.getChannel().emit(FORCE_RE_RENDER);\n}",
                    "rawdescription": "Function to test radio change callback when no form control is used",
                    "description": "<p>Function to test radio change callback when no form control is used</p>\n"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/radio/radio.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Primary radio",
                    "description": "<p>Primary radio</p>\n"
                },
                {
                    "name": "radioOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/radio/radio.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RadioOption[]",
                    "defaultValue": "[\n  {\n    label: 'Email',\n    value: 'email',\n  },\n  {\n    label: 'Phone (SMS)',\n    value: 'sms',\n  },\n  {\n    label: 'Push Notification',\n    value: 'push',\n  },\n]"
                },
                {
                    "name": "selectedOption",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/radio/radio.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/radio/radio.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<RadioComponent>",
                    "defaultValue": "(args: RadioComponent) => {\n  args.name = 'notification-method';\n  return {\n    component: RadioComponent,\n    template: `\n    <div class=\"space-y-4\" (groupValueChange)=\"getRadioChangeSelection($event)\" [uiRadioGroupDirective]=\"'${args.name}'\">\n    <ui-radio *ngFor=\"let option of radioOptions; \" [disabled]=\"${args.disabled}\" [variant]=\"'${args.variant}'\" [value]=\"option.value\">\n      <ng-container ngProjectAs=\"label\">{{option.label}}</ng-container>\n    </ui-radio>\n    </div>\n    <br>\n    <p>value: {{selectedOption}}</p>\n    `,\n    props: {\n      ...args,\n      radioOptions,\n      getRadioChangeSelection,\n      selectedOption,\n    },\n  };\n}",
                    "rawdescription": "Template radio group",
                    "description": "<p>Template radio group</p>\n"
                }
            ],
            "libs/ui/src/lib/textarea/textarea.stories.ts": [
                {
                    "name": "FormControlTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/textarea/textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<TextareaComponent>",
                    "defaultValue": "(\n  args: TextareaComponent\n) => {\n  const formGroup = new FormGroup({\n    textarea: new FormControl('Default value'),\n  });\n  return {\n    component: TextareaComponent,\n    template: `\n      <form [formGroup]=\"formGroup\">\n      <ui-textarea [placeholder]=\"'${args.placeholder}'\" formControlName=\"textarea\"></ui-textarea>\n        </form>\n        <br>\n        <p>value: {{formGroup.get('textarea').value}}</p>\n        <p>touched: {{formGroup.get('textarea').touched}}</p>\n        `,\n    props: {\n      ...args,\n      formGroup,\n    },\n  };\n}",
                    "rawdescription": "Form control template textarea",
                    "description": "<p>Form control template textarea</p>\n"
                },
                {
                    "name": "FormTextarea",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/textarea/textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "FormControlTemplate.bind({})",
                    "rawdescription": "Form control textarea",
                    "description": "<p>Form control textarea</p>\n"
                },
                {
                    "name": "KendoFocusTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/textarea/textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<TextareaComponent>",
                    "defaultValue": "(\n  args: TextareaComponent\n) => {\n  return {\n    component: TextareaComponent,\n    template: `\n      <ui-textarea kendoGridFocusable [placeholder]=\"'${args.placeholder}'\"></ui-textarea>\n        `,\n    props: {\n      ...args,\n    },\n  };\n}",
                    "rawdescription": "Kendo focusable template textarea",
                    "description": "<p>Kendo focusable template textarea</p>\n"
                },
                {
                    "name": "KendoFocusTextarea",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/textarea/textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "KendoFocusTemplate.bind({})",
                    "rawdescription": "Kendo focus textarea",
                    "description": "<p>Kendo focus textarea</p>\n"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/textarea/textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Primary textarea",
                    "description": "<p>Primary textarea</p>\n"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/textarea/textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<TextareaComponent>",
                    "defaultValue": "(args: TextareaComponent) => ({\n  props: args,\n})",
                    "rawdescription": "Template textarea",
                    "description": "<p>Template textarea</p>\n"
                }
            ],
            "libs/ui/src/lib/toggle/toggle.stories.ts": [
                {
                    "name": "FormControlTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/toggle/toggle.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<ToggleComponent>",
                    "defaultValue": "(\n  args: ToggleComponent\n) => {\n  const formGroup = new FormGroup({\n    toggle: new FormControl(true),\n  });\n  return {\n    component: ToggleComponent,\n    template: `\n      <form [formGroup]=\"formGroup\">\n      <ui-toggle [type]=\"'${args.type}'\" [variant]=\"'${args.variant}'\" [labelPosition]=\"'${args.labelPosition}'\" formControlName=\"toggle\">\n        <ng-container ngProjectAs=\"label\">Test test test!</ng-container>\n        <ng-container ngProjectAs=\"description\">\n          Test test test test test test test test test test test test test\n        </ng-container>\n      </ui-toggle>\n        </form>\n        <br>\n        <p>value: {{formGroup.get('toggle').value}}</p>\n        <p>touched: {{formGroup.get('toggle').touched}}</p>\n        `,\n    props: {\n      ...args,\n      formGroup,\n    },\n  };\n}",
                    "rawdescription": "Form control template toggle",
                    "description": "<p>Form control template toggle</p>\n"
                },
                {
                    "name": "FormToggle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/toggle/toggle.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "FormControlTemplate.bind({})",
                    "rawdescription": "Form control toggle",
                    "description": "<p>Form control toggle</p>\n"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/toggle/toggle.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "PrimaryTemplate.bind({})",
                    "rawdescription": "Primary toggle",
                    "description": "<p>Primary toggle</p>\n"
                },
                {
                    "name": "PrimaryTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/toggle/toggle.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<ToggleComponent>",
                    "defaultValue": "(args: ToggleComponent) => {\n  args.icon = {\n    disableIcon: 'close',\n    enableIcon: 'save',\n  };\n  return {\n    component: ToggleComponent,\n    template: `\n      <ui-toggle [type]=\"'${args.type}'\" [icon]=\"icon\" [variant]=\"'${args.variant}'\" [labelPosition]=\"'${args.labelPosition}'\">\n        <ng-container ngProjectAs=\"label\">Test test test!</ng-container>\n        <ng-container ngProjectAs=\"description\">\n          Test test test test test test test test test test test test test\n        </ng-container>\n      </ui-toggle>\n        `,\n    props: {\n      ...args,\n    },\n  };\n}",
                    "rawdescription": "Primary template toggle",
                    "description": "<p>Primary template toggle</p>\n"
                }
            ],
            "libs/ui/src/lib/slider/slider.stories.ts": [
                {
                    "name": "formGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/slider/slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FormGroup({\n  slider: new FormControl(4),\n})",
                    "rawdescription": "Form group to test slider control value accessor",
                    "description": "<p>Form group to test slider control value accessor</p>\n"
                },
                {
                    "name": "Slider",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/slider/slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "One to fourteen slider version",
                    "description": "<p>One to fourteen slider version</p>\n"
                },
                {
                    "name": "sliderTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/slider/slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`<div [formGroup]=\"formGroup\" class=\"py-5\">\n<ui-slider formControlName=\"slider\" [minValue]=\"minValue\" [maxValue]=\"maxValue\"></ui-slider>\n</div>\n<br>\n<p>value: {{formGroup.get('slider').value}}</p>\n<p>touched: {{formGroup.get('slider').touched}}</p>\n`",
                    "rawdescription": "Slider default template",
                    "description": "<p>Slider default template</p>\n"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/slider/slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SliderComponent>",
                    "defaultValue": "(args: SliderComponent) => {\n  args.minValue = 1;\n  args.maxValue = 14;\n  return {\n    component: SliderComponent,\n    template: sliderTemplate,\n    props: {\n      ...args,\n      formGroup,\n    },\n  };\n}",
                    "rawdescription": "Template for storybook's test of the component",
                    "description": "<p>Template for storybook&#39;s test of the component</p>\n"
                }
            ],
            "libs/ui/src/lib/divider/divider.stories.ts": [
                {
                    "name": "Horizontal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/divider/divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<DividerComponent>",
                    "defaultValue": "{\n  args: {\n    position: 'center',\n    text: 'Test',\n    orientation: 'horizontal',\n  },\n}",
                    "rawdescription": "Horizontal divider",
                    "description": "<p>Horizontal divider</p>\n"
                },
                {
                    "name": "Vertical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/divider/divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<DividerComponent>",
                    "defaultValue": "{\n  args: {\n    position: 'center',\n    orientation: 'vertical',\n  },\n}",
                    "rawdescription": "Vertical divider",
                    "description": "<p>Vertical divider</p>\n"
                }
            ],
            "libs/ui/src/lib/graphql-select/graphql-select.component.ts": [
                {
                    "name": "ITEMS_PER_RELOAD",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/graphql-select/graphql-select.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "10",
                    "rawdescription": "A constant that is used to determine how many items should be added on scroll.",
                    "description": "<p>A constant that is used to determine how many items should be added on scroll.</p>\n"
                }
            ],
            "libs/ui/src/lib/paginator/paginator.stories.ts": [
                {
                    "name": "itemsArray",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/paginator/paginator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "defaultValue": "[...Array(100).keys()]",
                    "rawdescription": "Total items for the paginator",
                    "description": "<p>Total items for the paginator</p>\n"
                },
                {
                    "name": "pageChange",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/paginator/paginator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(event: UIPageChangeEvent) => {\n  console.log('UIPageChangeEvent: ', event);\n  pagedItems = [...itemsArray.slice(event.skip, event.skip + event.pageSize)];\n  addons.getChannel().emit(FORCE_RE_RENDER);\n}",
                    "rawdescription": "Custom method to update paged items for story testing",
                    "description": "<p>Custom method to update paged items for story testing</p>\n"
                },
                {
                    "name": "pagedItems",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/paginator/paginator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "defaultValue": "itemsArray.filter((value) => value < 10)"
                },
                {
                    "name": "Paginator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/paginator/paginator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Paginator story",
                    "description": "<p>Paginator story</p>\n"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/paginator/paginator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<PaginatorComponent>",
                    "defaultValue": "(args: PaginatorComponent) => {\n  return {\n    component: PaginatorComponent,\n    template: `\n    <div class=\"overflow-y-auto max-h-70\">\n      <ng-container *ngFor=\"let item of pagedItems\">\n        <p>{{item}}</p>\n      </ng-container>\n    </div>\n    <ui-paginator [disabled]=\"${args.disabled}\" (pageChange)=\"pageChange($event)\" [totalItems]=\"itemsArray.length\" ></ui-paginator>\n        `,\n    props: {\n      ...args,\n      itemsArray,\n      pagedItems,\n      pageChange,\n    },\n  };\n}",
                    "rawdescription": "Paginator template",
                    "description": "<p>Paginator template</p>\n"
                }
            ],
            "libs/ui/src/lib/spinner/spinner.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/spinner/spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Large spinner",
                    "description": "<p>Large spinner</p>\n"
                },
                {
                    "name": "largeSpinner",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/spinner/spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  size: 'large',\n}",
                    "rawdescription": "Large spinner",
                    "description": "<p>Large spinner</p>\n"
                },
                {
                    "name": "Medium",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/spinner/spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Medium spinner",
                    "description": "<p>Medium spinner</p>\n"
                },
                {
                    "name": "mediumSpinner",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/spinner/spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  size: 'medium',\n}",
                    "rawdescription": "Medium spinner",
                    "description": "<p>Medium spinner</p>\n"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/spinner/spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Small spinner",
                    "description": "<p>Small spinner</p>\n"
                },
                {
                    "name": "smallSpinner",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/spinner/spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  size: 'small',\n}",
                    "rawdescription": "Small spinner",
                    "description": "<p>Small spinner</p>\n"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/spinner/spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<SpinnerComponent>",
                    "defaultValue": "(args: SpinnerComponent) => ({\n  props: args,\n})",
                    "rawdescription": "Template spinner",
                    "description": "<p>Template spinner</p>\n"
                }
            ],
            "libs/ui/src/lib/expansion-panel/expansion-panel.stories.ts": [
                {
                    "name": "MultiPanel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/expansion-panel/expansion-panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateMulti.bind({})",
                    "rawdescription": "Multi expansion panel",
                    "description": "<p>Multi expansion panel</p>\n"
                },
                {
                    "name": "onClose",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/expansion-panel/expansion-panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {\n  console.log('panel closed');\n}",
                    "rawdescription": "Test panel close",
                    "description": "<p>Test panel close</p>\n"
                },
                {
                    "name": "panelOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/expansion-panel/expansion-panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PanelOption[]",
                    "defaultValue": "[\n  {\n    title: 'Item 1',\n    expanded: true,\n    text: 'Lorem ipsum dolor, sit amet consectetur adipisicing elit. Perferendis excepturi incidunt ipsum deleniti labore, tempore non nam doloribus blanditiis veritatis illo autem iure aliquid ullam rem tenetur deserunt velit culpa?',\n  },\n  {\n    title: 'Item 2',\n    expanded: false,\n    text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Repudiandae ab harum eius, ullam, ex expedita animi nihil, et ut fugit commodi quam! Saepe, recusandae quo sapiente id quidem velit, beatae error distinctio asperiores nesciunt officiis iusto. Sed, aliquid labore pariatur, optio sequi recusandae blanditiis voluptas perferendis sint eveniet inventore harum porro nemo consequatur nesciunt quos delectus, id amet quae? Exercitationem ab debitis ipsum sapiente? A, culpa, quaerat assumenda amet nulla id, quod quia facilis tempora fugit aut provident natus omnis doloremque dolorem odit! Voluptatum assumenda, ipsum vel architecto possimus adipisci ipsam. Fugiat hic impedit rem voluptatem expedita architecto fugit.',\n  },\n  {\n    title: 'Item 3',\n    expanded: false,\n    text: 'Lorem ipsum dolor, sit amet consectetur adipisicing elit. Perferendis excepturi incidunt ipsum deleniti labore, tempore non nam doloribus blanditiis veritatis illo autem iure aliquid ullam rem tenetur deserunt velit culpa?',\n  },\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/expansion-panel/expansion-panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<ExpansionPanelComponent>",
                    "defaultValue": "(\n  args: ExpansionPanelComponent\n) => {\n  return {\n    component: ExpansionPanelComponent,\n    template: `\n      <cdk-accordion>\n        <ui-expansion-panel \n          *ngFor=\"let panel of panelOptions; let i = index;\" \n          [disabled]=\"${args.disabled}\" \n          [displayIcon]=\"${args.displayIcon}\" \n          [expanded]=\"panel.expanded\"\n          [index]=\"i\"\n          (closePanel)=\"onClose()\"\n        >\n          <ng-container ngProjectAs=\"title\">\n            {{panel.title}}\n          </ng-container>\n          <p class=\"mb-2 text-gray-500\">{{panel.text}}</p>\n        </ui-expansion-panel>\n      </cdk-accordion>\n    `,\n    props: {\n      ...args,\n      panelOptions,\n      onClose,\n    },\n  };\n}",
                    "rawdescription": "Template expansion panel group",
                    "description": "<p>Template expansion panel group</p>\n"
                },
                {
                    "name": "TemplateMulti",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/expansion-panel/expansion-panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<ExpansionPanelComponent>",
                    "defaultValue": "(\n  args: ExpansionPanelComponent\n) => {\n  args.displayIcon = true;\n  return {\n    component: ExpansionPanelComponent,\n    template: `\n      <cdk-accordion [multi]=\"true\">\n        <ui-expansion-panel \n          *ngFor=\"let panel of panelOptions; let i = index;\" \n          [disabled]=\"${args.disabled}\" \n          [displayIcon]=\"${args.displayIcon}\" \n          [expanded]=\"panel.expanded\"\n          [index]=\"i\"\n          (closePanel)=\"onClose()\"\n        >\n          <ng-container ngProjectAs=\"title\">\n            {{panel.title}}\n          </ng-container>\n          <p class=\"mb-2 text-gray-500\" >{{panel.text}}</p>\n        </ui-expansion-panel>\n      </cdk-accordion>\n    `,\n    props: {\n      ...args,\n      panelOptions,\n      onClose,\n    },\n  };\n}",
                    "rawdescription": "Template multi expansion panel group",
                    "description": "<p>Template multi expansion panel group</p>\n"
                },
                {
                    "name": "TogglePanel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/expansion-panel/expansion-panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Toggle expansion panel",
                    "description": "<p>Toggle expansion panel</p>\n"
                }
            ],
            "libs/ui/src/lib/sidenav/sidenav.stories.ts": [
                {
                    "name": "OverlaySidenav",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/sidenav/sidenav.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "OverlaySidenavTemplate.bind({})",
                    "rawdescription": "Sidenav sidenav",
                    "description": "<p>Sidenav sidenav</p>\n"
                },
                {
                    "name": "OverlaySidenavTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/sidenav/sidenav.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<SidenavContainerComponent>",
                    "defaultValue": "(\n  args: SidenavContainerComponent\n) => {\n  args.showSidenav = [true];\n  return {\n    component: SidenavContainerComponent,\n    template: `\n      <ui-sidenav-container>\n        <ng-container ngProjectAs=\"content\">\n        <div class=\"flex flex-col\">\n        <ui-button class=\"mx-auto\" (click)=\"nav.toggle()\">Toggle sidenav</ui-button>\n          <p class=\"mt-3 mx-auto\">Main content</p>\n          </div>\n        </ng-container>\n        <div\n          uiSidenavDirective\n          #nav=\"uiSidenavDirective\"\n          [(opened)]=\"showSidenav\"\n          [mode]=\"'over'\"\n          ngProjectAs=\"sidenavContent\"\n        >\n          <div *ngFor=\"let i of [].constructor(25)\">Sidenav Content</div>\n        </div>\n      </ui-sidenav-container>\n    `,\n    props: {\n      ...args,\n    },\n  };\n}",
                    "rawdescription": "Overlay sidenav template",
                    "description": "<p>Overlay sidenav template</p>\n"
                },
                {
                    "name": "PushSidenav",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/sidenav/sidenav.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "PushSidenavTemplate.bind({})",
                    "rawdescription": "Sidenav sidenav",
                    "description": "<p>Sidenav sidenav</p>\n"
                },
                {
                    "name": "PushSidenavTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/sidenav/sidenav.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<SidenavContainerComponent>",
                    "defaultValue": "(\n  args: SidenavContainerComponent\n) => {\n  args.showSidenav = [true];\n  return {\n    component: SidenavContainerComponent,\n    template: `\n      <ui-sidenav-container>\n        <ng-container ngProjectAs=\"content\">\n        <ui-button (click)=\"nav.toggle()\">Toggle sidenav</ui-button>\n          <p class=\"mt-3\">Main content</p>\n        </ng-container>\n        <div\n          uiSidenavDirective\n          #nav=\"uiSidenavDirective\"\n          [(opened)]=\"showSidenav\"\n          ngProjectAs=\"sidenavContent\"\n        >\n          <div *ngFor=\"let i of [].constructor(25)\">Sidenav Content</div>\n        </div>\n      </ui-sidenav-container>\n    `,\n    props: {\n      ...args,\n    },\n  };\n}",
                    "rawdescription": "Push sidenav template",
                    "description": "<p>Push sidenav template</p>\n"
                }
            ],
            "libs/ui/src/lib/snackbar/snackbar.stories.ts": [
                {
                    "name": "Snackbar",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/snackbar/snackbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "LaunchSnackbarComponent",
                    "description": "<p>LaunchSnackbarComponent</p>\n"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/snackbar/snackbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<LaunchSnackbarComponent>",
                    "defaultValue": "(\n  args: LaunchSnackbarComponent\n) => ({\n  props: args,\n})",
                    "rawdescription": "Template LaunchSnackbarComponent",
                    "description": "<p>Template LaunchSnackbarComponent</p>\n"
                }
            ]
        },
        "groupedFunctions": {
            "libs/ui/src/lib/cron-editor/cron-editor.component.ts": [
                {
                    "name": "parseCronNumberToken",
                    "file": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Parse CronNumber to token</p>\n",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "CronToken",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1569,
                                "end": 1572,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "val"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1563,
                                "end": 1568,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>value</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1583,
                                "end": 1590,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>obj</p>\n"
                        }
                    ]
                },
                {
                    "name": "range",
                    "file": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>generate numbers in some range</p>\n",
                    "args": [
                        {
                            "name": "start",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "end",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1862,
                                "end": 1867,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "start"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1856,
                                "end": 1861,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>start range</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1890,
                                "end": 1893,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "end"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1884,
                                "end": 1889,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>end range</p>\n"
                        }
                    ]
                }
            ],
            "libs/ui/src/lib/cron-editor/time-picker/time-picker.component.ts": [
                {
                    "name": "range",
                    "file": "libs/ui/src/lib/cron-editor/time-picker/time-picker.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>generate numbers in some range</p>\n",
                    "args": [
                        {
                            "name": "start",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "end",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 321,
                                "end": 326,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "start"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 315,
                                "end": 320,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>start range</p>\n"
                        },
                        {
                            "name": {
                                "pos": 349,
                                "end": 352,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "end"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 343,
                                "end": 348,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>end range</p>\n"
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "libs/ui/src/lib/cron-editor/cron-editor.component.ts": [
                {
                    "name": "CronType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"minutely\" | \"hourly\" | \"daily\" | \"weekly\" | \"monthly\" | \"yearly\" | \"unknown\"",
                    "file": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 189
                }
            ],
            "libs/ui/src/lib/avatar-group/avatar-group.stories.ts": [
                {
                    "name": "MockedAvatar",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "libs/ui/src/lib/avatar-group/avatar-group.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "StoryType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "libs/ui/src/lib/avatar-group/avatar-group.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                }
            ],
            "libs/ui/src/lib/table/table.stories.ts": [
                {
                    "name": "MockedTable",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "libs/ui/src/lib/table/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "libs/ui/src/lib/expansion-panel/expansion-panel.stories.ts": [
                {
                    "name": "PanelOption",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "libs/ui/src/lib/expansion-panel/expansion-panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "libs/ui/src/lib/radio/radio.stories.ts": [
                {
                    "name": "RadioOption",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "libs/ui/src/lib/radio/radio.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "libs/ui/src/lib/alert/alert.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "libs/ui/src/lib/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                }
            ],
            "libs/ui/src/lib/button/button.stories.ts": [
                {
                    "name": "StoryType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "libs/ui/src/lib/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 96,
        "status": "very-good",
        "files": [
            {
                "filePath": "libs/ui/src/lib/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertComponent",
                "coveragePercent": 90,
                "coverageCount": "9/10",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/autocomplete/autocomplete.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AutocompleteComponent",
                "coveragePercent": 100,
                "coverageCount": "4/4",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "closesAutocompletePanel",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FormAutocomplete",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formControl",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FormControlTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GROUPED_OPTIONS",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GroupedAutocompletePanel",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GroupedAutocompletePanelTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "openedAutocompletePanel",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectedOption",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SIMPLE_OPTIONS",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SimpleAutocompletePanel",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/autocomplete/autocomplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SimpleAutocompletePanelTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/autocomplete/components/option.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OptionComponent",
                "coveragePercent": 100,
                "coverageCount": "7/7",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/avatar-group/avatar-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AvatarGroupComponent",
                "coveragePercent": 87,
                "coverageCount": "7/8",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/avatar-group/avatar-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "avatars",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/avatar-group/avatar-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/avatar/avatar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AvatarComponent",
                "coveragePercent": 100,
                "coverageCount": "6/6",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/avatar/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Defaut",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/avatar/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryCircleAvatarLarge",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/avatar/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryCircleAvatarMedium",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/avatar/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryCircleAvatarSmall",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/avatar/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryCircleImageAvatarLarge",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/avatar/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryRectangleAvatarLarge",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/avatar/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryRectangleAvatarMedium",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/avatar/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryRectangleAvatarSmall",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/avatar/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryRectangleImageAvatarLarge",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/avatar/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SecondaryCircleAvatarLarge",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/avatar/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SecondaryRectangleAvatarLarge",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/avatar/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TertiaryCircleAvatarLarge",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/avatar/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TertiaryRectangleAvatarLarge",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/breadcrumbs/breadcrumbs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbsComponent",
                "coveragePercent": 92,
                "coverageCount": "13/14",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/breadcrumbs/breadcrumbs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Contained",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/breadcrumbs/breadcrumbs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Full",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/breadcrumbs/breadcrumbs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SimpleChevron",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/breadcrumbs/breadcrumbs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SimpleSlash",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 100,
                "coverageCount": "12/12",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "allButtons",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllButtonsTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "configurations",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "individualBtnArgs",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primaryButton",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "secondaryButton",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Tertiary",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tertiaryButton",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "testClick",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VariantsList",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 100,
                "coverageCount": "15/15",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/checkbox/checkbox.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CONTROL_VALUE_ACCESSOR",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FormCheckbox",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FormControlTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/chip/chip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChipComponent",
                "coveragePercent": 88,
                "coverageCount": "8/9",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addChipsFromInput",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ChipsInputTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ChipVariants",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ChipVariantsTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ChipWithInput",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formControl",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "removeStatus",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "separatorKeysCodes",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "statuses",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CronEditorComponent",
                "coveragePercent": 97,
                "coverageCount": "47/48",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CronToken",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "parseCronNumberToken",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "range",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dailyExp",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dailyWeekdayExp",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "hourlyExp",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "minutesExp",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "monthlyExpo",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "monthlyWeekdayExpo",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "weeklyExp",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "yearlyExp",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/cron-editor/cron-editor.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "yearlyMonthWeekExp",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/cron-editor/cron-editor.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "cronEditor",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/cron-editor/time-picker/time-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimePickerComponent",
                "coveragePercent": 92,
                "coverageCount": "12/13",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/cron-editor/time-picker/time-picker.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TimePickerModel",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "libs/ui/src/lib/cron-editor/time-picker/time-picker.component.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "range",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/date/date-picker/date-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatePickerComponent",
                "coveragePercent": 100,
                "coverageCount": "7/7",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/date/date-picker/date-picker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BottomDatePicker",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/date/date-picker/date-picker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BottomDatePickerTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/date/date-picker/date-picker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DatePicker",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/date/date-picker/date-picker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DatePickerTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/date/date-picker/date-picker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formControl",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/date/date-range/date-range.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DateRangeComponent",
                "coveragePercent": 100,
                "coverageCount": "7/7",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/date/date-range/date-range.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "afterTomorrow",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/date/date-range/date-range.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BottomDateRange",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/date/date-range/date-range.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BottomDateRangeTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/date/date-range/date-range.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DateRange",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/date/date-range/date-range.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DateRangeTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/date/date-range/date-range.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formControlEnd",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/date/date-range/date-range.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formControlStart",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/date/date-range/date-range.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "today",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/dialog/dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogComponent",
                "coveragePercent": 84,
                "coverageCount": "11/13",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/dialog/dialog.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditDialogComponent",
                "coveragePercent": 100,
                "coverageCount": "4/4",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/dialog/dialog.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "LaunchDialogComponent",
                "coveragePercent": 85,
                "coverageCount": "6/7",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/dialog/dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/dialog/dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/divider/divider.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DividerComponent",
                "coveragePercent": 100,
                "coverageCount": "4/4",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/divider/divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Horizontal",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/divider/divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Vertical",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/expansion-panel/expansion-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExpansionPanelComponent",
                "coveragePercent": 85,
                "coverageCount": "12/14",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/expansion-panel/expansion-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultiPanel",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/expansion-panel/expansion-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onClose",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/expansion-panel/expansion-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "panelOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui/src/lib/expansion-panel/expansion-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/expansion-panel/expansion-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateMulti",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/expansion-panel/expansion-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TogglePanel",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/fixed-wrapper/fixed-wrapper.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FixedWrapperComponent",
                "coveragePercent": 60,
                "coverageCount": "3/5",
                "status": "good"
            },
            {
                "filePath": "libs/ui/src/lib/form-wrapper/form-control/form-control.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormControlComponent",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formControl",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "options",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OutlineFalse",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OutlineFalseAutocomplete",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OutlineFalseSelect",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OutlineTrue",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OutlineTrueAutocomplete",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OutlineTrueSelect",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateAutocomplete",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateSelect",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/form-wrapper/form-wrapper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "toggleDisabled",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/graphql-select/graphql-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GraphQLSelectComponent",
                "coveragePercent": 94,
                "coverageCount": "56/59",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/graphql-select/graphql-select.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ITEMS_PER_RELOAD",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 90,
                "coverageCount": "9/10",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/icon/icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllIconsTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/icon/icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/icon/icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconList",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/icon/icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuComponent",
                "coveragePercent": 100,
                "coverageCount": "3/3",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/menu/menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "clickEvent",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/menu/menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LeftBottomCornerMenu",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/menu/menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LeftBottomCornerMenuTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/menu/menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LeftTopCornerMenu",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/menu/menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LeftTopCornerMenuTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/menu/menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "menuItemsTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/menu/menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RightBottomCornerMenu",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/menu/menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RightBottomCornerMenuTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/menu/menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RightTopCornerMenu",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/menu/menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RightTopCornerMenuTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/paginator/paginator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginatorComponent",
                "coveragePercent": 86,
                "coverageCount": "20/23",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/paginator/paginator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "itemsArray",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/paginator/paginator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pageChange",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/paginator/paginator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pagedItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui/src/lib/paginator/paginator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Paginator",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/paginator/paginator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/radio/radio.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadioComponent",
                "coveragePercent": 100,
                "coverageCount": "8/8",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/radio/radio.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formControl",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/radio/radio.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FormControlTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/radio/radio.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FormRadio",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/radio/radio.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getRadioChangeSelection",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/radio/radio.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/radio/radio.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "radioOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui/src/lib/radio/radio.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectedOption",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui/src/lib/radio/radio.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/components/select-option.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectOptionComponent",
                "coveragePercent": 91,
                "coverageCount": "11/12",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectMenuComponent",
                "coveragePercent": 93,
                "coverageCount": "46/49",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "closeEvent",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customTriggerSelect",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customTriggerSelectTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DisabledSelection",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formControlSelectTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formGroup",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultiSelection",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "openEvent",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "options",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectEvent",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMenuTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "singleSelectMenuTemplateWithTrigger",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "StandaloneSelection",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "StandaloneSelectionDefaultValue",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateDisabledSelection",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateMultiSelection",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateMultiSelectionFilterable",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateRefSelection",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateStandaloneSelection",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateStandaloneSelectionDefaultValue",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateStandaloneSelectionFilterable",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateTemplateRefSelection",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/sidenav/sidenav-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidenavContainerComponent",
                "coveragePercent": 91,
                "coverageCount": "21/23",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/sidenav/sidenav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OverlaySidenav",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/sidenav/sidenav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OverlaySidenavTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/sidenav/sidenav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PushSidenav",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/sidenav/sidenav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PushSidenavTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/slider/slider.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SliderComponent",
                "coveragePercent": 92,
                "coverageCount": "24/26",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/slider/slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formGroup",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/slider/slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Slider",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/slider/slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sliderTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/slider/slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/snackbar/snackbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SnackbarComponent",
                "coveragePercent": 95,
                "coverageCount": "20/21",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/snackbar/snackbar.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomSnackbarComponent",
                "coveragePercent": 100,
                "coverageCount": "4/4",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/snackbar/snackbar.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "LaunchSnackbarComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/snackbar/snackbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Snackbar",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/snackbar/snackbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/spinner/spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpinnerComponent",
                "coveragePercent": 100,
                "coverageCount": "4/4",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/spinner/spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/spinner/spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "largeSpinner",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/spinner/spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Medium",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/spinner/spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mediumSpinner",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/spinner/spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/spinner/spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "smallSpinner",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/spinner/spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/table/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "columnDefinitionArray",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/table/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sortTableByKey",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/table/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Table",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/table/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tableData",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/table/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/tabs/components/tab/tab.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabComponent",
                "coveragePercent": 87,
                "coverageCount": "14/16",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/tabs/tabs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabsComponent",
                "coveragePercent": 85,
                "coverageCount": "18/21",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/tabs/tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/tabs/tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Vertical",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/textarea/textarea.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextareaComponent",
                "coveragePercent": 100,
                "coverageCount": "19/19",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/textarea/textarea.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CONTROL_VALUE_ACCESSOR",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/textarea/textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FormControlTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/textarea/textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FormTextarea",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/textarea/textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "KendoFocusTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/textarea/textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "KendoFocusTextarea",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/textarea/textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/textarea/textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/toggle/toggle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToggleComponent",
                "coveragePercent": 100,
                "coverageCount": "15/15",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/toggle/toggle.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CONTROL_VALUE_ACCESSOR",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/toggle/toggle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FormControlTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/toggle/toggle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FormToggle",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/toggle/toggle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/toggle/toggle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/tooltip/tooltip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TooltipComponent",
                "coveragePercent": 100,
                "coverageCount": "2/2",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/tooltip/tooltip.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "TooltipDummyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/ui/src/lib/tooltip/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BottomExample",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/tooltip/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LeftExample",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/tooltip/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LongTextExample",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/tooltip/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RightExample",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/tooltip/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/tooltip/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TopExample",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            }
        ]
    }
}