name: Front-end CD

on:
  repository_dispatch:
    types: [CD]

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    environment: ${{ github.event.client_payload.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.ref }}

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install Dependencies
        run: npm install

  build:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: setup
    environment: ${{ github.event.client_payload.environment }}
    strategy:
      matrix:
        app: [back-office, front-office]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.ref }}
      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - name: Get package version
        id: get_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      - name: Build ${{ matrix.app }} ${{ github.event.client_payload.environment }} - ${{ steps.get_version.outputs.version }}
        run: npx nx run ${{ matrix.app }}:build:${{ secrets.CONFIG }}
      - name: Archive build ${{ matrix.app }}
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.app }}_${{ github.event.client_payload.environment }}
          path: dist/apps/${{ matrix.app }}

  create_deployment:
    name: Create Deployment
    runs-on: ubuntu-latest
    environment: ${{ github.event.client_payload.environment }}
    needs: build

    permissions:
      deployments: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: chrnorm/deployment-action@v2
        name: Create GitHub deployment
        id: deployment
        with:
          token: '${{ github.token }}'
          environment-url: ${{ secrets.FRONT_END_URL }}
          environment: ${{ secrets.ENVIRONMENT }}

  deploy:
    name: Deploy Back-office and Front-office ðŸš€
    runs-on: ubuntu-latest
    environment: ${{ github.event.client_payload.environment }}
    needs: create_deployment
    strategy:
      matrix:
        include:
          - app: back-office
            path: BO_REMOTE_PATH
          - app: front-office
            path: FO_REMOTE_PATH

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.app }}_${{ github.event.client_payload.environment }}
          path: dist/apps/${{ matrix.app }}

      - name: Setup SSH Keys and known_hosts
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy ${{ matrix.app }}
        run: ./CI/deploy.sh
        env:
          SSH_PASS: ${{ secrets.SSH_PASS }}
          CONNECTION: ${{ secrets.CONNECTION }}
          REMOTE_PATH: ${{ secrets[matrix.path] }}
          OUT: dist/apps/${{ matrix.app }}

  update_deployment_status:
    name: Update Deployment Status âœ…
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Update deployment status (success)
        if: ${{ needs.deploy.result == 'success' }}
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          environment-url: ${{ needs.create_deployment.outputs.environment_url }}
          deployment-id: ${{ needs.create_deployment.outputs.deployment_id }}
          state: 'success'

      - name: Update deployment status (failure)
        if: ${{ needs.deploy.result != 'success' }}
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          environment-url: ${{ needs.create_deployment.outputs.environment_url }}
          deployment-id: ${{ needs.create_deployment.outputs.deployment_id }}
          state: 'failure'
