{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "CustomSnackbarComponent",
            "id": "component-CustomSnackbarComponent-fea2edf68f07a4281593991c34507fae28b5d2010f589ba7c466229c2dd6caaeabfc5f228096c89c3c4d867fdcdf61819061e900694eb22974d4966ca3b93039",
            "file": "libs/ui/src/lib/snackbar/snackbar.component.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-custom-snackbar",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"flex\">\n  <span class=\"pr-2\">{{ data.message }}</span>\n  <ui-spinner size=\"medium\" *ngIf=\"data.loading\"></ui-spinner>\n  <ng-container *ngIf=\"!data.loading\">\n    <ui-icon\n      class=\"h-6\"\n      *ngIf=\"!data.error\"\n      [icon]=\"check\"\n      variant=\"success\"\n    ></ui-icon>\n    <ui-icon\n      class=\"h-6\"\n      *ngIf=\"data.error\"\n      [icon]=\"error\"\n      variant=\"danger\"\n    ></ui-icon>\n  </ng-container>\n  <div></div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnackBarData",
                    "optional": false,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "dataToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<SnackBarData>",
                    "optional": false,
                    "description": "Injected snackbar data",
                    "line": 111,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "SNACKBAR_DATA"
                        }
                    ],
                    "modifierKind": [
                        167,
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "IconModule",
                    "type": "module"
                },
                {
                    "name": "SpinnerModule",
                    "type": "module"
                }
            ],
            "description": "<p>EditDialog component.</p>\n",
            "rawdescription": "\n\nEditDialog component.\n",
            "type": "component",
            "sourceCode": "import { moduleMetadata, Story, Meta } from '@storybook/angular';\nimport { SnackbarModule } from './snackbar.module';\nimport { CommonModule } from '@angular/common';\nimport { Component, Inject, Input, OnDestroy } from '@angular/core';\nimport { BehaviorSubject, Subject, takeUntil } from 'rxjs';\nimport { SNACKBAR_DATA, SnackBarData } from './snackbar.token';\nimport { SnackbarService } from './snackbar.service';\nimport { IconModule } from '../icon/icon.module';\nimport { SpinnerModule } from '../spinner/spinner.module';\nimport { StorybookTranslateModule } from '../../storybook-translate.module';\n\n/**\n * LaunchSnackbarComponent component.\n */\n@Component({\n  selector: 'ui-snackbar-launcher',\n  template: `\n    <button\n      type=\"button\"\n      class=\"rounded-md bg-indigo-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n      (click)=\"openSnackBar()\"\n    >\n      {{ default ? 'Open default snackbar' : 'Open custom snackbar' }}\n    </button>\n  `,\n})\nclass LaunchSnackbarComponent implements OnDestroy {\n  @Input() default = true;\n\n  destroy$ = new Subject<void>();\n  /**\n   * Constructor for the launch Snackbar component\n   *\n   * @param snackBar SnackbarService service\n   */\n  constructor(private snackBar: SnackbarService) {}\n\n  /**\n   * open Snackbar.\n   */\n  openSnackBar(): void {\n    if (this.default) {\n      this.snackBar.openSnackBar('Processing failed', {\n        duration: 5000,\n        error: true,\n      });\n    } else {\n      const snackbarRef = this.snackBar.openComponentSnackBar(\n        CustomSnackbarComponent,\n        {\n          duration: 0,\n          action: 'Reload',\n          data: {\n            message: 'Processing',\n            loading: true,\n          },\n        }\n      );\n      snackbarRef.instance.actionComplete\n        .pipe(takeUntil(this.destroy$))\n        .subscribe({\n          next: () => window.alert('Action complete!!'),\n        });\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n\n/**\n * EditDialog component.\n */\n@Component({\n  standalone: true,\n  imports: [CommonModule, IconModule, SpinnerModule],\n  selector: 'ui-custom-snackbar',\n  template: `\n    <div class=\"flex\">\n      <span class=\"pr-2\">{{ data.message }}</span>\n      <ui-spinner size=\"medium\" *ngIf=\"data.loading\"></ui-spinner>\n      <ng-container *ngIf=\"!data.loading\">\n        <ui-icon\n          class=\"h-6\"\n          *ngIf=\"!data.error\"\n          [icon]=\"check\"\n          variant=\"success\"\n        ></ui-icon>\n        <ui-icon\n          class=\"h-6\"\n          *ngIf=\"data.error\"\n          [icon]=\"error\"\n          variant=\"danger\"\n        ></ui-icon>\n      </ng-container>\n      <div></div>\n    </div>\n  `,\n})\nclass CustomSnackbarComponent {\n  data: SnackBarData;\n  /**\n   * Snackbar child component\n   *\n   * @param dataToken Injected snackbar data\n   */\n  constructor(\n    @Inject(SNACKBAR_DATA)\n    public dataToken: BehaviorSubject<SnackBarData>\n  ) {\n    this.data = dataToken.getValue();\n  }\n}\n\nexport default {\n  title: 'Snackbar',\n  component: LaunchSnackbarComponent,\n  decorators: [\n    moduleMetadata({\n      declarations: [LaunchSnackbarComponent],\n      imports: [CommonModule, SnackbarModule, StorybookTranslateModule],\n      providers: [SnackbarService],\n    }),\n  ],\n  argTypes: {\n    default: {\n      type: 'boolean',\n    },\n  },\n} as Meta;\n\n/**\n * Template LaunchSnackbarComponent\n *\n * @param {LaunchSnackbarComponent} args args\n * @returns LaunchSnackbarComponent\n */\nconst Template: Story<LaunchSnackbarComponent> = (\n  args: LaunchSnackbarComponent\n) => ({\n  props: args,\n});\n\n/** LaunchSnackbarComponent */\nexport const Snackbar = Template.bind({});\nSnackbar.args = {\n  default: true,\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Snackbar child component</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dataToken",
                        "type": "BehaviorSubject<SnackBarData>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 103,
                "rawdescription": "\n\nSnackbar child component\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 2922,
                            "end": 2931,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "dataToken"
                        },
                        "type": "BehaviorSubject<SnackBarData>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2916,
                            "end": 2921,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Injected snackbar data</p>\n"
                    }
                ]
            }
        },
        {
            "name": "EditDialogComponent",
            "id": "component-EditDialogComponent-57f144615a0af16d8b1e87e0ad36b9f902ea23bbe1aad71ce008521eaa5ed165048a58d5189993637b81dca802fbad1a331b298d15c3d137cad901e71fb52668",
            "file": "libs/ui/src/lib/dialog/dialog.component.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-edit-dialog",
            "styleUrls": [],
            "styles": [],
            "template": "<ui-dialog [size]=\"data.size\">\n  <ng-container ngProjectAs=\"header\">\n    <div\n      class=\"mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-green-100\"\n    >\n      <svg\n        class=\"h-6 w-6 text-green-600\"\n        fill=\"none\"\n        viewBox=\"0 0 24 24\"\n        stroke-width=\"1.5\"\n        stroke=\"currentColor\"\n        aria-hidden=\"true\"\n      >\n        <path\n          stroke-linecap=\"round\"\n          stroke-linejoin=\"round\"\n          d=\"M4.5 12.75l6 6 9-13.5\"\n        />\n      </svg>\n    </div>\n  </ng-container>\n  <ng-container ngProjectAs=\"content\">\n    <div class=\"flex flex-col h-full\">\n      <div class=\"my-auto text-center\">\n        <h3\n          class=\"text-base font-semibold leading-6 text-gray-900\"\n          id=\"modal-title\"\n        >\n          Payment successful\n        </h3>\n        <div class=\"mt-2\">\n          <p class=\"text-sm text-gray-500\">\n            Lorem ipsum dolor sit amet consectetur adipisicing elit.\n            Consequatur amet labore.\n          </p>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n  <ng-container ngProjectAs=\"actions\">\n    <br />\n    <button\n      type=\"button\"\n      class=\"inline-flex w-full justify-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n      [uiDialogClose]=\"data.animal\"\n    >\n      Go back\n    </button>\n  </ng-container>\n</ui-dialog>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "Injected dialog data",
                    "line": 129,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        167,
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogRef<EditDialogComponent>",
                    "optional": false,
                    "description": "Dialog ref",
                    "line": 127,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "DialogModule",
                    "type": "module"
                }
            ],
            "description": "<p>EditDialog component.</p>\n",
            "rawdescription": "\n\nEditDialog component.\n",
            "type": "component",
            "sourceCode": "import { moduleMetadata, Story, Meta } from '@storybook/angular';\nimport { Dialog, DIALOG_DATA } from '@angular/cdk/dialog';\nimport { DialogModule } from './dialog.module';\nimport { CommonModule } from '@angular/common';\nimport { Component, Input, Inject, OnDestroy } from '@angular/core';\nimport { DialogRef } from '@angular/cdk/dialog';\nimport { Subject, takeUntil } from 'rxjs';\nimport { DialogSize, dialogSizes } from './types/dialog-size';\n\n/**\n * LaunchDialog component.\n */\n@Component({\n  selector: 'ui-dialog-launcher',\n  template: `\n    <button\n      type=\"button\"\n      class=\"rounded-md bg-indigo-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n      (click)=\"openDialog()\"\n    >\n      Open dialog\n    </button>\n  `,\n})\nclass LaunchDialogComponent implements OnDestroy {\n  @Input() animal = '';\n  @Input() size: DialogSize = 'medium';\n  private destroy$ = new Subject<void>();\n  /**\n   * Constructor for the launchDialog component\n   *\n   * @param _dialog Dialog service\n   */\n  constructor(private _dialog: Dialog) {}\n\n  /**\n   * open Dialog.\n   */\n  openDialog(): void {\n    const dialogRef: any = this._dialog.open(EditDialogComponent, {\n      data: {\n        animal: this.animal,\n        size: this.size,\n      },\n    });\n    dialogRef.closed.pipe(takeUntil(this.destroy$)).subscribe((result: any) => {\n      console.log(`Dialog result: ${result}`);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n\n/**\n * EditDialog component.\n */\n@Component({\n  standalone: true,\n  imports: [CommonModule, DialogModule],\n  selector: 'ui-edit-dialog',\n  template: `\n    <ui-dialog [size]=\"data.size\">\n      <ng-container ngProjectAs=\"header\">\n        <div\n          class=\"mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-green-100\"\n        >\n          <svg\n            class=\"h-6 w-6 text-green-600\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke-width=\"1.5\"\n            stroke=\"currentColor\"\n            aria-hidden=\"true\"\n          >\n            <path\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              d=\"M4.5 12.75l6 6 9-13.5\"\n            />\n          </svg>\n        </div>\n      </ng-container>\n      <ng-container ngProjectAs=\"content\">\n        <div class=\"flex flex-col h-full\">\n          <div class=\"my-auto text-center\">\n            <h3\n              class=\"text-base font-semibold leading-6 text-gray-900\"\n              id=\"modal-title\"\n            >\n              Payment successful\n            </h3>\n            <div class=\"mt-2\">\n              <p class=\"text-sm text-gray-500\">\n                Lorem ipsum dolor sit amet consectetur adipisicing elit.\n                Consequatur amet labore.\n              </p>\n            </div>\n          </div>\n        </div>\n      </ng-container>\n      <ng-container ngProjectAs=\"actions\">\n        <br />\n        <button\n          type=\"button\"\n          class=\"inline-flex w-full justify-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n          [uiDialogClose]=\"data.animal\"\n        >\n          Go back\n        </button>\n      </ng-container>\n    </ui-dialog>\n  `,\n})\nclass EditDialogComponent {\n  /**\n   * Edit Dialog component\n   *\n   * @param dialogRef Dialog ref\n   * @param data Injected dialog data\n   * @param data.animal animal data\n   * @param data.size size data\n   */\n  constructor(\n    public dialogRef: DialogRef<EditDialogComponent>,\n    @Inject(DIALOG_DATA)\n    public data: {\n      animal: string;\n      size: DialogSize;\n    }\n  ) {}\n}\n\nexport default {\n  title: 'Dialog',\n  component: LaunchDialogComponent,\n  decorators: [\n    moduleMetadata({\n      declarations: [LaunchDialogComponent],\n      imports: [CommonModule, DialogModule],\n    }),\n  ],\n  argTypes: {\n    size: {\n      options: dialogSizes,\n      control: {\n        type: 'select',\n      },\n    },\n  },\n} as Meta;\n\n/**\n * Template launchDialog\n *\n * @param {LaunchDialogComponent} args args\n * @returns LaunchDialogComponent\n */\nconst Template: Story<LaunchDialogComponent> = (\n  args: LaunchDialogComponent\n) => ({\n  props: args,\n});\n\n/** Primary launchDialog */\nexport const Default = Template.bind({});\nDefault.args = {\n  animal: 'panda',\n  size: 'small',\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Edit Dialog component</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "DialogRef<EditDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 117,
                "rawdescription": "\n\nEdit Dialog component\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 3545,
                            "end": 3554,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "dialogRef"
                        },
                        "type": "DialogRef<EditDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3539,
                            "end": 3544,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Dialog ref</p>\n"
                    },
                    {
                        "name": {
                            "pos": 3578,
                            "end": 3582,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "data"
                        },
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3572,
                            "end": 3577,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Injected dialog data</p>\n"
                    }
                ]
            }
        },
        {
            "name": "LaunchDialogComponent",
            "id": "component-LaunchDialogComponent-57f144615a0af16d8b1e87e0ad36b9f902ea23bbe1aad71ce008521eaa5ed165048a58d5189993637b81dca802fbad1a331b298d15c3d137cad901e71fb52668",
            "file": "libs/ui/src/lib/dialog/dialog.component.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-dialog-launcher",
            "styleUrls": [],
            "styles": [],
            "template": "<button\n  type=\"button\"\n  class=\"rounded-md bg-indigo-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n  (click)=\"openDialog()\"\n>\n  Open dialog\n</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "animal",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "DialogSize",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nopen Dialog.\n",
                    "description": "<p>open Dialog.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>LaunchDialog component.</p>\n",
            "rawdescription": "\n\nLaunchDialog component.\n",
            "type": "component",
            "sourceCode": "import { moduleMetadata, Story, Meta } from '@storybook/angular';\nimport { Dialog, DIALOG_DATA } from '@angular/cdk/dialog';\nimport { DialogModule } from './dialog.module';\nimport { CommonModule } from '@angular/common';\nimport { Component, Input, Inject, OnDestroy } from '@angular/core';\nimport { DialogRef } from '@angular/cdk/dialog';\nimport { Subject, takeUntil } from 'rxjs';\nimport { DialogSize, dialogSizes } from './types/dialog-size';\n\n/**\n * LaunchDialog component.\n */\n@Component({\n  selector: 'ui-dialog-launcher',\n  template: `\n    <button\n      type=\"button\"\n      class=\"rounded-md bg-indigo-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n      (click)=\"openDialog()\"\n    >\n      Open dialog\n    </button>\n  `,\n})\nclass LaunchDialogComponent implements OnDestroy {\n  @Input() animal = '';\n  @Input() size: DialogSize = 'medium';\n  private destroy$ = new Subject<void>();\n  /**\n   * Constructor for the launchDialog component\n   *\n   * @param _dialog Dialog service\n   */\n  constructor(private _dialog: Dialog) {}\n\n  /**\n   * open Dialog.\n   */\n  openDialog(): void {\n    const dialogRef: any = this._dialog.open(EditDialogComponent, {\n      data: {\n        animal: this.animal,\n        size: this.size,\n      },\n    });\n    dialogRef.closed.pipe(takeUntil(this.destroy$)).subscribe((result: any) => {\n      console.log(`Dialog result: ${result}`);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n\n/**\n * EditDialog component.\n */\n@Component({\n  standalone: true,\n  imports: [CommonModule, DialogModule],\n  selector: 'ui-edit-dialog',\n  template: `\n    <ui-dialog [size]=\"data.size\">\n      <ng-container ngProjectAs=\"header\">\n        <div\n          class=\"mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-green-100\"\n        >\n          <svg\n            class=\"h-6 w-6 text-green-600\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke-width=\"1.5\"\n            stroke=\"currentColor\"\n            aria-hidden=\"true\"\n          >\n            <path\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              d=\"M4.5 12.75l6 6 9-13.5\"\n            />\n          </svg>\n        </div>\n      </ng-container>\n      <ng-container ngProjectAs=\"content\">\n        <div class=\"flex flex-col h-full\">\n          <div class=\"my-auto text-center\">\n            <h3\n              class=\"text-base font-semibold leading-6 text-gray-900\"\n              id=\"modal-title\"\n            >\n              Payment successful\n            </h3>\n            <div class=\"mt-2\">\n              <p class=\"text-sm text-gray-500\">\n                Lorem ipsum dolor sit amet consectetur adipisicing elit.\n                Consequatur amet labore.\n              </p>\n            </div>\n          </div>\n        </div>\n      </ng-container>\n      <ng-container ngProjectAs=\"actions\">\n        <br />\n        <button\n          type=\"button\"\n          class=\"inline-flex w-full justify-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n          [uiDialogClose]=\"data.animal\"\n        >\n          Go back\n        </button>\n      </ng-container>\n    </ui-dialog>\n  `,\n})\nclass EditDialogComponent {\n  /**\n   * Edit Dialog component\n   *\n   * @param dialogRef Dialog ref\n   * @param data Injected dialog data\n   * @param data.animal animal data\n   * @param data.size size data\n   */\n  constructor(\n    public dialogRef: DialogRef<EditDialogComponent>,\n    @Inject(DIALOG_DATA)\n    public data: {\n      animal: string;\n      size: DialogSize;\n    }\n  ) {}\n}\n\nexport default {\n  title: 'Dialog',\n  component: LaunchDialogComponent,\n  decorators: [\n    moduleMetadata({\n      declarations: [LaunchDialogComponent],\n      imports: [CommonModule, DialogModule],\n    }),\n  ],\n  argTypes: {\n    size: {\n      options: dialogSizes,\n      control: {\n        type: 'select',\n      },\n    },\n  },\n} as Meta;\n\n/**\n * Template launchDialog\n *\n * @param {LaunchDialogComponent} args args\n * @returns LaunchDialogComponent\n */\nconst Template: Story<LaunchDialogComponent> = (\n  args: LaunchDialogComponent\n) => ({\n  props: args,\n});\n\n/** Primary launchDialog */\nexport const Default = Template.bind({});\nDefault.args = {\n  animal: 'panda',\n  size: 'small',\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Constructor for the launchDialog component</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_dialog",
                        "type": "Dialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "rawdescription": "\n\nConstructor for the launchDialog component\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1103,
                            "end": 1110,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "_dialog"
                        },
                        "type": "Dialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1097,
                            "end": 1102,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Dialog service</p>\n"
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ]
        },
        {
            "name": "LaunchSnackbarComponent",
            "id": "component-LaunchSnackbarComponent-fea2edf68f07a4281593991c34507fae28b5d2010f589ba7c466229c2dd6caaeabfc5f228096c89c3c4d867fdcdf61819061e900694eb22974d4966ca3b93039",
            "file": "libs/ui/src/lib/snackbar/snackbar.component.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-snackbar-launcher",
            "styleUrls": [],
            "styles": [],
            "template": "<button\n  type=\"button\"\n  class=\"rounded-md bg-indigo-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n  (click)=\"openSnackBar()\"\n>\n  {{ default ? 'Open default snackbar' : 'Open custom snackbar' }}\n</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "default",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openSnackBar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nopen Snackbar.\n",
                    "description": "<p>open Snackbar.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>LaunchSnackbarComponent component.</p>\n",
            "rawdescription": "\n\nLaunchSnackbarComponent component.\n",
            "type": "component",
            "sourceCode": "import { moduleMetadata, Story, Meta } from '@storybook/angular';\nimport { SnackbarModule } from './snackbar.module';\nimport { CommonModule } from '@angular/common';\nimport { Component, Inject, Input, OnDestroy } from '@angular/core';\nimport { BehaviorSubject, Subject, takeUntil } from 'rxjs';\nimport { SNACKBAR_DATA, SnackBarData } from './snackbar.token';\nimport { SnackbarService } from './snackbar.service';\nimport { IconModule } from '../icon/icon.module';\nimport { SpinnerModule } from '../spinner/spinner.module';\nimport { StorybookTranslateModule } from '../../storybook-translate.module';\n\n/**\n * LaunchSnackbarComponent component.\n */\n@Component({\n  selector: 'ui-snackbar-launcher',\n  template: `\n    <button\n      type=\"button\"\n      class=\"rounded-md bg-indigo-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n      (click)=\"openSnackBar()\"\n    >\n      {{ default ? 'Open default snackbar' : 'Open custom snackbar' }}\n    </button>\n  `,\n})\nclass LaunchSnackbarComponent implements OnDestroy {\n  @Input() default = true;\n\n  destroy$ = new Subject<void>();\n  /**\n   * Constructor for the launch Snackbar component\n   *\n   * @param snackBar SnackbarService service\n   */\n  constructor(private snackBar: SnackbarService) {}\n\n  /**\n   * open Snackbar.\n   */\n  openSnackBar(): void {\n    if (this.default) {\n      this.snackBar.openSnackBar('Processing failed', {\n        duration: 5000,\n        error: true,\n      });\n    } else {\n      const snackbarRef = this.snackBar.openComponentSnackBar(\n        CustomSnackbarComponent,\n        {\n          duration: 0,\n          action: 'Reload',\n          data: {\n            message: 'Processing',\n            loading: true,\n          },\n        }\n      );\n      snackbarRef.instance.actionComplete\n        .pipe(takeUntil(this.destroy$))\n        .subscribe({\n          next: () => window.alert('Action complete!!'),\n        });\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n\n/**\n * EditDialog component.\n */\n@Component({\n  standalone: true,\n  imports: [CommonModule, IconModule, SpinnerModule],\n  selector: 'ui-custom-snackbar',\n  template: `\n    <div class=\"flex\">\n      <span class=\"pr-2\">{{ data.message }}</span>\n      <ui-spinner size=\"medium\" *ngIf=\"data.loading\"></ui-spinner>\n      <ng-container *ngIf=\"!data.loading\">\n        <ui-icon\n          class=\"h-6\"\n          *ngIf=\"!data.error\"\n          [icon]=\"check\"\n          variant=\"success\"\n        ></ui-icon>\n        <ui-icon\n          class=\"h-6\"\n          *ngIf=\"data.error\"\n          [icon]=\"error\"\n          variant=\"danger\"\n        ></ui-icon>\n      </ng-container>\n      <div></div>\n    </div>\n  `,\n})\nclass CustomSnackbarComponent {\n  data: SnackBarData;\n  /**\n   * Snackbar child component\n   *\n   * @param dataToken Injected snackbar data\n   */\n  constructor(\n    @Inject(SNACKBAR_DATA)\n    public dataToken: BehaviorSubject<SnackBarData>\n  ) {\n    this.data = dataToken.getValue();\n  }\n}\n\nexport default {\n  title: 'Snackbar',\n  component: LaunchSnackbarComponent,\n  decorators: [\n    moduleMetadata({\n      declarations: [LaunchSnackbarComponent],\n      imports: [CommonModule, SnackbarModule, StorybookTranslateModule],\n      providers: [SnackbarService],\n    }),\n  ],\n  argTypes: {\n    default: {\n      type: 'boolean',\n    },\n  },\n} as Meta;\n\n/**\n * Template LaunchSnackbarComponent\n *\n * @param {LaunchSnackbarComponent} args args\n * @returns LaunchSnackbarComponent\n */\nconst Template: Story<LaunchSnackbarComponent> = (\n  args: LaunchSnackbarComponent\n) => ({\n  props: args,\n});\n\n/** LaunchSnackbarComponent */\nexport const Snackbar = Template.bind({});\nSnackbar.args = {\n  default: true,\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Constructor for the launch Snackbar component</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snackBar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "rawdescription": "\n\nConstructor for the launch Snackbar component\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1286,
                            "end": 1294,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "snackBar"
                        },
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1280,
                            "end": 1285,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>SnackbarService service</p>\n"
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ]
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "addChipsFromInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/chip/chip.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(chips: string[] | string) => {\n  if (chips instanceof Array) {\n    statuses = statuses.concat([...chips]);\n  } else {\n    statuses.push(chips);\n  }\n  formControl.setValue(statuses);\n}",
                "rawdescription": "Callback to test the chip input directive change event",
                "description": "<p>Callback to test the chip input directive change event</p>\n"
            },
            {
                "name": "afterTomorrow",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/date/date-range/date-range.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Date()",
                "rawdescription": "After tomorrow date",
                "description": "<p>After tomorrow date</p>\n"
            },
            {
                "name": "allButtons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  size: 'medium',\n}",
                "rawdescription": "Tertiary button",
                "description": "<p>Tertiary button</p>\n"
            },
            {
                "name": "AllButtonsTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<StoryType>",
                "defaultValue": "(args: StoryType) => {\n  return {\n    template: `\n      <h1 class=\"text-lg mb-4\">Grouped by variant</h1>\n      <div class=\"flex flex-wrap gap-4\">\n        <div class=\"border rounded-lg\" *ngFor=\"let variant of configurations\">\n          <h2 class=\"w-full text-center border-b py-2\">{{variant.title}}</h2>\n          <div class=\"flex gap-2 p-4\">\n            <ui-button\n              *ngFor=\"let btn of variant.items\"\n              [variant]=\"btn.variant\"\n              [category]=\"btn.category\"\n              [disabled]=\"btn.disabled\"\n              [title]=\"btn.category\"\n              [size]=\"'${args.size}'\"\n            >\n              {{btn.text}}\n            </ui-button>\n          </div>\n        </div>\n      </div>\n    `,\n    props: {\n      configurations,\n    },\n  };\n}",
                "rawdescription": "Template button",
                "description": "<p>Template button</p>\n"
            },
            {
                "name": "AllIconsTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/icon/icon.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<any>",
                "defaultValue": "(args: any) => {\n  return {\n    template: `\n      <div class=\"h-screen pb-20\">\n        <h1 class=\"text-lg mb-4\">List of all icons</h1>\n        <div class=\"flex flex-wrap gap-4 overflow-auto max-h-full\">\n          <div class=\"border rounded-lg flex items-center\" *ngFor=\"let icon of MAT_ICON_LIST\">\n              <ui-icon\n                class=\"p-4 border-r bg-gray-100 rounded-l-lg\"\n                [icon]=\"icon\"\n                variant=\"${args.variant}\"\n                [size]=\"${args.size}\"\n              ></ui-icon>\n              <h2 class=\"w-full text-center px-4\">{{icon}}</h2>\n          </div>\n        </div>\n      </div>`,\n    props: {\n      MAT_ICON_LIST,\n    },\n  };\n}",
                "rawdescription": "Template for all icons",
                "description": "<p>Template for all icons</p>\n"
            },
            {
                "name": "avatars",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/avatar-group/avatar-group.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MockedAvatar[]",
                "defaultValue": "[\n  {\n    size: 'large',\n    variant: 'tertiary',\n    image: '',\n    shape: 'circle',\n    initials: 'JL',\n  },\n  {\n    size: 'large',\n    variant: 'tertiary',\n    image:\n      'https://images.unsplash.com/photo-1491528323818-fdd1faba62cc?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80',\n    shape: 'circle',\n    initials: 'PM',\n  },\n  {\n    size: 'large',\n    variant: 'secondary',\n    image:\n      'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2.25&w=256&h=256&q=80',\n    shape: 'circle',\n    initials: '',\n  },\n  {\n    size: 'large',\n    variant: 'secondary',\n    image:\n      'https://images.unsplash.com/photo-1550525811-e5869dd03032?ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80',\n    shape: 'rectangle',\n    initials: '',\n  },\n]",
                "rawdescription": "Mocked avatar array",
                "description": "<p>Mocked avatar array</p>\n"
            },
            {
                "name": "BottomDatePicker",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/date/date-picker/date-picker.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "BottomDatePickerTemplate.bind({})",
                "rawdescription": "Date picker bottom",
                "description": "<p>Date picker bottom</p>\n"
            },
            {
                "name": "BottomDatePickerTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/date/date-picker/date-picker.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<DatePickerComponent>",
                "defaultValue": "(\n  args: DatePickerComponent\n) => {\n  return {\n    component: DatePickerComponent,\n    template: `\n    <p class=\"absolute\">selected value: {{formControl.value}}</p>\n    <div class=\"flex flex-col h-screen justify-end\">\n    <div [uiDateWrapper]=\"calendar\">\n    <input [uiDatePicker] [formControl]=\"formControl\" [label]=\"'Select a date'\"/>\n      <ui-date-picker #calendar>\n      </ui-date-picker> \n      </div>\n      </div>\n      `,\n    props: {\n      ...args,\n      formControl,\n    },\n  };\n}",
                "rawdescription": "Date picker bottom template",
                "description": "<p>Date picker bottom template</p>\n"
            },
            {
                "name": "BottomDateRange",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/date/date-range/date-range.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "BottomDateRangeTemplate.bind({})",
                "rawdescription": "Date range bottom",
                "description": "<p>Date range bottom</p>\n"
            },
            {
                "name": "BottomDateRangeTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/date/date-range/date-range.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<DateRangeComponent>",
                "defaultValue": "(\n  args: DateRangeComponent\n) => {\n  return {\n    component: DateRangeComponent,\n    template: `\n    <div class=\"absolute\">\n    <p>start value: {{formControlStart.value}}</p>\n    <p>end value: {{formControlEnd.value}}</p>\n    </div>\n    <div class=\"flex flex-col h-screen justify-end\">\n    <div [uiDateWrapper]=\"calendar\">\n    <input [uiDatePicker] [formControl]=\"formControlStart\" [label]=\"'Select a start date'\"/>\n    <input [uiDatePicker] [formControl]=\"formControlEnd\" [label]=\"'Select a end date'\"/>\n      <ui-date-range #calendar>\n      </ui-date-range> \n      </div>\n      </div>\n      `,\n    props: {\n      ...args,\n      formControlStart,\n      formControlEnd,\n    },\n  };\n}",
                "rawdescription": "Date range bottom template",
                "description": "<p>Date range bottom template</p>\n"
            },
            {
                "name": "BottomExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/tooltip/tooltip.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Bottom centered element",
                "description": "<p>Bottom centered element</p>\n"
            },
            {
                "name": "BottomLeftExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/tooltip/tooltip.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Bottom left element",
                "description": "<p>Bottom left element</p>\n"
            },
            {
                "name": "BottomRightExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/tooltip/tooltip.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Bottom right element",
                "description": "<p>Bottom right element</p>\n"
            },
            {
                "name": "ChipsInputTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/chip/chip.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<ChipComponent>",
                "defaultValue": "(args: ChipComponent) => {\n  return {\n    component: ChipComponent,\n    template: `\n      <div uiChipList [formControl]=\"formControl\" #chipList>\n        <ui-chip\n          [removable]=\"${args.removable}\"\n          [disabled]=\"${args.disabled}\"\n          [variant]=\"'${args.variant}'\"\n          [value]=\"status\"\n          *ngFor=\"let status of statuses; let i = index\"\n          (removed)=\"removeStatus(i)\"\n        >\n          {{ status }}\n        </ui-chip>\n      </div>\n      <input\n        placeholder=\"New status...\"\n        [uiChipListFor]=\"chipList\"\n        [chipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n        (chipTokenEnd)=\"addChipsFromInput($event)\"\n        >\n        <br>\n        <p>value: <span *ngFor=\"let val of formControl.value;let last = last\">{{val}} <span *ngIf=\"!last\">, </span></span></p>\n        <p>touched: {{formControl.touched}}</p>\n        `,\n    props: {\n      ...args,\n      statuses,\n      formControl,\n      removeStatus,\n      addChipsFromInput,\n      separatorKeysCodes,\n    },\n  };\n}",
                "rawdescription": "Template chip list with input",
                "description": "<p>Template chip list with input</p>\n"
            },
            {
                "name": "ChipVariants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/chip/chip.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ChipVariantsTemplate.bind({})",
                "rawdescription": "Chips variants demonstration",
                "description": "<p>Chips variants demonstration</p>\n"
            },
            {
                "name": "ChipVariantsTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/chip/chip.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<ChipComponent>",
                "defaultValue": "(args: ChipComponent) => {\n  return {\n    component: ChipComponent,\n    template: `\n      <div class=\"flex gap-1\">\n        <ui-chip variant=\"default\" [removable]=\"true\"> Default </ui-chip>\n        <ui-chip variant=\"primary\" [removable]=\"true\"> Primary </ui-chip>\n        <ui-chip variant=\"success\" [removable]=\"true\"> Success </ui-chip>\n        <ui-chip variant=\"danger\" [removable]=\"true\"> Danger </ui-chip>\n        <ui-chip variant=\"danger\" [removable]=\"true\" [disabled]=\"true\"> Disabled </ui-chip>\n      </div>\n    `,\n    props: {\n      ...args,\n    },\n  };\n}",
                "rawdescription": "Template chip variants",
                "description": "<p>Template chip variants</p>\n"
            },
            {
                "name": "ChipWithInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/chip/chip.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ChipsInputTemplate.bind({})",
                "rawdescription": "Chip list with input",
                "description": "<p>Chip list with input</p>\n"
            },
            {
                "name": "clickEvent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/menu/menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(name: string) =>\n  window.alert(`You pressed the ${name} button!`)",
                "rawdescription": "Click event handler for menu items template",
                "description": "<p>Click event handler for menu items template</p>\n"
            },
            {
                "name": "closeEvent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {\n  console.log('isClosed');\n}",
                "rawdescription": "Used to test if emission of output \"closed\" works",
                "description": "<p>Used to test if emission of output &quot;closed&quot; works</p>\n"
            },
            {
                "name": "closesAutocompletePanel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {\n  console.log('Closed autocomplete panel event');\n}",
                "rawdescription": "Callback to test the autocomplete directive closed event",
                "description": "<p>Callback to test the autocomplete directive closed event</p>\n"
            },
            {
                "name": "columnDefinitionArray",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/table/table.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  'name',\n  'email',\n  'phone',\n  'city',\n  'active',\n  'selected',\n  'id',\n]",
                "rawdescription": "Column definition for table",
                "description": "<p>Column definition for table</p>\n"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/.storybook/main.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StorybookConfig",
                "defaultValue": "{\n  stories: ['../**/*.stories.@(js|jsx|ts|tsx|mdx)'],\n  addons: ['@storybook/addon-mdx-gfm', '@storybook/addon-essentials'],\n  staticDirs: [\n    {\n      from: '../../../assets',\n      to: '/assets',\n    },\n    {\n      from: '../../../libs/shared/src/i18n',\n      to: '/assets/i18n',\n    },\n  ],\n  framework: {\n    name: '@storybook/angular',\n    options: {},\n  },\n}",
                "rawdescription": "Storybook configuration",
                "description": "<p>Storybook configuration</p>\n"
            },
            {
                "name": "configurations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    title: 'Default',\n    items: categories.map((category) => ({\n      variant: 'default',\n      category: category,\n      text: 'default',\n    })),\n  },\n  {\n    title: 'Primary',\n    items: categories.map((category) => ({\n      variant: 'primary',\n      category: category,\n      text: 'primary',\n    })),\n  },\n  {\n    title: 'Success',\n    items: categories.map((category) => ({\n      variant: 'success',\n      category: category,\n      text: 'success',\n    })),\n  },\n  {\n    title: 'Danger',\n    items: categories.map((category) => ({\n      variant: 'danger',\n      category: category,\n      text: 'danger',\n    })),\n  },\n  {\n    title: 'Grey',\n    items: categories.map((category) => ({\n      variant: 'grey',\n      category: category,\n      text: 'grey',\n    })),\n  },\n  {\n    title: 'Light',\n    items: categories.map((category) => ({\n      variant: 'light',\n      category: category,\n      text: 'light',\n    })),\n  },\n  {\n    title: 'Warning',\n    items: categories.map((category) => ({\n      variant: 'warning',\n      category: category,\n      text: 'warning',\n    })),\n  },\n  {\n    title: 'Disabled',\n    items: categories.map((category) => ({\n      variant: 'primary',\n      category: category,\n      text: 'disabled',\n      disabled: true,\n    })),\n  },\n]",
                "rawdescription": "List of all available buttons",
                "description": "<p>List of all available buttons</p>\n"
            },
            {
                "name": "Contained",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/breadcrumbs/breadcrumbs.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<BreadcrumbsComponent>",
                "defaultValue": "{\n  args: {\n    breadcrumbs: [\n      {\n        text: 'item 0',\n        uri: '#',\n        showLabel: true,\n      },\n      {\n        text: 'item 1',\n        uri: '#',\n        showLabel: true,\n      },\n      {\n        text: 'item 2',\n        uri: '#',\n        showLabel: true,\n      },\n    ],\n    separator: 'chevron',\n    display: 'contained',\n  },\n}",
                "rawdescription": "Container story",
                "description": "<p>Container story</p>\n"
            },
            {
                "name": "customTriggerSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n<ng-template #customTemplate>\n<span class=\"inline-flex items-center rounded-full bg-pink-50 px-2 py-1 text-xs font-medium text-pink-700 ring-1 ring-inset ring-pink-700/10\">{{formGroup.get('selectMenu').value}}</span>\n</ng-template>`",
                "rawdescription": "Custom template trigger to be placed between the select tag",
                "description": "<p>Custom template trigger to be placed between the select tag</p>\n"
            },
            {
                "name": "customTriggerSelectTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`<ui-select-menu\n  formControlName=\"selectMenu\"\n  (opened)=\"openEvent($event)\" \n  (closed)=\"closeEvent($event)\" \n  (selectedOption)=\"selectEvent($event)\"\n  [multiselect]=\"multiselect\"\n  [disabled]=\"disabled\"\n  [customTemplate]=\"customTemplate\"\n>\n  ${customTriggerSelect}\n  <ui-select-option *ngFor=\"let option of options\" [value]=\"option\">\n    {{option}}\n  </ui-select-option>\n</ui-select-menu>`",
                "rawdescription": "Select with the custom template trigger placed between the select tag",
                "description": "<p>Select with the custom template trigger placed between the select tag</p>\n"
            },
            {
                "name": "DatePicker",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/date/date-picker/date-picker.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "DatePickerTemplate.bind({})",
                "rawdescription": "Date picker",
                "description": "<p>Date picker</p>\n"
            },
            {
                "name": "DatePickerTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/date/date-picker/date-picker.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<DatePickerComponent>",
                "defaultValue": "(\n  args: DatePickerComponent\n) => {\n  return {\n    component: DatePickerComponent,\n    template: `\n    <div [uiDateWrapper]=\"calendar\">\n    <input [uiDatePicker] [formControl]=\"formControl\" [label]=\"'Select a date'\"/>\n      <ui-date-picker #calendar>\n      </ui-date-picker> \n      </div>\n      <br>\n      <p>selected value: {{formControl.value}}</p>\n      `,\n    props: {\n      ...args,\n      formControl,\n    },\n  };\n}",
                "rawdescription": "Date picker template",
                "description": "<p>Date picker template</p>\n"
            },
            {
                "name": "DateRange",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/date/date-range/date-range.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "DateRangeTemplate.bind({})",
                "rawdescription": "Date range",
                "description": "<p>Date range</p>\n"
            },
            {
                "name": "DateRangeTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/date/date-range/date-range.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<DateRangeComponent>",
                "defaultValue": "(\n  args: DateRangeComponent\n) => {\n  return {\n    component: DateRangeComponent,\n    template: `\n    <div [uiDateWrapper]=\"calendar\">\n    <input [uiDatePicker] [formControl]=\"formControlStart\" [label]=\"'Select a start date'\"/>\n    <input [uiDatePicker] [formControl]=\"formControlEnd\" [label]=\"'Select a end date'\"/>\n      <ui-date-range #calendar>\n      </ui-date-range> \n      </div>\n      <br>\n      <p>start value: {{formControlStart.value}}</p>\n      <p>end value: {{formControlEnd.value}}</p>`,\n    props: {\n      ...args,\n      formControlStart,\n      formControlEnd,\n    },\n  };\n}",
                "rawdescription": "Date range template",
                "description": "<p>Date range template</p>\n"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<StoryType>",
                "defaultValue": "{\n  args: {\n    content:\n      'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam pellentesque rhoncus odio, a accumsan purus venenatis eget. Suspendisse pretium nunc non tellus pulvinar, ut dapibus velit mollis. Vivamus dictum tempus ligula, vitae condimentum justo scelerisque sit amet. Donec ultrices quis turpis vitae tincidunt.',\n  },\n}",
                "rawdescription": "Alert story",
                "description": "<p>Alert story</p>\n"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/avatar-group/avatar-group.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<StoryType>",
                "defaultValue": "{\n  args: {},\n}",
                "rawdescription": "AvatarGroup with top stack, limit 2",
                "description": "<p>AvatarGroup with top stack, limit 2</p>\n"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/dialog/dialog.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Primary launchDialog",
                "description": "<p>Primary launchDialog</p>\n"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/icon/icon.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Primary icon component",
                "description": "<p>Primary icon component</p>\n"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/tabs/tabs.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<TabsComponent>",
                "defaultValue": "{\n  args: {\n    vertical: false,\n  },\n}",
                "rawdescription": "Default story",
                "description": "<p>Default story</p>\n"
            },
            {
                "name": "Defaut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<AvatarComponent>",
                "defaultValue": "{\n  args: {},\n}",
                "rawdescription": "Default inputs",
                "description": "<p>Default inputs</p>\n"
            },
            {
                "name": "DisabledSelection",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateDisabledSelection.bind({})",
                "rawdescription": "Actual export of disabled select story",
                "description": "<p>Actual export of disabled select story</p>\n"
            },
            {
                "name": "FormAutocomplete",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "FormControlTemplate.bind({})",
                "rawdescription": "Form control autocomplete",
                "description": "<p>Form control autocomplete</p>\n"
            },
            {
                "name": "FormCheckbox",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/checkbox/checkbox.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "FormControlTemplate.bind({})",
                "rawdescription": "Form control checkbox",
                "description": "<p>Form control checkbox</p>\n"
            },
            {
                "name": "formControl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FormControl()",
                "rawdescription": "Form control to test autocomplete story",
                "description": "<p>Form control to test autocomplete story</p>\n"
            },
            {
                "name": "formControl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/chip/chip.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FormControl()",
                "rawdescription": "Form control to test chip story",
                "description": "<p>Form control to test chip story</p>\n"
            },
            {
                "name": "formControl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FormGroup({\n  name: new FormControl(''),\n})",
                "rawdescription": "Form group to test story with disable option",
                "description": "<p>Form group to test story with disable option</p>\n"
            },
            {
                "name": "formControl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/radio/radio.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FormControl()",
                "rawdescription": "Form control for story testing",
                "description": "<p>Form control for story testing</p>\n"
            },
            {
                "name": "formControl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/date/date-picker/date-picker.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FormControl(new Date())",
                "rawdescription": "FormControl for story testing",
                "description": "<p>FormControl for story testing</p>\n"
            },
            {
                "name": "formControlEnd",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/date/date-range/date-range.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FormControl(\n  afterTomorrow.setDate(today.getDate() + 2)\n)",
                "rawdescription": "FormControl for end date",
                "description": "<p>FormControl for end date</p>\n"
            },
            {
                "name": "formControlSelectTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n<div [formGroup]=\"formGroup\" class=\"py-5\">\n  <ui-select-menu \n    formControlName=\"selectMenu\"\n    (opened)=\"openEvent($event)\" \n    (closed)=\"closeEvent($event)\" \n    (selectedOption)=\"selectEvent($event)\" \n    [multiselect]=\"multiselect\"\n  >\n    <ui-select-option\n      *ngFor=\"let option of options\"\n      [value]=\"option\"\n      [selected]=\"formGroup.get('selectMenu')?.value.includes(option)\">\n      {{option}}\n    </ui-select-option>\n  </ui-select-menu>\n</div>\n`",
                "rawdescription": "Template used to render the stories (using a formGroup with pre-selected values)",
                "description": "<p>Template used to render the stories (using a formGroup with pre-selected values)</p>\n"
            },
            {
                "name": "formControlStart",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/date/date-range/date-range.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FormControl(today)",
                "rawdescription": "FormControl for start date",
                "description": "<p>FormControl for start date</p>\n"
            },
            {
                "name": "FormControlTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<any>",
                "defaultValue": "(args: any) => {\n  formControl.setValue(SIMPLE_OPTIONS[2]);\n  return {\n    template: `\n    <input\n    type=\"text\"\n    placeholder=\"Select a value\"\n    [formControl]=\"formControl\"\n    [uiAutocomplete]=\"auto\"\n    [autocompleteDisplayKey]=\"'label'\"\n    (opened)=\"openedAutocompletePanel()\"\n    (closed)=\"closesAutocompletePanel()\"\n    (optionSelected)=\"selectedOption($event)\"\n    class=\"relative w-full rounded-md border-0 p-1.5 shadow-sm ring-1 ring-inset sm:leading-6 focus:ring-2 focus:ring-inset\"\n  >\n  <ui-autocomplete #auto>\n  <ui-option *ngFor=\"let option of SIMPLE_OPTIONS\" [value]=\"option\">\n    {{option.label}}\n    <ng-container ngProjectsAs=\"icon\">\n    <ui-icon\n      icon=\"edit\"\n      [size]=\"18\"\n    ></ui-icon>\n    </ng-container>\n  </ui-option>\n  </ui-autocomplete>\n      <br>\n      <p>value: {{formControl.value | json}}</p>\n      <p>touched: {{formControl.touched}}</p>\n    `,\n    props: {\n      ...args,\n      SIMPLE_OPTIONS,\n      formControl,\n      openedAutocompletePanel,\n      closesAutocompletePanel,\n      selectedOption,\n    },\n  };\n}",
                "rawdescription": "Form control template autocomplete",
                "description": "<p>Form control template autocomplete</p>\n"
            },
            {
                "name": "FormControlTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/checkbox/checkbox.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<CheckboxComponent>",
                "defaultValue": "(\n  args: CheckboxComponent\n) => {\n  const formGroup = new FormGroup({\n    checkbox: new FormControl(false),\n  });\n  args.variant = 'default';\n  return {\n    component: CheckboxComponent,\n    template: `\n      <form [formGroup]=\"formGroup\">\n      <ui-checkbox [variant]=\"'${args.variant}'\" formControlName=\"checkbox\">\n      <ng-container ngProjectAs=\"label\">Form control checkbox</ng-container>\n      </ui-checkbox>\n        </form>\n        <br>\n        <p>value: {{formGroup.get('checkbox').value}}</p>\n        <p>touched: {{formGroup.get('checkbox').touched}}</p>\n        `,\n    props: {\n      ...args,\n      formGroup,\n    },\n  };\n}",
                "rawdescription": "Form control template checkbox",
                "description": "<p>Form control template checkbox</p>\n"
            },
            {
                "name": "FormControlTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/radio/radio.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<RadioComponent>",
                "defaultValue": "(args: RadioComponent) => {\n  args.name = 'notification-method';\n  return {\n    component: RadioComponent,\n    template: `\n    <div class=\"space-y-4\" [formControl]=\"formControl\" [uiRadioGroupDirective]=\"'${args.name}'\">\n    <ui-radio *ngFor=\"let option of radioOptions\" [disabled]=\"${args.disabled}\" [variant]=\"'${args.variant}'\" [value]=\"option.value\" >\n      <ng-container ngProjectAs=\"label\">{{option.label}}</ng-container>\n    </ui-radio>\n    </div>\n    <br>\n    <p>value: {{formControl.value}}</p>\n    <p>touched: {{formControl.touched}}</p>\n`,\n    props: {\n      ...args,\n      formControl,\n      radioOptions,\n    },\n  };\n}",
                "rawdescription": "Form control template radio",
                "description": "<p>Form control template radio</p>\n"
            },
            {
                "name": "FormControlTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/textarea/textarea.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<TextareaComponent>",
                "defaultValue": "(\n  args: TextareaComponent\n) => {\n  const formGroup = new FormGroup({\n    textarea: new FormControl('Default value'),\n  });\n  return {\n    component: TextareaComponent,\n    template: `\n      <form [formGroup]=\"formGroup\">\n      <ui-textarea [placeholder]=\"'${args.placeholder}'\" formControlName=\"textarea\"></ui-textarea>\n        </form>\n        <br>\n        <p>value: {{formGroup.get('textarea').value}}</p>\n        <p>touched: {{formGroup.get('textarea').touched}}</p>\n        `,\n    props: {\n      ...args,\n      formGroup,\n    },\n  };\n}",
                "rawdescription": "Form control template textarea",
                "description": "<p>Form control template textarea</p>\n"
            },
            {
                "name": "FormControlTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/toggle/toggle.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<ToggleComponent>",
                "defaultValue": "(\n  args: ToggleComponent\n) => {\n  const formGroup = new FormGroup({\n    toggle: new FormControl(true),\n  });\n  return {\n    component: ToggleComponent,\n    template: `\n      <form [formGroup]=\"formGroup\">\n      <ui-toggle [type]=\"'${args.type}'\" [variant]=\"'${args.variant}'\" [labelPosition]=\"'${args.labelPosition}'\" formControlName=\"toggle\">\n        <ng-container ngProjectAs=\"label\">Test test test!</ng-container>\n        <ng-container ngProjectAs=\"description\">\n          Test test test test test test test test test test test test test\n        </ng-container>\n      </ui-toggle>\n        </form>\n        <br>\n        <p>value: {{formGroup.get('toggle').value}}</p>\n        <p>touched: {{formGroup.get('toggle').touched}}</p>\n        `,\n    props: {\n      ...args,\n      formGroup,\n    },\n  };\n}",
                "rawdescription": "Form control template toggle",
                "description": "<p>Form control template toggle</p>\n"
            },
            {
                "name": "formGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FormGroup({\n  selectMenu: new FormControl(),\n})",
                "rawdescription": "Form group to test select-menu control value accessor",
                "description": "<p>Form group to test select-menu control value accessor</p>\n"
            },
            {
                "name": "formGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/slider/slider.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FormGroup({\n  slider: new FormControl(4),\n})",
                "rawdescription": "Form group to test slider control value accessor",
                "description": "<p>Form group to test slider control value accessor</p>\n"
            },
            {
                "name": "FormRadio",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/radio/radio.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "FormControlTemplate.bind({})",
                "rawdescription": "Form control radio",
                "description": "<p>Form control radio</p>\n"
            },
            {
                "name": "FormTextarea",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/textarea/textarea.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "FormControlTemplate.bind({})",
                "rawdescription": "Form control textarea",
                "description": "<p>Form control textarea</p>\n"
            },
            {
                "name": "FormToggle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/toggle/toggle.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "FormControlTemplate.bind({})",
                "rawdescription": "Form control toggle",
                "description": "<p>Form control toggle</p>\n"
            },
            {
                "name": "Full",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/breadcrumbs/breadcrumbs.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<BreadcrumbsComponent>",
                "defaultValue": "{\n  args: {\n    breadcrumbs: [\n      {\n        text: 'item 0',\n        uri: '#',\n        showLabel: true,\n      },\n      {\n        text: 'item 1',\n        uri: '#',\n        showLabel: true,\n      },\n      {\n        text: 'item 2',\n        uri: '#',\n        showLabel: true,\n      },\n    ],\n    separator: 'chevron',\n    display: 'full',\n  },\n}",
                "rawdescription": "Full width story",
                "description": "<p>Full width story</p>\n"
            },
            {
                "name": "getRadioChangeSelection",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/radio/radio.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(radioSelectionChange: any) => {\n  selectedOption = radioSelectionChange;\n  addons.getChannel().emit(FORCE_RE_RENDER);\n}",
                "rawdescription": "Function to test radio change callback when no form control is used",
                "description": "<p>Function to test radio change callback when no form control is used</p>\n"
            },
            {
                "name": "GROUPED_OPTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    optionName: 'A',\n    channels: [\n      {\n        optionName: 'option A 1',\n      },\n    ],\n  },\n  {\n    optionName: 'B',\n    channels: [\n      {\n        optionName: 'B 1',\n      },\n      {\n        optionName: 'b',\n      },\n    ],\n  },\n  {\n    optionName: 'C',\n  },\n  {\n    optionName: 'D',\n    channels: [\n      {\n        optionName: 'D 1',\n      },\n      {\n        optionName: 'D two',\n      },\n      {\n        optionName: 'D a b',\n      },\n    ],\n  },\n]",
                "rawdescription": "Autocomplete grouped options example",
                "description": "<p>Autocomplete grouped options example</p>\n"
            },
            {
                "name": "GroupedAutocompletePanel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "GroupedAutocompletePanelTemplate.bind(\n  {}\n)",
                "rawdescription": "Autocomplete panel inject in a input with grouped options",
                "description": "<p>Autocomplete panel inject in a input with grouped options</p>\n"
            },
            {
                "name": "GroupedAutocompletePanelTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<any>",
                "defaultValue": "(args: any) => {\n  return {\n    template: `\n    <input\n    type=\"text\"\n    placeholder=\"Select a value\"\n    [uiAutocomplete]=\"auto\"\n    [autocompleteDisplayKey]=\"'optionName'\"\n    (opened)=\"openedAutocompletePanel()\"\n    (closed)=\"closesAutocompletePanel()\"\n    (optionSelected)=\"selectedOption($event)\"\n    class=\"relative w-full rounded-md border-0 p-1.5 shadow-sm ring-1 ring-inset sm:leading-6 focus:ring-2 focus:ring-inset\"\n  >\n  <ui-autocomplete #auto>\n  <ui-option [isGroup]=\"true\" *ngFor=\"let option of GROUPED_OPTIONS\">\n    {{option.optionName}}\n    <ui-option *ngFor=\"let child of option.channels\" [value]=\"child\">\n    {{child.optionName}}\n    <ng-container ngProjectsAs=\"icon\">\n    <ui-icon\n      icon=\"edit\"\n      [size]=\"18\"\n    ></ui-icon>\n    </ng-container>\n  </ui-option>\n  </ui-option>\n  <ui-autocomplete>\n    `,\n    props: {\n      ...args,\n      GROUPED_OPTIONS,\n      openedAutocompletePanel,\n      closesAutocompletePanel,\n      selectedOption,\n    },\n  };\n}",
                "rawdescription": "Grouped autocomplete template",
                "description": "<p>Grouped autocomplete template</p>\n"
            },
            {
                "name": "Horizontal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/divider/divider.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<DividerComponent>",
                "defaultValue": "{\n  args: {\n    position: 'center',\n    text: 'Test',\n    orientation: 'horizontal',\n  },\n}",
                "rawdescription": "Horizontal divider",
                "description": "<p>Horizontal divider</p>\n"
            },
            {
                "name": "IconList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/icon/icon.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "AllIconsTemplate.bind({})",
                "rawdescription": "All icons",
                "description": "<p>All icons</p>\n"
            },
            {
                "name": "individualBtnArgs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "{\n  category: {\n    options: categories,\n    control: {\n      type: 'select',\n    },\n  },\n  variant: {\n    options: variants,\n    control: {\n      type: 'select',\n    },\n    defaultValue: 'default',\n  },\n  iconPosition: {\n    options: buttonIconPositions,\n    control: {\n      type: 'select',\n    },\n    defaultValue: 'prefix',\n  },\n  icon: {\n    control: 'text',\n    defaultValue: '',\n  },\n  isIcon: {\n    control: {\n      type: 'boolean',\n    },\n    defaultValue: false,\n  },\n  loading: {\n    control: {\n      type: 'boolean',\n    },\n    defaultValue: false,\n  },\n  disabled: {\n    control: {\n      type: 'boolean',\n    },\n    defaultValue: false,\n  },\n} as Meta<StoryType>",
                "rawdescription": "ArgTypes for individual button stories",
                "description": "<p>ArgTypes for individual button stories</p>\n"
            },
            {
                "name": "itemsArray",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/paginator/paginator.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number[]",
                "defaultValue": "[...Array(100).keys()]",
                "rawdescription": "Total items for the paginator",
                "description": "<p>Total items for the paginator</p>\n"
            },
            {
                "name": "KendoFocusTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/textarea/textarea.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<TextareaComponent>",
                "defaultValue": "(\n  args: TextareaComponent\n) => {\n  return {\n    component: TextareaComponent,\n    template: `\n      <ui-textarea kendoGridFocusable [placeholder]=\"'${args.placeholder}'\"></ui-textarea>\n        `,\n    props: {\n      ...args,\n    },\n  };\n}",
                "rawdescription": "Kendo focusable template textarea",
                "description": "<p>Kendo focusable template textarea</p>\n"
            },
            {
                "name": "KendoFocusTextarea",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/textarea/textarea.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "KendoFocusTemplate.bind({})",
                "rawdescription": "Kendo focus textarea",
                "description": "<p>Kendo focus textarea</p>\n"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/spinner/spinner.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Large spinner",
                "description": "<p>Large spinner</p>\n"
            },
            {
                "name": "largeSpinner",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/spinner/spinner.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  size: 'large',\n}",
                "rawdescription": "Large spinner",
                "description": "<p>Large spinner</p>\n"
            },
            {
                "name": "LeftBottomCornerMenu",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/menu/menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "LeftBottomCornerMenuTemplate.bind({})",
                "rawdescription": "Menu template in bottom left corner of screen",
                "description": "<p>Menu template in bottom left corner of screen</p>\n"
            },
            {
                "name": "LeftBottomCornerMenuTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/menu/menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<MenuComponent>",
                "defaultValue": "(\n  args: MenuComponent\n) => {\n  return {\n    component: MenuComponent,\n    template: `\n    <div style=\"height: calc(100vh - 50px)\" class=\"flex items-end\">\n    <ui-button  [uiMenuTriggerFor]=\"menu\">Open menu</ui-button>\n    </div>\n    ${menuItemsTemplate} `,\n    props: {\n      ...args,\n      clickEvent,\n    },\n  };\n}",
                "rawdescription": "Menu template",
                "description": "<p>Menu template</p>\n"
            },
            {
                "name": "LeftExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/tooltip/tooltip.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Middle left element",
                "description": "<p>Middle left element</p>\n"
            },
            {
                "name": "LeftTopCornerMenu",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/menu/menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "LeftTopCornerMenuTemplate.bind({})",
                "rawdescription": "Menu template in top left corner of screen",
                "description": "<p>Menu template in top left corner of screen</p>\n"
            },
            {
                "name": "LeftTopCornerMenuTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/menu/menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<MenuComponent>",
                "defaultValue": "(\n  args: MenuComponent\n) => {\n  return {\n    component: MenuComponent,\n    template: `\n    <div class=\"flex justify-start\">\n    <ui-button [uiMenuTriggerFor]=\"menu\">Open menu</ui-button>\n    </div>\n    ${menuItemsTemplate}`,\n    props: {\n      ...args,\n      clickEvent,\n    },\n  };\n}",
                "rawdescription": "Menu template",
                "description": "<p>Menu template</p>\n"
            },
            {
                "name": "LongTextExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/tooltip/tooltip.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Long text element",
                "description": "<p>Long text element</p>\n"
            },
            {
                "name": "Medium",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/spinner/spinner.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Medium spinner",
                "description": "<p>Medium spinner</p>\n"
            },
            {
                "name": "mediumSpinner",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/spinner/spinner.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  size: 'medium',\n}",
                "rawdescription": "Medium spinner",
                "description": "<p>Medium spinner</p>\n"
            },
            {
                "name": "menuItemsTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/menu/menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`<ui-menu #menu>\n  <div uiMenuItem (click)=\"clickEvent('First')\">Button 1</div>\n  <ui-divider></ui-divider>\n  <div uiMenuItem (click)=\"clickEvent('Second')\">Button 2</div>\n  <ui-divider></ui-divider>\n  <div uiMenuItem (click)=\"clickEvent('Third')\">Button 3</div>\n  </ui-menu>`",
                "rawdescription": "Default menu items template",
                "description": "<p>Default menu items template</p>\n"
            },
            {
                "name": "MultiPanel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/expansion-panel/expansion-panel.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateMulti.bind({})",
                "rawdescription": "Multi expansion panel",
                "description": "<p>Multi expansion panel</p>\n"
            },
            {
                "name": "MultiSelection",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateMultiSelection.bind({})",
                "rawdescription": "Actual export of multi select story",
                "description": "<p>Actual export of multi select story</p>\n"
            },
            {
                "name": "onClose",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/expansion-panel/expansion-panel.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {\n  console.log('panel closed');\n}",
                "rawdescription": "Test panel close",
                "description": "<p>Test panel close</p>\n"
            },
            {
                "name": "openedAutocompletePanel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {\n  console.log('Opened autocomplete panel event');\n}",
                "rawdescription": "Callback to test the autocomplete directive opened event",
                "description": "<p>Callback to test the autocomplete directive opened event</p>\n"
            },
            {
                "name": "openEvent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {\n  console.log('isOpened');\n}",
                "rawdescription": "Used to test if emission of output \"opened\" works",
                "description": "<p>Used to test if emission of output &quot;opened&quot; works</p>\n"
            },
            {
                "name": "options",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  'french',\n  'spanish',\n  'english',\n  'japanese',\n  'javanese',\n  'chinese',\n]",
                "rawdescription": "List of options for the select menu included template",
                "description": "<p>List of options for the select menu included template</p>\n"
            },
            {
                "name": "options",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  'French',\n  'English',\n  'Japanese',\n  'Javanese',\n  'Polish',\n  'German',\n  'Spanish',\n  'Dutch',\n  'Chinese',\n]",
                "rawdescription": "Options for select menu",
                "description": "<p>Options for select menu</p>\n"
            },
            {
                "name": "OutlineFalse",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Outline = False design",
                "description": "<p>Outline = False design</p>\n"
            },
            {
                "name": "OutlineFalseAutocomplete",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateAutocomplete.bind({})",
                "rawdescription": "Outline = False design + use of autocomplete",
                "description": "<p>Outline = False design + use of autocomplete</p>\n"
            },
            {
                "name": "OutlineFalseSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateSelect.bind({})",
                "rawdescription": "Outline = False design + use of select menu",
                "description": "<p>Outline = False design + use of select menu</p>\n"
            },
            {
                "name": "OutlineTrue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Outline = True design",
                "description": "<p>Outline = True design</p>\n"
            },
            {
                "name": "OutlineTrueAutocomplete",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateAutocomplete.bind({})",
                "rawdescription": "Outline = True design + use of autocomplete",
                "description": "<p>Outline = True design + use of autocomplete</p>\n"
            },
            {
                "name": "OutlineTrueSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateSelect.bind({})",
                "rawdescription": "Outline = True design + use of select menu",
                "description": "<p>Outline = True design + use of select menu</p>\n"
            },
            {
                "name": "OverlaySidenav",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/sidenav/sidenav.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "OverlaySidenavTemplate.bind({})",
                "rawdescription": "Sidenav sidenav",
                "description": "<p>Sidenav sidenav</p>\n"
            },
            {
                "name": "OverlaySidenavTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/sidenav/sidenav.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<SidenavContainerComponent>",
                "defaultValue": "(\n  args: SidenavContainerComponent\n) => {\n  args.showSidenav = [true];\n  return {\n    component: SidenavContainerComponent,\n    template: `\n      <ui-sidenav-container>\n        <ng-container ngProjectAs=\"content\">\n        <div class=\"flex flex-col\">\n        <ui-button class=\"mx-auto\" (click)=\"nav.toggle()\">Toggle sidenav</ui-button>\n          <p class=\"mt-3 mx-auto\">Main content</p>\n          </div>\n        </ng-container>\n        <div\n          uiSidenavDirective\n          #nav=\"uiSidenavDirective\"\n          [(opened)]=\"showSidenav\"\n          [mode]=\"'over'\"\n          ngProjectAs=\"sidenavContent\"\n        >\n          <div *ngFor=\"let i of [].constructor(25)\">Sidenav Content</div>\n        </div>\n      </ui-sidenav-container>\n    `,\n    props: {\n      ...args,\n    },\n  };\n}",
                "rawdescription": "Overlay sidenav template",
                "description": "<p>Overlay sidenav template</p>\n"
            },
            {
                "name": "pageChange",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/paginator/paginator.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(event: UIPageChangeEvent) => {\n  console.log('UIPageChangeEvent: ', event);\n  pagedItems = [...itemsArray.slice(event.skip, event.skip + event.pageSize)];\n  addons.getChannel().emit(FORCE_RE_RENDER);\n}",
                "rawdescription": "Custom method to update paged items for story testing",
                "description": "<p>Custom method to update paged items for story testing</p>\n"
            },
            {
                "name": "pagedItems",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/paginator/paginator.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number[]",
                "defaultValue": "itemsArray.filter((value) => value < 10)"
            },
            {
                "name": "Paginator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/paginator/paginator.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Paginator story",
                "description": "<p>Paginator story</p>\n"
            },
            {
                "name": "panelOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/expansion-panel/expansion-panel.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "PanelOption[]",
                "defaultValue": "[\n  {\n    title: 'Item 1',\n    expanded: true,\n    text: 'Lorem ipsum dolor, sit amet consectetur adipisicing elit. Perferendis excepturi incidunt ipsum deleniti labore, tempore non nam doloribus blanditiis veritatis illo autem iure aliquid ullam rem tenetur deserunt velit culpa?',\n  },\n  {\n    title: 'Item 2',\n    expanded: false,\n    text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Repudiandae ab harum eius, ullam, ex expedita animi nihil, et ut fugit commodi quam! Saepe, recusandae quo sapiente id quidem velit, beatae error distinctio asperiores nesciunt officiis iusto. Sed, aliquid labore pariatur, optio sequi recusandae blanditiis voluptas perferendis sint eveniet inventore harum porro nemo consequatur nesciunt quos delectus, id amet quae? Exercitationem ab debitis ipsum sapiente? A, culpa, quaerat assumenda amet nulla id, quod quia facilis tempora fugit aut provident natus omnis doloremque dolorem odit! Voluptatum assumenda, ipsum vel architecto possimus adipisci ipsam. Fugiat hic impedit rem voluptatem expedita architecto fugit.',\n  },\n  {\n    title: 'Item 3',\n    expanded: false,\n    text: 'Lorem ipsum dolor, sit amet consectetur adipisicing elit. Perferendis excepturi incidunt ipsum deleniti labore, tempore non nam doloribus blanditiis veritatis illo autem iure aliquid ullam rem tenetur deserunt velit culpa?',\n  },\n]"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Primary button",
                "description": "<p>Primary button</p>\n"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/checkbox/checkbox.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Primary checkbox",
                "description": "<p>Primary checkbox</p>\n"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/radio/radio.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Primary radio",
                "description": "<p>Primary radio</p>\n"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/textarea/textarea.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Primary textarea",
                "description": "<p>Primary textarea</p>\n"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/toggle/toggle.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "PrimaryTemplate.bind({})",
                "rawdescription": "Primary toggle",
                "description": "<p>Primary toggle</p>\n"
            },
            {
                "name": "primaryButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  label: 'Primary button',\n  category: 'primary',\n  variant: 'default',\n  size: 'medium',\n  icon: '',\n}",
                "rawdescription": "Primary button",
                "description": "<p>Primary button</p>\n"
            },
            {
                "name": "PrimaryCircleAvatarLarge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<AvatarComponent>",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    shape: 'circle',\n    initials: '',\n    image: '',\n    variant: 'primary',\n  },\n}",
                "rawdescription": "Primary large circle avatar story",
                "description": "<p>Primary large circle avatar story</p>\n"
            },
            {
                "name": "PrimaryCircleAvatarMedium",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<AvatarComponent>",
                "defaultValue": "{\n  args: {\n    size: 'medium',\n    shape: 'circle',\n    initials: '',\n    image: '',\n    variant: 'primary',\n  },\n}",
                "rawdescription": "Primary medium circle avatar story",
                "description": "<p>Primary medium circle avatar story</p>\n"
            },
            {
                "name": "PrimaryCircleAvatarSmall",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<AvatarComponent>",
                "defaultValue": "{\n  args: {\n    size: 'small',\n    shape: 'circle',\n    initials: '',\n    image: '',\n    variant: 'primary',\n  },\n}",
                "rawdescription": "Primary small circle avatar story",
                "description": "<p>Primary small circle avatar story</p>\n"
            },
            {
                "name": "PrimaryCircleImageAvatarLarge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<AvatarComponent>",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    shape: 'circle',\n    initials: '',\n    image:\n      'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80',\n    variant: 'primary',\n  },\n}",
                "rawdescription": "Primary large circle avatar with image story",
                "description": "<p>Primary large circle avatar with image story</p>\n"
            },
            {
                "name": "PrimaryRectangleAvatarLarge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<AvatarComponent>",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    shape: 'rectangle',\n    initials: '',\n    image: '',\n    variant: 'primary',\n  },\n}",
                "rawdescription": "Primary large rectangle avatar story",
                "description": "<p>Primary large rectangle avatar story</p>\n"
            },
            {
                "name": "PrimaryRectangleAvatarMedium",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<AvatarComponent>",
                "defaultValue": "{\n  args: {\n    size: 'medium',\n    shape: 'rectangle',\n    initials: '',\n    image: '',\n    variant: 'primary',\n  },\n}",
                "rawdescription": "Primary medium rectangle avatar story",
                "description": "<p>Primary medium rectangle avatar story</p>\n"
            },
            {
                "name": "PrimaryRectangleAvatarSmall",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<AvatarComponent>",
                "defaultValue": "{\n  args: {\n    size: 'small',\n    shape: 'rectangle',\n    initials: '',\n    image: '',\n    variant: 'primary',\n  },\n}",
                "rawdescription": "Primary small rectangle avatar story",
                "description": "<p>Primary small rectangle avatar story</p>\n"
            },
            {
                "name": "PrimaryRectangleImageAvatarLarge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<AvatarComponent>",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    shape: 'rectangle',\n    initials: '',\n    image:\n      'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80',\n    variant: 'primary',\n  },\n}",
                "rawdescription": "Primary large rectangle with image avatar story",
                "description": "<p>Primary large rectangle with image avatar story</p>\n"
            },
            {
                "name": "PrimaryTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/toggle/toggle.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<ToggleComponent>",
                "defaultValue": "(args: ToggleComponent) => {\n  args.icon = {\n    disableIcon: 'close',\n    enableIcon: 'save',\n  };\n  return {\n    component: ToggleComponent,\n    template: `\n      <ui-toggle [type]=\"'${args.type}'\" [icon]=\"icon\" [variant]=\"'${args.variant}'\" [labelPosition]=\"'${args.labelPosition}'\">\n        <ng-container ngProjectAs=\"label\">Test test test!</ng-container>\n        <ng-container ngProjectAs=\"description\">\n          Test test test test test test test test test test test test test\n        </ng-container>\n      </ui-toggle>\n        `,\n    props: {\n      ...args,\n    },\n  };\n}",
                "rawdescription": "Primary template toggle",
                "description": "<p>Primary template toggle</p>\n"
            },
            {
                "name": "PushSidenav",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/sidenav/sidenav.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "PushSidenavTemplate.bind({})",
                "rawdescription": "Sidenav sidenav",
                "description": "<p>Sidenav sidenav</p>\n"
            },
            {
                "name": "PushSidenavTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/sidenav/sidenav.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<SidenavContainerComponent>",
                "defaultValue": "(\n  args: SidenavContainerComponent\n) => {\n  args.showSidenav = [true];\n  return {\n    component: SidenavContainerComponent,\n    template: `\n      <ui-sidenav-container>\n        <ng-container ngProjectAs=\"content\">\n        <ui-button (click)=\"nav.toggle()\">Toggle sidenav</ui-button>\n          <p class=\"mt-3\">Main content</p>\n        </ng-container>\n        <div\n          uiSidenavDirective\n          #nav=\"uiSidenavDirective\"\n          [(opened)]=\"showSidenav\"\n          ngProjectAs=\"sidenavContent\"\n        >\n          <div *ngFor=\"let i of [].constructor(25)\">Sidenav Content</div>\n        </div>\n      </ui-sidenav-container>\n    `,\n    props: {\n      ...args,\n    },\n  };\n}",
                "rawdescription": "Push sidenav template",
                "description": "<p>Push sidenav template</p>\n"
            },
            {
                "name": "radioOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/radio/radio.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "RadioOption[]",
                "defaultValue": "[\n  {\n    label: 'Email',\n    value: 'email',\n  },\n  {\n    label: 'Phone (SMS)',\n    value: 'sms',\n  },\n  {\n    label: 'Push Notification',\n    value: 'push',\n  },\n]"
            },
            {
                "name": "removeStatus",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/chip/chip.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(index: number) => {\n  statuses.splice(index, 1);\n}",
                "rawdescription": "Callback to test the chip remove event",
                "description": "<p>Callback to test the chip remove event</p>\n"
            },
            {
                "name": "RightBottomCornerMenu",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/menu/menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "RightBottomCornerMenuTemplate.bind({})",
                "rawdescription": "Menu template in bottom right corner of screen",
                "description": "<p>Menu template in bottom right corner of screen</p>\n"
            },
            {
                "name": "RightBottomCornerMenuTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/menu/menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<MenuComponent>",
                "defaultValue": "(\n  args: MenuComponent\n) => {\n  return {\n    component: MenuComponent,\n    template: `\n    <div style=\"height: calc(100vh - 50px)\" class=\"flex justify-end items-end\">\n    <ui-button  [uiMenuTriggerFor]=\"menu\">Open menu</ui-button>\n    </div> \n    ${menuItemsTemplate}`,\n    props: {\n      ...args,\n      clickEvent,\n    },\n  };\n}",
                "rawdescription": "Menu template",
                "description": "<p>Menu template</p>\n"
            },
            {
                "name": "RightExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/tooltip/tooltip.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Middle right element",
                "description": "<p>Middle right element</p>\n"
            },
            {
                "name": "RightTopCornerMenu",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/menu/menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "RightTopCornerMenuTemplate.bind({})",
                "rawdescription": "Menu template in top right corner of screen",
                "description": "<p>Menu template in top right corner of screen</p>\n"
            },
            {
                "name": "RightTopCornerMenuTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/menu/menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<MenuComponent>",
                "defaultValue": "(\n  args: MenuComponent\n) => {\n  return {\n    component: MenuComponent,\n    template: `\n    <div class=\"flex justify-end\">\n    <ui-button [uiMenuTriggerFor]=\"menu\">Open menu</ui-button>\n    </div>\n    ${menuItemsTemplate} `,\n    props: {\n      ...args,\n      clickEvent,\n    },\n  };\n}",
                "rawdescription": "Menu template",
                "description": "<p>Menu template</p>\n"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Secondary button",
                "description": "<p>Secondary button</p>\n"
            },
            {
                "name": "secondaryButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  label: 'Secondary button',\n  category: 'secondary',\n  variant: 'default',\n  size: 'medium',\n  icon: '',\n}",
                "rawdescription": "Secondary button",
                "description": "<p>Secondary button</p>\n"
            },
            {
                "name": "SecondaryCircleAvatarLarge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<AvatarComponent>",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    shape: 'circle',\n    initials: '',\n    image: '',\n    variant: 'secondary',\n  },\n}",
                "rawdescription": "Secondary large circle avatar story",
                "description": "<p>Secondary large circle avatar story</p>\n"
            },
            {
                "name": "SecondaryRectangleAvatarLarge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<AvatarComponent>",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    shape: 'rectangle',\n    initials: '',\n    image: '',\n    variant: 'secondary',\n  },\n}",
                "rawdescription": "Secondary large rectangle avatar story",
                "description": "<p>Secondary large rectangle avatar story</p>\n"
            },
            {
                "name": "selectedOption",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(option: string) => {\n  console.log('Option selected: ', option);\n}",
                "rawdescription": "Callback to test the autocomplete directive optionSelected event",
                "description": "<p>Callback to test the autocomplete directive optionSelected event</p>\n"
            },
            {
                "name": "selectedOption",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/radio/radio.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "selectEvent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(event: any) => {\n  console.log('Select Event: ', event);\n  console.log('Form control: ', formGroup.get('selectMenu')?.value);\n}",
                "rawdescription": "Used to test if emission of output \"selectedOption\" works",
                "description": "<p>Used to test if emission of output &quot;selectedOption&quot; works</p>\n"
            },
            {
                "name": "selectMenuTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`<div [formGroup]=\"formGroup\" class=\"py-5\">\n${selectTemplate}\n</div>\n`",
                "rawdescription": "Template used to render the stories (using a formGroup)",
                "description": "<p>Template used to render the stories (using a formGroup)</p>\n"
            },
            {
                "name": "selectTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`<ui-select-menu \n  formControlName=\"selectMenu\"\n  (opened)=\"openEvent($event)\" \n  (closed)=\"closeEvent($event)\" \n  (selectedOption)=\"selectEvent($event)\" \n  [multiselect]=\"multiselect\"\n  [disabled]=\"disabled\">\n  <ui-select-option *ngFor=\"let option of options\" [value]=\"option\">\n    {{option}}\n  </ui-select-option>\n</ui-select-menu>`",
                "rawdescription": "Select with no custom template",
                "description": "<p>Select with no custom template</p>\n"
            },
            {
                "name": "separatorKeysCodes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/chip/chip.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[ENTER, COMMA]",
                "rawdescription": "Separator key codes for story testing",
                "description": "<p>Separator key codes for story testing</p>\n"
            },
            {
                "name": "SIMPLE_OPTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    label: 'A',\n  },\n  {\n    label: 'a B',\n  },\n  {\n    label: 'C',\n  },\n  {\n    label: 'D',\n  },\n]",
                "rawdescription": "Autocomplete options example",
                "description": "<p>Autocomplete options example</p>\n"
            },
            {
                "name": "SimpleAutocompletePanel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "SimpleAutocompletePanelTemplate.bind({})",
                "rawdescription": "Autocomplete panel inject in a input with simples (not grouped) options",
                "description": "<p>Autocomplete panel inject in a input with simples (not grouped) options</p>\n"
            },
            {
                "name": "SimpleAutocompletePanelTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<any>",
                "defaultValue": "(args: any) => {\n  return {\n    component: AutocompleteComponent,\n    template: `\n      <input\n        type=\"text\"\n        placeholder=\"Select a value\"\n        [uiAutocomplete]=\"auto\"\n        [autocompleteDisplayKey]=\"'label'\"\n        (opened)=\"openedAutocompletePanel()\"\n        (closed)=\"closesAutocompletePanel()\"\n        (optionSelected)=\"selectedOption($event)\"\n        class=\"relative w-full rounded-md border-0 p-1.5 shadow-sm ring-1 ring-inset sm:leading-6 focus:ring-2 focus:ring-inset\"\n      >\n      <ui-autocomplete #auto>\n      <ui-option *ngFor=\"let option of SIMPLE_OPTIONS\" [value]=\"option\">\n        {{option.label}}\n        <ng-container ngProjectsAs=\"icon\">\n        <ui-icon\n          icon=\"edit\"\n          [size]=\"18\"\n        ></ui-icon>\n        </ng-container>\n      </ui-option>\n      <ui-autocomplete>\n    `,\n    props: {\n      ...args,\n      SIMPLE_OPTIONS,\n      openedAutocompletePanel,\n      closesAutocompletePanel,\n      selectedOption,\n    },\n  };\n}",
                "rawdescription": "Simple autocomplete template",
                "description": "<p>Simple autocomplete template</p>\n"
            },
            {
                "name": "SimpleChevron",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/breadcrumbs/breadcrumbs.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<BreadcrumbsComponent>",
                "defaultValue": "{\n  args: {\n    breadcrumbs: [\n      {\n        text: 'item 0',\n        uri: '#',\n        showLabel: true,\n      },\n      {\n        text: 'item 1',\n        uri: '#',\n        showLabel: true,\n      },\n      {\n        text: 'item 2',\n        uri: '#',\n        showLabel: true,\n      },\n    ],\n    separator: 'chevron',\n    display: 'simple',\n  },\n}",
                "rawdescription": "Simple Chevron story",
                "description": "<p>Simple Chevron story</p>\n"
            },
            {
                "name": "SimpleSlash",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/breadcrumbs/breadcrumbs.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<BreadcrumbsComponent>",
                "defaultValue": "{\n  args: {\n    breadcrumbs: [\n      {\n        text: 'item 0',\n        uri: '#',\n        showLabel: true,\n      },\n      {\n        text: 'item 1',\n        uri: '#',\n        showLabel: true,\n      },\n      {\n        text: 'item 2',\n        uri: '#',\n        showLabel: true,\n      },\n    ],\n    separator: 'slash',\n    display: 'simple',\n  },\n}",
                "rawdescription": "Simple slash story",
                "description": "<p>Simple slash story</p>\n"
            },
            {
                "name": "singleSelectMenuTemplateWithTrigger",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`<div [formGroup]=\"formGroup\" class=\"py-5\">\n${customTriggerSelectTemplate}\n</div>\n`",
                "rawdescription": "Template used to render the stories (using a formGroup) and use of a ngTemplate as selectTriggerTemplate input",
                "description": "<p>Template used to render the stories (using a formGroup) and use of a ngTemplate as selectTriggerTemplate input</p>\n"
            },
            {
                "name": "Slider",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/slider/slider.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "One to fourteen slider version",
                "description": "<p>One to fourteen slider version</p>\n"
            },
            {
                "name": "sliderTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/slider/slider.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`<div [formGroup]=\"formGroup\" class=\"py-5\">\n<ui-slider formControlName=\"slider\" [minValue]=\"minValue\" [maxValue]=\"maxValue\"></ui-slider>\n</div>\n<br>\n<p>value: {{formGroup.get('slider').value}}</p>\n<p>touched: {{formGroup.get('slider').touched}}</p>\n`",
                "rawdescription": "Slider default template",
                "description": "<p>Slider default template</p>\n"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/spinner/spinner.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Small spinner",
                "description": "<p>Small spinner</p>\n"
            },
            {
                "name": "smallSpinner",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/spinner/spinner.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  size: 'small',\n}",
                "rawdescription": "Small spinner",
                "description": "<p>Small spinner</p>\n"
            },
            {
                "name": "Snackbar",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/snackbar/snackbar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "LaunchSnackbarComponent",
                "description": "<p>LaunchSnackbarComponent</p>\n"
            },
            {
                "name": "sortTableByKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/table/table.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(column: TableSort) => {\n  console.log(column);\n}",
                "rawdescription": "Console log receive table sort data",
                "description": "<p>Console log receive table sort data</p>\n"
            },
            {
                "name": "StandaloneSelection",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateStandaloneSelection.bind({})",
                "rawdescription": "Actual export of standalone select story",
                "description": "<p>Actual export of standalone select story</p>\n"
            },
            {
                "name": "StandaloneSelectionDefaultValue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateStandaloneSelectionDefaultValue.bind({})",
                "rawdescription": "Actual export of standalone select story",
                "description": "<p>Actual export of standalone select story</p>\n"
            },
            {
                "name": "statuses",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/chip/chip.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "['Active', 'Pending', 'Archived']",
                "rawdescription": "Status array for story testing",
                "description": "<p>Status array for story testing</p>\n"
            },
            {
                "name": "Table",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/table/table.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Table component",
                "description": "<p>Table component</p>\n"
            },
            {
                "name": "tableData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/table/table.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MockedTable[]",
                "defaultValue": "[\n  {\n    name: 'Name 1',\n    email: { value: 'email@email.com' },\n    phone: { value: '111111111' },\n    cityVal: 'City 1',\n    isValid: false,\n    id: '1',\n  },\n  {\n    name: 'Name 3',\n    email: { value: 'email@email.com' },\n    phone: { value: '333333333' },\n    cityVal: 'City 3',\n    isValid: true,\n    id: '3',\n  },\n  {\n    name: 'Name 2',\n    email: { value: 'email@email.com' },\n    phone: { value: '222222222' },\n    cityVal: 'City 2',\n    isValid: true,\n    id: '2',\n  },\n  {\n    name: 'Name 4',\n    email: { value: 'email@email.com' },\n    phone: { value: '444444444' },\n    cityVal: 'City 4',\n    isValid: false,\n    id: '4',\n  },\n  {\n    name: 'Name 5',\n    email: { value: 'email@email.com' },\n    phone: { value: '555555555' },\n    cityVal: 'City 5',\n    isValid: false,\n    id: '5',\n  },\n  {\n    name: 'Name 6',\n    email: { value: 'email@email.com' },\n    phone: { value: '666666666' },\n    cityVal: 'City 6',\n    isValid: true,\n    id: '6',\n  },\n  {\n    name: 'Name 1',\n    email: { value: 'email@email.com' },\n    phone: { value: '111111111' },\n    cityVal: 'City 1',\n    isValid: false,\n    id: '1',\n  },\n  {\n    name: 'Name 3',\n    email: { value: 'email@email.com' },\n    phone: { value: '333333333' },\n    cityVal: 'City 3',\n    isValid: true,\n    id: '3',\n  },\n  {\n    name: 'Name 2',\n    email: { value: 'email@email.com' },\n    phone: { value: '222222222' },\n    cityVal: 'City 2',\n    isValid: true,\n    id: '2',\n  },\n  {\n    name: 'Name 4',\n    email: { value: 'email@email.com' },\n    phone: { value: '444444444' },\n    cityVal: 'City 4',\n    isValid: false,\n    id: '4',\n  },\n  {\n    name: 'Name 5',\n    email: { value: 'email@email.com' },\n    phone: { value: '555555555' },\n    cityVal: 'City 5',\n    isValid: false,\n    id: '5',\n  },\n  {\n    name: 'Name 6',\n    email: { value: 'email@email.com' },\n    phone: { value: '666666666' },\n    cityVal: 'City 6',\n    isValid: true,\n    id: '6',\n  },\n  {\n    name: 'Name 1',\n    email: { value: 'email@email.com' },\n    phone: { value: '111111111' },\n    cityVal: 'City 1',\n    isValid: false,\n\n    id: '1',\n  },\n  {\n    name: 'Name 3',\n    email: { value: 'email@email.com' },\n    phone: { value: '333333333' },\n    cityVal: 'City 3',\n    isValid: true,\n    id: '3',\n  },\n  {\n    name: 'Name 2',\n    email: { value: 'email@email.com' },\n    phone: { value: '222222222' },\n    cityVal: 'City 2',\n    isValid: true,\n    id: '2',\n  },\n  {\n    name: 'Name 4',\n    email: { value: 'email@email.com' },\n    phone: { value: '444444444' },\n    cityVal: 'City 4',\n    isValid: false,\n    id: '4',\n  },\n  {\n    name: 'Name 5',\n    email: { value: 'email@email.com' },\n    phone: { value: '555555555' },\n    cityVal: 'City 5',\n    isValid: false,\n    id: '5',\n  },\n  {\n    name: 'Name 6',\n    email: { value: 'email@email.com' },\n    phone: { value: '666666666' },\n    cityVal: 'City 6',\n    isValid: true,\n    id: '6',\n  },\n]",
                "rawdescription": "Mocked table data",
                "description": "<p>Mocked table data</p>\n"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<StoryType>",
                "defaultValue": "(args: StoryType) => {\n  return {\n    template: `\n      <ui-button\n        (click)=\"testClick()\"\n        [disabled]=\"${args.disabled}\"\n        icon=\"${args.icon}\"\n        iconPosition=\"${args.iconPosition}\"\n        [loading]=\"${args.loading}\"\n        [isIcon]=\"${args.isIcon}\"\n        [size]=\"'${args.size}'\"\n        [variant]=\"'${args.variant}'\"\n        [category]=\"'${args.category}'\"\n      >\n        ${args.label}\n      </ui-button>\n    `,\n    props: {\n      ...args,\n      testClick,\n    },\n  };\n}",
                "rawdescription": "Template button",
                "description": "<p>Template button</p>\n"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/checkbox/checkbox.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<CheckboxComponent>",
                "defaultValue": "(args: CheckboxComponent) => {\n  args.variant = 'default';\n  return {\n    component: CheckboxComponent,\n    template: `\n      <ui-checkbox [variant]=\"'${args.variant}'\">\n      <ng-container ngProjectAs=\"label\">Checkbox text</ng-container>\n      <ng-container ngProjectAs=\"description\">Description text text text.</ng-container>\n      <ng-container ngProjectAs=\"icon\">\n      <ui-icon\n      icon=\"info_outline\"\n      [inline]=\"true\"\n      [size]=\"18\"\n      variant=\"grey\"\n    ></ui-icon>\n      </ng-container>\n      </ui-checkbox>\n        `,\n    props: {\n      ...args,\n    },\n  };\n}",
                "rawdescription": "Template checkbox",
                "description": "<p>Template checkbox</p>\n"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/dialog/dialog.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<LaunchDialogComponent>",
                "defaultValue": "(\n  args: LaunchDialogComponent\n) => ({\n  props: args,\n})",
                "rawdescription": "Template launchDialog",
                "description": "<p>Template launchDialog</p>\n"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/expansion-panel/expansion-panel.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<ExpansionPanelComponent>",
                "defaultValue": "(\n  args: ExpansionPanelComponent\n) => {\n  return {\n    component: ExpansionPanelComponent,\n    template: `\n      <cdk-accordion>\n        <ui-expansion-panel \n          *ngFor=\"let panel of panelOptions; let i = index;\" \n          [disabled]=\"${args.disabled}\" \n          [displayIcon]=\"${args.displayIcon}\" \n          [expanded]=\"panel.expanded\"\n          [index]=\"i\"\n          (closePanel)=\"onClose()\"\n        >\n          <ng-container ngProjectAs=\"title\">\n            {{panel.title}}\n          </ng-container>\n          <p class=\"mb-2 text-gray-500\">{{panel.text}}</p>\n        </ui-expansion-panel>\n      </cdk-accordion>\n    `,\n    props: {\n      ...args,\n      panelOptions,\n      onClose,\n    },\n  };\n}",
                "rawdescription": "Template expansion panel group",
                "description": "<p>Template expansion panel group</p>\n"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<any>",
                "defaultValue": "(args: any) => {\n  return {\n    template: `<div uiFormFieldDirective [outline]=\"${args.outline}\">\n    <label>Phone Number</label>\n    <input type=\"text\" name=\"account-number\" id=\"account-number\" placeholder=\"000-00-0000\"/>\n    <ui-spinner [size]=\"'medium'\" uiSuffix></ui-spinner>\n    <ui-icon icon=\"search\" uiPrefix></ui-icon>\n  </div>`,\n    props: {\n      ...args,\n    },\n  };\n}",
                "rawdescription": "Template to create form wrapper component's story",
                "description": "<p>Template to create form wrapper component&#39;s story</p>\n"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/icon/icon.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<IconComponent>",
                "defaultValue": "(args: IconComponent) => ({\n  props: args,\n})",
                "rawdescription": "Icon component template",
                "description": "<p>Icon component template</p>\n"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/paginator/paginator.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<PaginatorComponent>",
                "defaultValue": "(args: PaginatorComponent) => {\n  return {\n    component: PaginatorComponent,\n    template: `\n    <div class=\"overflow-y-auto max-h-70\">\n      <ng-container *ngFor=\"let item of pagedItems\">\n        <p>{{item}}</p>\n      </ng-container>\n    </div>\n    <ui-paginator [disabled]=\"${args.disabled}\" (pageChange)=\"pageChange($event)\" [totalItems]=\"itemsArray.length\" ></ui-paginator>\n        `,\n    props: {\n      ...args,\n      itemsArray,\n      pagedItems,\n      pageChange,\n    },\n  };\n}",
                "rawdescription": "Paginator template",
                "description": "<p>Paginator template</p>\n"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/radio/radio.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<RadioComponent>",
                "defaultValue": "(args: RadioComponent) => {\n  args.name = 'notification-method';\n  return {\n    component: RadioComponent,\n    template: `<div class=\"space-y-4\" (groupValueChange)=\"getRadioChangeSelection($event)\" [uiRadioGroupDirective]=\"'${args.name}'\">\n    <ui-radio *ngFor=\"let option of radioOptions; let i = index\" [checked]=\"i === 0\" [disabled]=\"${args.disabled}\" [variant]=\"'${args.variant}'\" [value]=\"option.value\">\n      <ng-container ngProjectAs=\"label\">{{option.label}}</ng-container>\n    </ui-radio>\n    </div>\n    <br>\n    <p>value: {{selectedOption}}</p>`,\n    props: {\n      ...args,\n      radioOptions,\n      getRadioChangeSelection,\n      selectedOption,\n    },\n  };\n}",
                "rawdescription": "Template radio group",
                "description": "<p>Template radio group</p>\n"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/slider/slider.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SliderComponent>",
                "defaultValue": "(args: SliderComponent) => {\n  args.minValue = 1;\n  args.maxValue = 14;\n  return {\n    component: SliderComponent,\n    template: sliderTemplate,\n    props: {\n      ...args,\n      formGroup,\n    },\n  };\n}",
                "rawdescription": "Template for storybook's test of the component",
                "description": "<p>Template for storybook&#39;s test of the component</p>\n"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/snackbar/snackbar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<LaunchSnackbarComponent>",
                "defaultValue": "(\n  args: LaunchSnackbarComponent\n) => ({\n  props: args,\n})",
                "rawdescription": "Template LaunchSnackbarComponent",
                "description": "<p>Template LaunchSnackbarComponent</p>\n"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/spinner/spinner.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<SpinnerComponent>",
                "defaultValue": "(args: SpinnerComponent) => ({\n  props: args,\n})",
                "rawdescription": "Template spinner",
                "description": "<p>Template spinner</p>\n"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/table/table.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<any>",
                "defaultValue": "(args: any) => {\n  const pagedTableData = tableData.filter((el, index) => index < 10);\n  return {\n    template: `\n    <!--TABLE CONTENT-->\n<table\n  cdk-table \n  uiTableWrapper\n  (sortChange)=\"sortTableByKey($event)\"\n  [dataSource]=\"pagedTableData\"\n>\n  <ng-container cdkColumnDef=\"name\">\n    <th\n    uiTableHeaderSort=\"name\"\n      uiCellHeader\n      *cdkHeaderCellDef\n      scope=\"col\"\n      \n    >\n      name\n    </th>\n    <td uiCell *cdkCellDef=\"let element\">\n      {{ element.name }}\n    </td>\n  </ng-container>\n\n  <ng-container cdkColumnDef=\"email\">\n    <th\n      uiCellHeader\n      *cdkHeaderCellDef\n      scope=\"col\"\n      \n    >\n      email\n    </th>\n    <td uiCell *cdkCellDef=\"let element\">\n      {{ element.email.value }}\n    </td>\n  </ng-container>\n\n  <ng-container cdkColumnDef=\"phone\">\n    <th\n    uiTableHeaderSort=\"phone\"\n      uiCellHeader\n      *cdkHeaderCellDef\n      scope=\"col\"\n      \n    >\n      phone\n    </th>\n    <td uiCell *cdkCellDef=\"let element\">\n      {{ element.phone.value }}\n    </td>\n  </ng-container>\n\n  <ng-container cdkColumnDef=\"city\">\n    <th\n    uiTableHeaderSort=\"cityVal\"\n      uiCellHeader\n      *cdkHeaderCellDef\n      scope=\"col\"\n      \n    >\n      city\n    </th>\n    <td uiCell *cdkCellDef=\"let element\">\n      {{ element.cityVal }}\n    </td>\n  </ng-container>\n\n  <ng-container cdkColumnDef=\"active\">\n    <th\n      uiCellHeader\n      *cdkHeaderCellDef\n      scope=\"col\"\n      \n    >\n      active\n    </th>\n    <td uiCell *cdkCellDef=\"let element\">\n    <div class=\"flex items-center justify-end gap-x-2 sm:justify-start\">\n    <div [ngClass]=\"{'text-rose-400 bg-rose-400/10': !element.isValid, 'text-green-400 bg-green-400/10': element.isValid}\" class=\"flex-none rounded-full p-1\">\n      <div class=\"h-1.5 w-1.5 rounded-full bg-current\"></div>\n    </div>\n    <div class=\"text-neutral sm:block\">{{element.isValid ? 'Completed' : 'Error' }}</div>\n  </div>\n    </td>\n  </ng-container>\n\n  <ng-container cdkColumnDef=\"selected\">\n    <th\n      uiCellHeader\n      *cdkHeaderCellDef\n      scope=\"col\"\n      \n    >\n      selected\n    </th>\n    <td uiCell *cdkCellDef=\"let element\">\n      <ui-toggle></ui-toggle>\n    </td>\n  </ng-container>\n\n  <ng-container cdkColumnDef=\"id\">\n    <th\n      uiCellHeader\n      *cdkHeaderCellDef\n      scope=\"col\"\n      \n    >\n      id\n    </th>\n    <td uiCell *cdkCellDef=\"let element\">\n      {{ element.id }}\n    </td>\n  </ng-container>\n  <tr cdk-header-row *cdkHeaderRowDef=\"columnDefinitionArray\"></tr>\n  <tr cdk-row *cdkRowDef=\"let row; columns: columnDefinitionArray\"></tr>\n</table>`,\n    props: {\n      ...args,\n      pagedTableData,\n      sortTableByKey,\n      columnDefinitionArray,\n    },\n  };\n}",
                "rawdescription": "Template divider for table",
                "description": "<p>Template divider for table</p>\n"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/textarea/textarea.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<TextareaComponent>",
                "defaultValue": "(args: TextareaComponent) => ({\n  props: args,\n})",
                "rawdescription": "Template textarea",
                "description": "<p>Template textarea</p>\n"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/tooltip/tooltip.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TooltipComponent>",
                "defaultValue": "(args: TooltipComponent) => ({\n  props: args,\n})",
                "rawdescription": "Template for storybook's test of the directive",
                "description": "<p>Template for storybook&#39;s test of the directive</p>\n"
            },
            {
                "name": "TemplateAutocomplete",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<any>",
                "defaultValue": "(args: any) => {\n  return {\n    template: `\n    <div [formGroup]=\"formControl\">\n      <div uiFormFieldDirective  [outline]=\"${args.outline}\">\n        <label>Choose language</label>\n        <input\n          formControlName=\"name\"\n          type=\"text\"\n          placeholder=\"Select a value\"\n          [uiAutocomplete]=\"auto\"\n          (optionSelected)=\"selectedOption($event)\"\n        >\n        <ui-autocomplete #auto>\n          <ui-option *ngFor=\"let option of options\" [value]=\"option\">\n            {{option}}\n            <ng-container ngProjectsAs=\"icon\">\n              <ui-icon\n                [icon]=\"'edit'\"\n                [size]=\"18\"\n              ></ui-icon>\n            </ng-container>\n          </ui-option>\n        </ui-autocomplete>\n        <ui-spinner [size]=\"'medium'\" uiSuffix></ui-spinner>\n        <ui-icon icon=\"search\" uiPrefix></ui-icon>\n    </div>\n  </div>\n  <ui-button (click)=\"toggleDisabled()\">\n    Enable/disabled\n  </ui-button>\n  `,\n    props: {\n      ...args,\n      options,\n      toggleDisabled,\n      formControl,\n    },\n  };\n}",
                "rawdescription": "Template to create form wrapper component's story using autocomplete",
                "description": "<p>Template to create form wrapper component&#39;s story using autocomplete</p>\n"
            },
            {
                "name": "TemplateDisabledSelection",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<SelectMenuComponent>",
                "defaultValue": "(\n  args: SelectMenuComponent\n) => {\n  args.disabled = true;\n  return {\n    component: SelectMenuComponent,\n    template: selectMenuTemplate,\n    props: {\n      ...args,\n      options,\n      formGroup,\n      selectEvent,\n      openEvent,\n      closeEvent,\n    },\n  };\n}",
                "rawdescription": "Template for disabled selection select menu",
                "description": "<p>Template for disabled selection select menu</p>\n"
            },
            {
                "name": "TemplateMulti",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/expansion-panel/expansion-panel.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<ExpansionPanelComponent>",
                "defaultValue": "(\n  args: ExpansionPanelComponent\n) => {\n  args.displayIcon = true;\n  return {\n    component: ExpansionPanelComponent,\n    template: `\n      <cdk-accordion [multi]=\"true\">\n        <ui-expansion-panel \n          *ngFor=\"let panel of panelOptions; let i = index;\" \n          [disabled]=\"${args.disabled}\" \n          [displayIcon]=\"${args.displayIcon}\" \n          [expanded]=\"panel.expanded\"\n          [index]=\"i\"\n          (closePanel)=\"onClose()\"\n        >\n          <ng-container ngProjectAs=\"title\">\n            {{panel.title}}\n          </ng-container>\n          <p class=\"mb-2 text-gray-500\" >{{panel.text}}</p>\n        </ui-expansion-panel>\n      </cdk-accordion>\n    `,\n    props: {\n      ...args,\n      panelOptions,\n      onClose,\n    },\n  };\n}",
                "rawdescription": "Template multi expansion panel group",
                "description": "<p>Template multi expansion panel group</p>\n"
            },
            {
                "name": "TemplateMultiSelection",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<SelectMenuComponent>",
                "defaultValue": "(\n  args: SelectMenuComponent\n) => {\n  args.multiselect = true;\n  formGroup.get('selectMenu')?.setValue([options[0], options[1]]);\n  return {\n    component: SelectMenuComponent,\n    template: formControlSelectTemplate,\n    props: {\n      ...args,\n      options,\n      formGroup,\n      selectEvent,\n      openEvent,\n      closeEvent,\n    },\n  };\n}",
                "rawdescription": "Template for multi selection select menu",
                "description": "<p>Template for multi selection select menu</p>\n"
            },
            {
                "name": "TemplateRefSelection",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateTemplateRefSelection.bind({})",
                "rawdescription": "Actual export of select story using ngTemplate as input",
                "description": "<p>Actual export of select story using ngTemplate as input</p>\n"
            },
            {
                "name": "TemplateSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<any>",
                "defaultValue": "(args: any) => {\n  return {\n    template: `<div uiFormFieldDirective [outline]=\"${args.outline}\">\n    <label>Choose language</label>\n    <ui-select-menu \n      [multiselect]=\"false\"\n      [disabled]=\"false\">\n        <ui-select-option *ngFor=\"let option of options\" [value]=\"option\">\n          {{option}}\n        </ui-select-option>\n    </ui-select-menu>\n    <ui-spinner [size]=\"'medium'\" uiSuffix></ui-spinner>\n    <ui-icon icon=\"search\" uiPrefix></ui-icon>\n  </div>`,\n    props: {\n      ...args,\n      options,\n    },\n  };\n}",
                "rawdescription": "Template to create form wrapper component's story using select menu",
                "description": "<p>Template to create form wrapper component&#39;s story using select menu</p>\n"
            },
            {
                "name": "TemplateStandaloneSelection",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<SelectMenuComponent>",
                "defaultValue": "(\n  args: SelectMenuComponent\n) => {\n  formGroup.get('selectMenu')?.setValue([]);\n  return {\n    component: SelectMenuComponent,\n    template: selectMenuTemplate,\n    props: {\n      ...args,\n      options,\n      formGroup,\n      selectEvent,\n      openEvent,\n      closeEvent,\n    },\n  };\n}",
                "rawdescription": "Template for standalone selection select menu",
                "description": "<p>Template for standalone selection select menu</p>\n"
            },
            {
                "name": "TemplateStandaloneSelectionDefaultValue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<SelectMenuComponent>",
                "defaultValue": "(\n  args: SelectMenuComponent\n) => {\n  formGroup.get('selectMenu')?.setValue([options[0]]);\n  return {\n    component: SelectMenuComponent,\n    template: formControlSelectTemplate,\n    props: {\n      ...args,\n      options,\n      formGroup,\n      selectEvent,\n      openEvent,\n      closeEvent,\n    },\n  };\n}",
                "rawdescription": "Template for standalone selection default value select menu",
                "description": "<p>Template for standalone selection default value select menu</p>\n"
            },
            {
                "name": "TemplateTemplateRefSelection",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<SelectMenuComponent>",
                "defaultValue": "(\n  args: SelectMenuComponent\n) => {\n  formGroup.get('selectMenu')?.setValue([options[0]]);\n  return {\n    component: SelectMenuComponent,\n    template: singleSelectMenuTemplateWithTrigger,\n    props: {\n      ...args,\n      options,\n      formGroup,\n      selectEvent,\n      openEvent,\n      closeEvent,\n    },\n  };\n}",
                "rawdescription": "Template for single select menu using a ngTemplate as input",
                "description": "<p>Template for single select menu using a ngTemplate as input</p>\n"
            },
            {
                "name": "Tertiary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Tertiary button",
                "description": "<p>Tertiary button</p>\n"
            },
            {
                "name": "tertiaryButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  label: 'Tertiary button',\n  category: 'tertiary',\n  variant: 'default',\n  size: 'medium',\n  icon: '',\n}",
                "rawdescription": "Tertiary button",
                "description": "<p>Tertiary button</p>\n"
            },
            {
                "name": "TertiaryCircleAvatarLarge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<AvatarComponent>",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    shape: 'circle',\n    initials: '',\n    image: '',\n    variant: 'tertiary',\n  },\n}",
                "rawdescription": "Tertiary large circle avatar story",
                "description": "<p>Tertiary large circle avatar story</p>\n"
            },
            {
                "name": "TertiaryRectangleAvatarLarge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<AvatarComponent>",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    shape: 'rectangle',\n    initials: '',\n    image: '',\n    variant: 'tertiary',\n  },\n}",
                "rawdescription": "Tertiary large rectangle avatar story",
                "description": "<p>Tertiary large rectangle avatar story</p>\n"
            },
            {
                "name": "testClick",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => window.alert('Should not show if disabled!!')",
                "rawdescription": "Disable click test",
                "description": "<p>Disable click test</p>\n"
            },
            {
                "name": "today",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/date/date-range/date-range.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Date()",
                "rawdescription": "Today date",
                "description": "<p>Today date</p>\n"
            },
            {
                "name": "toggleDisabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {\n  if (formControl.disabled) {\n    formControl.enable();\n  } else {\n    formControl.disable();\n  }\n}",
                "rawdescription": "Callback to test story with disable option",
                "description": "<p>Callback to test story with disable option</p>\n"
            },
            {
                "name": "TogglePanel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/expansion-panel/expansion-panel.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Toggle expansion panel",
                "description": "<p>Toggle expansion panel</p>\n"
            },
            {
                "name": "TopExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/tooltip/tooltip.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Top centered element",
                "description": "<p>Top centered element</p>\n"
            },
            {
                "name": "TopLeftExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/tooltip/tooltip.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Top left element",
                "description": "<p>Top left element</p>\n"
            },
            {
                "name": "TopRightExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/tooltip/tooltip.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})",
                "rawdescription": "Top right element",
                "description": "<p>Top right element</p>\n"
            },
            {
                "name": "VariantsList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "AllButtonsTemplate.bind({})",
                "rawdescription": "All buttons",
                "description": "<p>All buttons</p>\n"
            },
            {
                "name": "Vertical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/divider/divider.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<DividerComponent>",
                "defaultValue": "{\n  args: {\n    position: 'center',\n    orientation: 'vertical',\n  },\n}",
                "rawdescription": "Vertical divider",
                "description": "<p>Vertical divider</p>\n"
            },
            {
                "name": "Vertical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui/src/lib/tabs/tabs.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<TabsComponent>",
                "defaultValue": "{\n  args: {\n    vertical: true,\n  },\n}",
                "rawdescription": "Vertical story",
                "description": "<p>Vertical story</p>\n"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "MockedAvatar",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "libs/ui/src/lib/avatar-group/avatar-group.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "MockedTable",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "libs/ui/src/lib/table/table.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "PanelOption",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "libs/ui/src/lib/expansion-panel/expansion-panel.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "RadioOption",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "libs/ui/src/lib/radio/radio.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "StoryType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "libs/ui/src/lib/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "StoryType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "libs/ui/src/lib/avatar-group/avatar-group.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "StoryType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "libs/ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "libs/ui/src/lib/chip/chip.component.stories.ts": [
                {
                    "name": "addChipsFromInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/chip/chip.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(chips: string[] | string) => {\n  if (chips instanceof Array) {\n    statuses = statuses.concat([...chips]);\n  } else {\n    statuses.push(chips);\n  }\n  formControl.setValue(statuses);\n}",
                    "rawdescription": "Callback to test the chip input directive change event",
                    "description": "<p>Callback to test the chip input directive change event</p>\n"
                },
                {
                    "name": "ChipsInputTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/chip/chip.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<ChipComponent>",
                    "defaultValue": "(args: ChipComponent) => {\n  return {\n    component: ChipComponent,\n    template: `\n      <div uiChipList [formControl]=\"formControl\" #chipList>\n        <ui-chip\n          [removable]=\"${args.removable}\"\n          [disabled]=\"${args.disabled}\"\n          [variant]=\"'${args.variant}'\"\n          [value]=\"status\"\n          *ngFor=\"let status of statuses; let i = index\"\n          (removed)=\"removeStatus(i)\"\n        >\n          {{ status }}\n        </ui-chip>\n      </div>\n      <input\n        placeholder=\"New status...\"\n        [uiChipListFor]=\"chipList\"\n        [chipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n        (chipTokenEnd)=\"addChipsFromInput($event)\"\n        >\n        <br>\n        <p>value: <span *ngFor=\"let val of formControl.value;let last = last\">{{val}} <span *ngIf=\"!last\">, </span></span></p>\n        <p>touched: {{formControl.touched}}</p>\n        `,\n    props: {\n      ...args,\n      statuses,\n      formControl,\n      removeStatus,\n      addChipsFromInput,\n      separatorKeysCodes,\n    },\n  };\n}",
                    "rawdescription": "Template chip list with input",
                    "description": "<p>Template chip list with input</p>\n"
                },
                {
                    "name": "ChipVariants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/chip/chip.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ChipVariantsTemplate.bind({})",
                    "rawdescription": "Chips variants demonstration",
                    "description": "<p>Chips variants demonstration</p>\n"
                },
                {
                    "name": "ChipVariantsTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/chip/chip.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<ChipComponent>",
                    "defaultValue": "(args: ChipComponent) => {\n  return {\n    component: ChipComponent,\n    template: `\n      <div class=\"flex gap-1\">\n        <ui-chip variant=\"default\" [removable]=\"true\"> Default </ui-chip>\n        <ui-chip variant=\"primary\" [removable]=\"true\"> Primary </ui-chip>\n        <ui-chip variant=\"success\" [removable]=\"true\"> Success </ui-chip>\n        <ui-chip variant=\"danger\" [removable]=\"true\"> Danger </ui-chip>\n        <ui-chip variant=\"danger\" [removable]=\"true\" [disabled]=\"true\"> Disabled </ui-chip>\n      </div>\n    `,\n    props: {\n      ...args,\n    },\n  };\n}",
                    "rawdescription": "Template chip variants",
                    "description": "<p>Template chip variants</p>\n"
                },
                {
                    "name": "ChipWithInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/chip/chip.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ChipsInputTemplate.bind({})",
                    "rawdescription": "Chip list with input",
                    "description": "<p>Chip list with input</p>\n"
                },
                {
                    "name": "formControl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/chip/chip.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FormControl()",
                    "rawdescription": "Form control to test chip story",
                    "description": "<p>Form control to test chip story</p>\n"
                },
                {
                    "name": "removeStatus",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/chip/chip.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(index: number) => {\n  statuses.splice(index, 1);\n}",
                    "rawdescription": "Callback to test the chip remove event",
                    "description": "<p>Callback to test the chip remove event</p>\n"
                },
                {
                    "name": "separatorKeysCodes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/chip/chip.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[ENTER, COMMA]",
                    "rawdescription": "Separator key codes for story testing",
                    "description": "<p>Separator key codes for story testing</p>\n"
                },
                {
                    "name": "statuses",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/chip/chip.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "['Active', 'Pending', 'Archived']",
                    "rawdescription": "Status array for story testing",
                    "description": "<p>Status array for story testing</p>\n"
                }
            ],
            "libs/ui/src/lib/date/date-range/date-range.component.stories.ts": [
                {
                    "name": "afterTomorrow",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/date/date-range/date-range.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Date()",
                    "rawdescription": "After tomorrow date",
                    "description": "<p>After tomorrow date</p>\n"
                },
                {
                    "name": "BottomDateRange",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/date/date-range/date-range.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "BottomDateRangeTemplate.bind({})",
                    "rawdescription": "Date range bottom",
                    "description": "<p>Date range bottom</p>\n"
                },
                {
                    "name": "BottomDateRangeTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/date/date-range/date-range.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<DateRangeComponent>",
                    "defaultValue": "(\n  args: DateRangeComponent\n) => {\n  return {\n    component: DateRangeComponent,\n    template: `\n    <div class=\"absolute\">\n    <p>start value: {{formControlStart.value}}</p>\n    <p>end value: {{formControlEnd.value}}</p>\n    </div>\n    <div class=\"flex flex-col h-screen justify-end\">\n    <div [uiDateWrapper]=\"calendar\">\n    <input [uiDatePicker] [formControl]=\"formControlStart\" [label]=\"'Select a start date'\"/>\n    <input [uiDatePicker] [formControl]=\"formControlEnd\" [label]=\"'Select a end date'\"/>\n      <ui-date-range #calendar>\n      </ui-date-range> \n      </div>\n      </div>\n      `,\n    props: {\n      ...args,\n      formControlStart,\n      formControlEnd,\n    },\n  };\n}",
                    "rawdescription": "Date range bottom template",
                    "description": "<p>Date range bottom template</p>\n"
                },
                {
                    "name": "DateRange",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/date/date-range/date-range.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "DateRangeTemplate.bind({})",
                    "rawdescription": "Date range",
                    "description": "<p>Date range</p>\n"
                },
                {
                    "name": "DateRangeTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/date/date-range/date-range.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<DateRangeComponent>",
                    "defaultValue": "(\n  args: DateRangeComponent\n) => {\n  return {\n    component: DateRangeComponent,\n    template: `\n    <div [uiDateWrapper]=\"calendar\">\n    <input [uiDatePicker] [formControl]=\"formControlStart\" [label]=\"'Select a start date'\"/>\n    <input [uiDatePicker] [formControl]=\"formControlEnd\" [label]=\"'Select a end date'\"/>\n      <ui-date-range #calendar>\n      </ui-date-range> \n      </div>\n      <br>\n      <p>start value: {{formControlStart.value}}</p>\n      <p>end value: {{formControlEnd.value}}</p>`,\n    props: {\n      ...args,\n      formControlStart,\n      formControlEnd,\n    },\n  };\n}",
                    "rawdescription": "Date range template",
                    "description": "<p>Date range template</p>\n"
                },
                {
                    "name": "formControlEnd",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/date/date-range/date-range.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FormControl(\n  afterTomorrow.setDate(today.getDate() + 2)\n)",
                    "rawdescription": "FormControl for end date",
                    "description": "<p>FormControl for end date</p>\n"
                },
                {
                    "name": "formControlStart",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/date/date-range/date-range.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FormControl(today)",
                    "rawdescription": "FormControl for start date",
                    "description": "<p>FormControl for start date</p>\n"
                },
                {
                    "name": "today",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/date/date-range/date-range.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Date()",
                    "rawdescription": "Today date",
                    "description": "<p>Today date</p>\n"
                }
            ],
            "libs/ui/src/lib/button/button.component.stories.ts": [
                {
                    "name": "allButtons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  size: 'medium',\n}",
                    "rawdescription": "Tertiary button",
                    "description": "<p>Tertiary button</p>\n"
                },
                {
                    "name": "AllButtonsTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<StoryType>",
                    "defaultValue": "(args: StoryType) => {\n  return {\n    template: `\n      <h1 class=\"text-lg mb-4\">Grouped by variant</h1>\n      <div class=\"flex flex-wrap gap-4\">\n        <div class=\"border rounded-lg\" *ngFor=\"let variant of configurations\">\n          <h2 class=\"w-full text-center border-b py-2\">{{variant.title}}</h2>\n          <div class=\"flex gap-2 p-4\">\n            <ui-button\n              *ngFor=\"let btn of variant.items\"\n              [variant]=\"btn.variant\"\n              [category]=\"btn.category\"\n              [disabled]=\"btn.disabled\"\n              [title]=\"btn.category\"\n              [size]=\"'${args.size}'\"\n            >\n              {{btn.text}}\n            </ui-button>\n          </div>\n        </div>\n      </div>\n    `,\n    props: {\n      configurations,\n    },\n  };\n}",
                    "rawdescription": "Template button",
                    "description": "<p>Template button</p>\n"
                },
                {
                    "name": "configurations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    title: 'Default',\n    items: categories.map((category) => ({\n      variant: 'default',\n      category: category,\n      text: 'default',\n    })),\n  },\n  {\n    title: 'Primary',\n    items: categories.map((category) => ({\n      variant: 'primary',\n      category: category,\n      text: 'primary',\n    })),\n  },\n  {\n    title: 'Success',\n    items: categories.map((category) => ({\n      variant: 'success',\n      category: category,\n      text: 'success',\n    })),\n  },\n  {\n    title: 'Danger',\n    items: categories.map((category) => ({\n      variant: 'danger',\n      category: category,\n      text: 'danger',\n    })),\n  },\n  {\n    title: 'Grey',\n    items: categories.map((category) => ({\n      variant: 'grey',\n      category: category,\n      text: 'grey',\n    })),\n  },\n  {\n    title: 'Light',\n    items: categories.map((category) => ({\n      variant: 'light',\n      category: category,\n      text: 'light',\n    })),\n  },\n  {\n    title: 'Warning',\n    items: categories.map((category) => ({\n      variant: 'warning',\n      category: category,\n      text: 'warning',\n    })),\n  },\n  {\n    title: 'Disabled',\n    items: categories.map((category) => ({\n      variant: 'primary',\n      category: category,\n      text: 'disabled',\n      disabled: true,\n    })),\n  },\n]",
                    "rawdescription": "List of all available buttons",
                    "description": "<p>List of all available buttons</p>\n"
                },
                {
                    "name": "individualBtnArgs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "{\n  category: {\n    options: categories,\n    control: {\n      type: 'select',\n    },\n  },\n  variant: {\n    options: variants,\n    control: {\n      type: 'select',\n    },\n    defaultValue: 'default',\n  },\n  iconPosition: {\n    options: buttonIconPositions,\n    control: {\n      type: 'select',\n    },\n    defaultValue: 'prefix',\n  },\n  icon: {\n    control: 'text',\n    defaultValue: '',\n  },\n  isIcon: {\n    control: {\n      type: 'boolean',\n    },\n    defaultValue: false,\n  },\n  loading: {\n    control: {\n      type: 'boolean',\n    },\n    defaultValue: false,\n  },\n  disabled: {\n    control: {\n      type: 'boolean',\n    },\n    defaultValue: false,\n  },\n} as Meta<StoryType>",
                    "rawdescription": "ArgTypes for individual button stories",
                    "description": "<p>ArgTypes for individual button stories</p>\n"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Primary button",
                    "description": "<p>Primary button</p>\n"
                },
                {
                    "name": "primaryButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  label: 'Primary button',\n  category: 'primary',\n  variant: 'default',\n  size: 'medium',\n  icon: '',\n}",
                    "rawdescription": "Primary button",
                    "description": "<p>Primary button</p>\n"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Secondary button",
                    "description": "<p>Secondary button</p>\n"
                },
                {
                    "name": "secondaryButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  label: 'Secondary button',\n  category: 'secondary',\n  variant: 'default',\n  size: 'medium',\n  icon: '',\n}",
                    "rawdescription": "Secondary button",
                    "description": "<p>Secondary button</p>\n"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<StoryType>",
                    "defaultValue": "(args: StoryType) => {\n  return {\n    template: `\n      <ui-button\n        (click)=\"testClick()\"\n        [disabled]=\"${args.disabled}\"\n        icon=\"${args.icon}\"\n        iconPosition=\"${args.iconPosition}\"\n        [loading]=\"${args.loading}\"\n        [isIcon]=\"${args.isIcon}\"\n        [size]=\"'${args.size}'\"\n        [variant]=\"'${args.variant}'\"\n        [category]=\"'${args.category}'\"\n      >\n        ${args.label}\n      </ui-button>\n    `,\n    props: {\n      ...args,\n      testClick,\n    },\n  };\n}",
                    "rawdescription": "Template button",
                    "description": "<p>Template button</p>\n"
                },
                {
                    "name": "Tertiary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Tertiary button",
                    "description": "<p>Tertiary button</p>\n"
                },
                {
                    "name": "tertiaryButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  label: 'Tertiary button',\n  category: 'tertiary',\n  variant: 'default',\n  size: 'medium',\n  icon: '',\n}",
                    "rawdescription": "Tertiary button",
                    "description": "<p>Tertiary button</p>\n"
                },
                {
                    "name": "testClick",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => window.alert('Should not show if disabled!!')",
                    "rawdescription": "Disable click test",
                    "description": "<p>Disable click test</p>\n"
                },
                {
                    "name": "VariantsList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "AllButtonsTemplate.bind({})",
                    "rawdescription": "All buttons",
                    "description": "<p>All buttons</p>\n"
                }
            ],
            "libs/ui/src/lib/icon/icon.component.stories.ts": [
                {
                    "name": "AllIconsTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/icon/icon.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<any>",
                    "defaultValue": "(args: any) => {\n  return {\n    template: `\n      <div class=\"h-screen pb-20\">\n        <h1 class=\"text-lg mb-4\">List of all icons</h1>\n        <div class=\"flex flex-wrap gap-4 overflow-auto max-h-full\">\n          <div class=\"border rounded-lg flex items-center\" *ngFor=\"let icon of MAT_ICON_LIST\">\n              <ui-icon\n                class=\"p-4 border-r bg-gray-100 rounded-l-lg\"\n                [icon]=\"icon\"\n                variant=\"${args.variant}\"\n                [size]=\"${args.size}\"\n              ></ui-icon>\n              <h2 class=\"w-full text-center px-4\">{{icon}}</h2>\n          </div>\n        </div>\n      </div>`,\n    props: {\n      MAT_ICON_LIST,\n    },\n  };\n}",
                    "rawdescription": "Template for all icons",
                    "description": "<p>Template for all icons</p>\n"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/icon/icon.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Primary icon component",
                    "description": "<p>Primary icon component</p>\n"
                },
                {
                    "name": "IconList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/icon/icon.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "AllIconsTemplate.bind({})",
                    "rawdescription": "All icons",
                    "description": "<p>All icons</p>\n"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/icon/icon.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<IconComponent>",
                    "defaultValue": "(args: IconComponent) => ({\n  props: args,\n})",
                    "rawdescription": "Icon component template",
                    "description": "<p>Icon component template</p>\n"
                }
            ],
            "libs/ui/src/lib/avatar-group/avatar-group.component.stories.ts": [
                {
                    "name": "avatars",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/avatar-group/avatar-group.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockedAvatar[]",
                    "defaultValue": "[\n  {\n    size: 'large',\n    variant: 'tertiary',\n    image: '',\n    shape: 'circle',\n    initials: 'JL',\n  },\n  {\n    size: 'large',\n    variant: 'tertiary',\n    image:\n      'https://images.unsplash.com/photo-1491528323818-fdd1faba62cc?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80',\n    shape: 'circle',\n    initials: 'PM',\n  },\n  {\n    size: 'large',\n    variant: 'secondary',\n    image:\n      'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2.25&w=256&h=256&q=80',\n    shape: 'circle',\n    initials: '',\n  },\n  {\n    size: 'large',\n    variant: 'secondary',\n    image:\n      'https://images.unsplash.com/photo-1550525811-e5869dd03032?ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80',\n    shape: 'rectangle',\n    initials: '',\n  },\n]",
                    "rawdescription": "Mocked avatar array",
                    "description": "<p>Mocked avatar array</p>\n"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/avatar-group/avatar-group.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<StoryType>",
                    "defaultValue": "{\n  args: {},\n}",
                    "rawdescription": "AvatarGroup with top stack, limit 2",
                    "description": "<p>AvatarGroup with top stack, limit 2</p>\n"
                }
            ],
            "libs/ui/src/lib/date/date-picker/date-picker.component.stories.ts": [
                {
                    "name": "BottomDatePicker",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/date/date-picker/date-picker.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "BottomDatePickerTemplate.bind({})",
                    "rawdescription": "Date picker bottom",
                    "description": "<p>Date picker bottom</p>\n"
                },
                {
                    "name": "BottomDatePickerTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/date/date-picker/date-picker.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<DatePickerComponent>",
                    "defaultValue": "(\n  args: DatePickerComponent\n) => {\n  return {\n    component: DatePickerComponent,\n    template: `\n    <p class=\"absolute\">selected value: {{formControl.value}}</p>\n    <div class=\"flex flex-col h-screen justify-end\">\n    <div [uiDateWrapper]=\"calendar\">\n    <input [uiDatePicker] [formControl]=\"formControl\" [label]=\"'Select a date'\"/>\n      <ui-date-picker #calendar>\n      </ui-date-picker> \n      </div>\n      </div>\n      `,\n    props: {\n      ...args,\n      formControl,\n    },\n  };\n}",
                    "rawdescription": "Date picker bottom template",
                    "description": "<p>Date picker bottom template</p>\n"
                },
                {
                    "name": "DatePicker",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/date/date-picker/date-picker.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "DatePickerTemplate.bind({})",
                    "rawdescription": "Date picker",
                    "description": "<p>Date picker</p>\n"
                },
                {
                    "name": "DatePickerTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/date/date-picker/date-picker.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<DatePickerComponent>",
                    "defaultValue": "(\n  args: DatePickerComponent\n) => {\n  return {\n    component: DatePickerComponent,\n    template: `\n    <div [uiDateWrapper]=\"calendar\">\n    <input [uiDatePicker] [formControl]=\"formControl\" [label]=\"'Select a date'\"/>\n      <ui-date-picker #calendar>\n      </ui-date-picker> \n      </div>\n      <br>\n      <p>selected value: {{formControl.value}}</p>\n      `,\n    props: {\n      ...args,\n      formControl,\n    },\n  };\n}",
                    "rawdescription": "Date picker template",
                    "description": "<p>Date picker template</p>\n"
                },
                {
                    "name": "formControl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/date/date-picker/date-picker.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FormControl(new Date())",
                    "rawdescription": "FormControl for story testing",
                    "description": "<p>FormControl for story testing</p>\n"
                }
            ],
            "libs/ui/src/lib/tooltip/tooltip.component.stories.ts": [
                {
                    "name": "BottomExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/tooltip/tooltip.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Bottom centered element",
                    "description": "<p>Bottom centered element</p>\n"
                },
                {
                    "name": "BottomLeftExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/tooltip/tooltip.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Bottom left element",
                    "description": "<p>Bottom left element</p>\n"
                },
                {
                    "name": "BottomRightExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/tooltip/tooltip.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Bottom right element",
                    "description": "<p>Bottom right element</p>\n"
                },
                {
                    "name": "LeftExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/tooltip/tooltip.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Middle left element",
                    "description": "<p>Middle left element</p>\n"
                },
                {
                    "name": "LongTextExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/tooltip/tooltip.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Long text element",
                    "description": "<p>Long text element</p>\n"
                },
                {
                    "name": "RightExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/tooltip/tooltip.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Middle right element",
                    "description": "<p>Middle right element</p>\n"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/tooltip/tooltip.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TooltipComponent>",
                    "defaultValue": "(args: TooltipComponent) => ({\n  props: args,\n})",
                    "rawdescription": "Template for storybook's test of the directive",
                    "description": "<p>Template for storybook&#39;s test of the directive</p>\n"
                },
                {
                    "name": "TopExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/tooltip/tooltip.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Top centered element",
                    "description": "<p>Top centered element</p>\n"
                },
                {
                    "name": "TopLeftExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/tooltip/tooltip.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Top left element",
                    "description": "<p>Top left element</p>\n"
                },
                {
                    "name": "TopRightExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/tooltip/tooltip.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Top right element",
                    "description": "<p>Top right element</p>\n"
                }
            ],
            "libs/ui/src/lib/menu/menu.component.stories.ts": [
                {
                    "name": "clickEvent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/menu/menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(name: string) =>\n  window.alert(`You pressed the ${name} button!`)",
                    "rawdescription": "Click event handler for menu items template",
                    "description": "<p>Click event handler for menu items template</p>\n"
                },
                {
                    "name": "LeftBottomCornerMenu",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/menu/menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "LeftBottomCornerMenuTemplate.bind({})",
                    "rawdescription": "Menu template in bottom left corner of screen",
                    "description": "<p>Menu template in bottom left corner of screen</p>\n"
                },
                {
                    "name": "LeftBottomCornerMenuTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/menu/menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<MenuComponent>",
                    "defaultValue": "(\n  args: MenuComponent\n) => {\n  return {\n    component: MenuComponent,\n    template: `\n    <div style=\"height: calc(100vh - 50px)\" class=\"flex items-end\">\n    <ui-button  [uiMenuTriggerFor]=\"menu\">Open menu</ui-button>\n    </div>\n    ${menuItemsTemplate} `,\n    props: {\n      ...args,\n      clickEvent,\n    },\n  };\n}",
                    "rawdescription": "Menu template",
                    "description": "<p>Menu template</p>\n"
                },
                {
                    "name": "LeftTopCornerMenu",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/menu/menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "LeftTopCornerMenuTemplate.bind({})",
                    "rawdescription": "Menu template in top left corner of screen",
                    "description": "<p>Menu template in top left corner of screen</p>\n"
                },
                {
                    "name": "LeftTopCornerMenuTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/menu/menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<MenuComponent>",
                    "defaultValue": "(\n  args: MenuComponent\n) => {\n  return {\n    component: MenuComponent,\n    template: `\n    <div class=\"flex justify-start\">\n    <ui-button [uiMenuTriggerFor]=\"menu\">Open menu</ui-button>\n    </div>\n    ${menuItemsTemplate}`,\n    props: {\n      ...args,\n      clickEvent,\n    },\n  };\n}",
                    "rawdescription": "Menu template",
                    "description": "<p>Menu template</p>\n"
                },
                {
                    "name": "menuItemsTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/menu/menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`<ui-menu #menu>\n  <div uiMenuItem (click)=\"clickEvent('First')\">Button 1</div>\n  <ui-divider></ui-divider>\n  <div uiMenuItem (click)=\"clickEvent('Second')\">Button 2</div>\n  <ui-divider></ui-divider>\n  <div uiMenuItem (click)=\"clickEvent('Third')\">Button 3</div>\n  </ui-menu>`",
                    "rawdescription": "Default menu items template",
                    "description": "<p>Default menu items template</p>\n"
                },
                {
                    "name": "RightBottomCornerMenu",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/menu/menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "RightBottomCornerMenuTemplate.bind({})",
                    "rawdescription": "Menu template in bottom right corner of screen",
                    "description": "<p>Menu template in bottom right corner of screen</p>\n"
                },
                {
                    "name": "RightBottomCornerMenuTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/menu/menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<MenuComponent>",
                    "defaultValue": "(\n  args: MenuComponent\n) => {\n  return {\n    component: MenuComponent,\n    template: `\n    <div style=\"height: calc(100vh - 50px)\" class=\"flex justify-end items-end\">\n    <ui-button  [uiMenuTriggerFor]=\"menu\">Open menu</ui-button>\n    </div> \n    ${menuItemsTemplate}`,\n    props: {\n      ...args,\n      clickEvent,\n    },\n  };\n}",
                    "rawdescription": "Menu template",
                    "description": "<p>Menu template</p>\n"
                },
                {
                    "name": "RightTopCornerMenu",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/menu/menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "RightTopCornerMenuTemplate.bind({})",
                    "rawdescription": "Menu template in top right corner of screen",
                    "description": "<p>Menu template in top right corner of screen</p>\n"
                },
                {
                    "name": "RightTopCornerMenuTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/menu/menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<MenuComponent>",
                    "defaultValue": "(\n  args: MenuComponent\n) => {\n  return {\n    component: MenuComponent,\n    template: `\n    <div class=\"flex justify-end\">\n    <ui-button [uiMenuTriggerFor]=\"menu\">Open menu</ui-button>\n    </div>\n    ${menuItemsTemplate} `,\n    props: {\n      ...args,\n      clickEvent,\n    },\n  };\n}",
                    "rawdescription": "Menu template",
                    "description": "<p>Menu template</p>\n"
                }
            ],
            "libs/ui/src/lib/select-menu/select-menu.component.stories.ts": [
                {
                    "name": "closeEvent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {\n  console.log('isClosed');\n}",
                    "rawdescription": "Used to test if emission of output \"closed\" works",
                    "description": "<p>Used to test if emission of output &quot;closed&quot; works</p>\n"
                },
                {
                    "name": "customTriggerSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n<ng-template #customTemplate>\n<span class=\"inline-flex items-center rounded-full bg-pink-50 px-2 py-1 text-xs font-medium text-pink-700 ring-1 ring-inset ring-pink-700/10\">{{formGroup.get('selectMenu').value}}</span>\n</ng-template>`",
                    "rawdescription": "Custom template trigger to be placed between the select tag",
                    "description": "<p>Custom template trigger to be placed between the select tag</p>\n"
                },
                {
                    "name": "customTriggerSelectTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`<ui-select-menu\n  formControlName=\"selectMenu\"\n  (opened)=\"openEvent($event)\" \n  (closed)=\"closeEvent($event)\" \n  (selectedOption)=\"selectEvent($event)\"\n  [multiselect]=\"multiselect\"\n  [disabled]=\"disabled\"\n  [customTemplate]=\"customTemplate\"\n>\n  ${customTriggerSelect}\n  <ui-select-option *ngFor=\"let option of options\" [value]=\"option\">\n    {{option}}\n  </ui-select-option>\n</ui-select-menu>`",
                    "rawdescription": "Select with the custom template trigger placed between the select tag",
                    "description": "<p>Select with the custom template trigger placed between the select tag</p>\n"
                },
                {
                    "name": "DisabledSelection",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateDisabledSelection.bind({})",
                    "rawdescription": "Actual export of disabled select story",
                    "description": "<p>Actual export of disabled select story</p>\n"
                },
                {
                    "name": "formControlSelectTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n<div [formGroup]=\"formGroup\" class=\"py-5\">\n  <ui-select-menu \n    formControlName=\"selectMenu\"\n    (opened)=\"openEvent($event)\" \n    (closed)=\"closeEvent($event)\" \n    (selectedOption)=\"selectEvent($event)\" \n    [multiselect]=\"multiselect\"\n  >\n    <ui-select-option\n      *ngFor=\"let option of options\"\n      [value]=\"option\"\n      [selected]=\"formGroup.get('selectMenu')?.value.includes(option)\">\n      {{option}}\n    </ui-select-option>\n  </ui-select-menu>\n</div>\n`",
                    "rawdescription": "Template used to render the stories (using a formGroup with pre-selected values)",
                    "description": "<p>Template used to render the stories (using a formGroup with pre-selected values)</p>\n"
                },
                {
                    "name": "formGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FormGroup({\n  selectMenu: new FormControl(),\n})",
                    "rawdescription": "Form group to test select-menu control value accessor",
                    "description": "<p>Form group to test select-menu control value accessor</p>\n"
                },
                {
                    "name": "MultiSelection",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateMultiSelection.bind({})",
                    "rawdescription": "Actual export of multi select story",
                    "description": "<p>Actual export of multi select story</p>\n"
                },
                {
                    "name": "openEvent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {\n  console.log('isOpened');\n}",
                    "rawdescription": "Used to test if emission of output \"opened\" works",
                    "description": "<p>Used to test if emission of output &quot;opened&quot; works</p>\n"
                },
                {
                    "name": "options",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  'French',\n  'English',\n  'Japanese',\n  'Javanese',\n  'Polish',\n  'German',\n  'Spanish',\n  'Dutch',\n  'Chinese',\n]",
                    "rawdescription": "Options for select menu",
                    "description": "<p>Options for select menu</p>\n"
                },
                {
                    "name": "selectEvent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(event: any) => {\n  console.log('Select Event: ', event);\n  console.log('Form control: ', formGroup.get('selectMenu')?.value);\n}",
                    "rawdescription": "Used to test if emission of output \"selectedOption\" works",
                    "description": "<p>Used to test if emission of output &quot;selectedOption&quot; works</p>\n"
                },
                {
                    "name": "selectMenuTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`<div [formGroup]=\"formGroup\" class=\"py-5\">\n${selectTemplate}\n</div>\n`",
                    "rawdescription": "Template used to render the stories (using a formGroup)",
                    "description": "<p>Template used to render the stories (using a formGroup)</p>\n"
                },
                {
                    "name": "selectTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`<ui-select-menu \n  formControlName=\"selectMenu\"\n  (opened)=\"openEvent($event)\" \n  (closed)=\"closeEvent($event)\" \n  (selectedOption)=\"selectEvent($event)\" \n  [multiselect]=\"multiselect\"\n  [disabled]=\"disabled\">\n  <ui-select-option *ngFor=\"let option of options\" [value]=\"option\">\n    {{option}}\n  </ui-select-option>\n</ui-select-menu>`",
                    "rawdescription": "Select with no custom template",
                    "description": "<p>Select with no custom template</p>\n"
                },
                {
                    "name": "singleSelectMenuTemplateWithTrigger",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`<div [formGroup]=\"formGroup\" class=\"py-5\">\n${customTriggerSelectTemplate}\n</div>\n`",
                    "rawdescription": "Template used to render the stories (using a formGroup) and use of a ngTemplate as selectTriggerTemplate input",
                    "description": "<p>Template used to render the stories (using a formGroup) and use of a ngTemplate as selectTriggerTemplate input</p>\n"
                },
                {
                    "name": "StandaloneSelection",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateStandaloneSelection.bind({})",
                    "rawdescription": "Actual export of standalone select story",
                    "description": "<p>Actual export of standalone select story</p>\n"
                },
                {
                    "name": "StandaloneSelectionDefaultValue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateStandaloneSelectionDefaultValue.bind({})",
                    "rawdescription": "Actual export of standalone select story",
                    "description": "<p>Actual export of standalone select story</p>\n"
                },
                {
                    "name": "TemplateDisabledSelection",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<SelectMenuComponent>",
                    "defaultValue": "(\n  args: SelectMenuComponent\n) => {\n  args.disabled = true;\n  return {\n    component: SelectMenuComponent,\n    template: selectMenuTemplate,\n    props: {\n      ...args,\n      options,\n      formGroup,\n      selectEvent,\n      openEvent,\n      closeEvent,\n    },\n  };\n}",
                    "rawdescription": "Template for disabled selection select menu",
                    "description": "<p>Template for disabled selection select menu</p>\n"
                },
                {
                    "name": "TemplateMultiSelection",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<SelectMenuComponent>",
                    "defaultValue": "(\n  args: SelectMenuComponent\n) => {\n  args.multiselect = true;\n  formGroup.get('selectMenu')?.setValue([options[0], options[1]]);\n  return {\n    component: SelectMenuComponent,\n    template: formControlSelectTemplate,\n    props: {\n      ...args,\n      options,\n      formGroup,\n      selectEvent,\n      openEvent,\n      closeEvent,\n    },\n  };\n}",
                    "rawdescription": "Template for multi selection select menu",
                    "description": "<p>Template for multi selection select menu</p>\n"
                },
                {
                    "name": "TemplateRefSelection",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateTemplateRefSelection.bind({})",
                    "rawdescription": "Actual export of select story using ngTemplate as input",
                    "description": "<p>Actual export of select story using ngTemplate as input</p>\n"
                },
                {
                    "name": "TemplateStandaloneSelection",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<SelectMenuComponent>",
                    "defaultValue": "(\n  args: SelectMenuComponent\n) => {\n  formGroup.get('selectMenu')?.setValue([]);\n  return {\n    component: SelectMenuComponent,\n    template: selectMenuTemplate,\n    props: {\n      ...args,\n      options,\n      formGroup,\n      selectEvent,\n      openEvent,\n      closeEvent,\n    },\n  };\n}",
                    "rawdescription": "Template for standalone selection select menu",
                    "description": "<p>Template for standalone selection select menu</p>\n"
                },
                {
                    "name": "TemplateStandaloneSelectionDefaultValue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<SelectMenuComponent>",
                    "defaultValue": "(\n  args: SelectMenuComponent\n) => {\n  formGroup.get('selectMenu')?.setValue([options[0]]);\n  return {\n    component: SelectMenuComponent,\n    template: formControlSelectTemplate,\n    props: {\n      ...args,\n      options,\n      formGroup,\n      selectEvent,\n      openEvent,\n      closeEvent,\n    },\n  };\n}",
                    "rawdescription": "Template for standalone selection default value select menu",
                    "description": "<p>Template for standalone selection default value select menu</p>\n"
                },
                {
                    "name": "TemplateTemplateRefSelection",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<SelectMenuComponent>",
                    "defaultValue": "(\n  args: SelectMenuComponent\n) => {\n  formGroup.get('selectMenu')?.setValue([options[0]]);\n  return {\n    component: SelectMenuComponent,\n    template: singleSelectMenuTemplateWithTrigger,\n    props: {\n      ...args,\n      options,\n      formGroup,\n      selectEvent,\n      openEvent,\n      closeEvent,\n    },\n  };\n}",
                    "rawdescription": "Template for single select menu using a ngTemplate as input",
                    "description": "<p>Template for single select menu using a ngTemplate as input</p>\n"
                }
            ],
            "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts": [
                {
                    "name": "closesAutocompletePanel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {\n  console.log('Closed autocomplete panel event');\n}",
                    "rawdescription": "Callback to test the autocomplete directive closed event",
                    "description": "<p>Callback to test the autocomplete directive closed event</p>\n"
                },
                {
                    "name": "FormAutocomplete",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "FormControlTemplate.bind({})",
                    "rawdescription": "Form control autocomplete",
                    "description": "<p>Form control autocomplete</p>\n"
                },
                {
                    "name": "formControl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FormControl()",
                    "rawdescription": "Form control to test autocomplete story",
                    "description": "<p>Form control to test autocomplete story</p>\n"
                },
                {
                    "name": "FormControlTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<any>",
                    "defaultValue": "(args: any) => {\n  formControl.setValue(SIMPLE_OPTIONS[2]);\n  return {\n    template: `\n    <input\n    type=\"text\"\n    placeholder=\"Select a value\"\n    [formControl]=\"formControl\"\n    [uiAutocomplete]=\"auto\"\n    [autocompleteDisplayKey]=\"'label'\"\n    (opened)=\"openedAutocompletePanel()\"\n    (closed)=\"closesAutocompletePanel()\"\n    (optionSelected)=\"selectedOption($event)\"\n    class=\"relative w-full rounded-md border-0 p-1.5 shadow-sm ring-1 ring-inset sm:leading-6 focus:ring-2 focus:ring-inset\"\n  >\n  <ui-autocomplete #auto>\n  <ui-option *ngFor=\"let option of SIMPLE_OPTIONS\" [value]=\"option\">\n    {{option.label}}\n    <ng-container ngProjectsAs=\"icon\">\n    <ui-icon\n      icon=\"edit\"\n      [size]=\"18\"\n    ></ui-icon>\n    </ng-container>\n  </ui-option>\n  </ui-autocomplete>\n      <br>\n      <p>value: {{formControl.value | json}}</p>\n      <p>touched: {{formControl.touched}}</p>\n    `,\n    props: {\n      ...args,\n      SIMPLE_OPTIONS,\n      formControl,\n      openedAutocompletePanel,\n      closesAutocompletePanel,\n      selectedOption,\n    },\n  };\n}",
                    "rawdescription": "Form control template autocomplete",
                    "description": "<p>Form control template autocomplete</p>\n"
                },
                {
                    "name": "GROUPED_OPTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    optionName: 'A',\n    channels: [\n      {\n        optionName: 'option A 1',\n      },\n    ],\n  },\n  {\n    optionName: 'B',\n    channels: [\n      {\n        optionName: 'B 1',\n      },\n      {\n        optionName: 'b',\n      },\n    ],\n  },\n  {\n    optionName: 'C',\n  },\n  {\n    optionName: 'D',\n    channels: [\n      {\n        optionName: 'D 1',\n      },\n      {\n        optionName: 'D two',\n      },\n      {\n        optionName: 'D a b',\n      },\n    ],\n  },\n]",
                    "rawdescription": "Autocomplete grouped options example",
                    "description": "<p>Autocomplete grouped options example</p>\n"
                },
                {
                    "name": "GroupedAutocompletePanel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "GroupedAutocompletePanelTemplate.bind(\n  {}\n)",
                    "rawdescription": "Autocomplete panel inject in a input with grouped options",
                    "description": "<p>Autocomplete panel inject in a input with grouped options</p>\n"
                },
                {
                    "name": "GroupedAutocompletePanelTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<any>",
                    "defaultValue": "(args: any) => {\n  return {\n    template: `\n    <input\n    type=\"text\"\n    placeholder=\"Select a value\"\n    [uiAutocomplete]=\"auto\"\n    [autocompleteDisplayKey]=\"'optionName'\"\n    (opened)=\"openedAutocompletePanel()\"\n    (closed)=\"closesAutocompletePanel()\"\n    (optionSelected)=\"selectedOption($event)\"\n    class=\"relative w-full rounded-md border-0 p-1.5 shadow-sm ring-1 ring-inset sm:leading-6 focus:ring-2 focus:ring-inset\"\n  >\n  <ui-autocomplete #auto>\n  <ui-option [isGroup]=\"true\" *ngFor=\"let option of GROUPED_OPTIONS\">\n    {{option.optionName}}\n    <ui-option *ngFor=\"let child of option.channels\" [value]=\"child\">\n    {{child.optionName}}\n    <ng-container ngProjectsAs=\"icon\">\n    <ui-icon\n      icon=\"edit\"\n      [size]=\"18\"\n    ></ui-icon>\n    </ng-container>\n  </ui-option>\n  </ui-option>\n  <ui-autocomplete>\n    `,\n    props: {\n      ...args,\n      GROUPED_OPTIONS,\n      openedAutocompletePanel,\n      closesAutocompletePanel,\n      selectedOption,\n    },\n  };\n}",
                    "rawdescription": "Grouped autocomplete template",
                    "description": "<p>Grouped autocomplete template</p>\n"
                },
                {
                    "name": "openedAutocompletePanel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {\n  console.log('Opened autocomplete panel event');\n}",
                    "rawdescription": "Callback to test the autocomplete directive opened event",
                    "description": "<p>Callback to test the autocomplete directive opened event</p>\n"
                },
                {
                    "name": "selectedOption",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(option: string) => {\n  console.log('Option selected: ', option);\n}",
                    "rawdescription": "Callback to test the autocomplete directive optionSelected event",
                    "description": "<p>Callback to test the autocomplete directive optionSelected event</p>\n"
                },
                {
                    "name": "SIMPLE_OPTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    label: 'A',\n  },\n  {\n    label: 'a B',\n  },\n  {\n    label: 'C',\n  },\n  {\n    label: 'D',\n  },\n]",
                    "rawdescription": "Autocomplete options example",
                    "description": "<p>Autocomplete options example</p>\n"
                },
                {
                    "name": "SimpleAutocompletePanel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "SimpleAutocompletePanelTemplate.bind({})",
                    "rawdescription": "Autocomplete panel inject in a input with simples (not grouped) options",
                    "description": "<p>Autocomplete panel inject in a input with simples (not grouped) options</p>\n"
                },
                {
                    "name": "SimpleAutocompletePanelTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<any>",
                    "defaultValue": "(args: any) => {\n  return {\n    component: AutocompleteComponent,\n    template: `\n      <input\n        type=\"text\"\n        placeholder=\"Select a value\"\n        [uiAutocomplete]=\"auto\"\n        [autocompleteDisplayKey]=\"'label'\"\n        (opened)=\"openedAutocompletePanel()\"\n        (closed)=\"closesAutocompletePanel()\"\n        (optionSelected)=\"selectedOption($event)\"\n        class=\"relative w-full rounded-md border-0 p-1.5 shadow-sm ring-1 ring-inset sm:leading-6 focus:ring-2 focus:ring-inset\"\n      >\n      <ui-autocomplete #auto>\n      <ui-option *ngFor=\"let option of SIMPLE_OPTIONS\" [value]=\"option\">\n        {{option.label}}\n        <ng-container ngProjectsAs=\"icon\">\n        <ui-icon\n          icon=\"edit\"\n          [size]=\"18\"\n        ></ui-icon>\n        </ng-container>\n      </ui-option>\n      <ui-autocomplete>\n    `,\n    props: {\n      ...args,\n      SIMPLE_OPTIONS,\n      openedAutocompletePanel,\n      closesAutocompletePanel,\n      selectedOption,\n    },\n  };\n}",
                    "rawdescription": "Simple autocomplete template",
                    "description": "<p>Simple autocomplete template</p>\n"
                }
            ],
            "libs/ui/src/lib/table/table.component.stories.ts": [
                {
                    "name": "columnDefinitionArray",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/table/table.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  'name',\n  'email',\n  'phone',\n  'city',\n  'active',\n  'selected',\n  'id',\n]",
                    "rawdescription": "Column definition for table",
                    "description": "<p>Column definition for table</p>\n"
                },
                {
                    "name": "sortTableByKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/table/table.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(column: TableSort) => {\n  console.log(column);\n}",
                    "rawdescription": "Console log receive table sort data",
                    "description": "<p>Console log receive table sort data</p>\n"
                },
                {
                    "name": "Table",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/table/table.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Table component",
                    "description": "<p>Table component</p>\n"
                },
                {
                    "name": "tableData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/table/table.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockedTable[]",
                    "defaultValue": "[\n  {\n    name: 'Name 1',\n    email: { value: 'email@email.com' },\n    phone: { value: '111111111' },\n    cityVal: 'City 1',\n    isValid: false,\n    id: '1',\n  },\n  {\n    name: 'Name 3',\n    email: { value: 'email@email.com' },\n    phone: { value: '333333333' },\n    cityVal: 'City 3',\n    isValid: true,\n    id: '3',\n  },\n  {\n    name: 'Name 2',\n    email: { value: 'email@email.com' },\n    phone: { value: '222222222' },\n    cityVal: 'City 2',\n    isValid: true,\n    id: '2',\n  },\n  {\n    name: 'Name 4',\n    email: { value: 'email@email.com' },\n    phone: { value: '444444444' },\n    cityVal: 'City 4',\n    isValid: false,\n    id: '4',\n  },\n  {\n    name: 'Name 5',\n    email: { value: 'email@email.com' },\n    phone: { value: '555555555' },\n    cityVal: 'City 5',\n    isValid: false,\n    id: '5',\n  },\n  {\n    name: 'Name 6',\n    email: { value: 'email@email.com' },\n    phone: { value: '666666666' },\n    cityVal: 'City 6',\n    isValid: true,\n    id: '6',\n  },\n  {\n    name: 'Name 1',\n    email: { value: 'email@email.com' },\n    phone: { value: '111111111' },\n    cityVal: 'City 1',\n    isValid: false,\n    id: '1',\n  },\n  {\n    name: 'Name 3',\n    email: { value: 'email@email.com' },\n    phone: { value: '333333333' },\n    cityVal: 'City 3',\n    isValid: true,\n    id: '3',\n  },\n  {\n    name: 'Name 2',\n    email: { value: 'email@email.com' },\n    phone: { value: '222222222' },\n    cityVal: 'City 2',\n    isValid: true,\n    id: '2',\n  },\n  {\n    name: 'Name 4',\n    email: { value: 'email@email.com' },\n    phone: { value: '444444444' },\n    cityVal: 'City 4',\n    isValid: false,\n    id: '4',\n  },\n  {\n    name: 'Name 5',\n    email: { value: 'email@email.com' },\n    phone: { value: '555555555' },\n    cityVal: 'City 5',\n    isValid: false,\n    id: '5',\n  },\n  {\n    name: 'Name 6',\n    email: { value: 'email@email.com' },\n    phone: { value: '666666666' },\n    cityVal: 'City 6',\n    isValid: true,\n    id: '6',\n  },\n  {\n    name: 'Name 1',\n    email: { value: 'email@email.com' },\n    phone: { value: '111111111' },\n    cityVal: 'City 1',\n    isValid: false,\n\n    id: '1',\n  },\n  {\n    name: 'Name 3',\n    email: { value: 'email@email.com' },\n    phone: { value: '333333333' },\n    cityVal: 'City 3',\n    isValid: true,\n    id: '3',\n  },\n  {\n    name: 'Name 2',\n    email: { value: 'email@email.com' },\n    phone: { value: '222222222' },\n    cityVal: 'City 2',\n    isValid: true,\n    id: '2',\n  },\n  {\n    name: 'Name 4',\n    email: { value: 'email@email.com' },\n    phone: { value: '444444444' },\n    cityVal: 'City 4',\n    isValid: false,\n    id: '4',\n  },\n  {\n    name: 'Name 5',\n    email: { value: 'email@email.com' },\n    phone: { value: '555555555' },\n    cityVal: 'City 5',\n    isValid: false,\n    id: '5',\n  },\n  {\n    name: 'Name 6',\n    email: { value: 'email@email.com' },\n    phone: { value: '666666666' },\n    cityVal: 'City 6',\n    isValid: true,\n    id: '6',\n  },\n]",
                    "rawdescription": "Mocked table data",
                    "description": "<p>Mocked table data</p>\n"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/table/table.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<any>",
                    "defaultValue": "(args: any) => {\n  const pagedTableData = tableData.filter((el, index) => index < 10);\n  return {\n    template: `\n    <!--TABLE CONTENT-->\n<table\n  cdk-table \n  uiTableWrapper\n  (sortChange)=\"sortTableByKey($event)\"\n  [dataSource]=\"pagedTableData\"\n>\n  <ng-container cdkColumnDef=\"name\">\n    <th\n    uiTableHeaderSort=\"name\"\n      uiCellHeader\n      *cdkHeaderCellDef\n      scope=\"col\"\n      \n    >\n      name\n    </th>\n    <td uiCell *cdkCellDef=\"let element\">\n      {{ element.name }}\n    </td>\n  </ng-container>\n\n  <ng-container cdkColumnDef=\"email\">\n    <th\n      uiCellHeader\n      *cdkHeaderCellDef\n      scope=\"col\"\n      \n    >\n      email\n    </th>\n    <td uiCell *cdkCellDef=\"let element\">\n      {{ element.email.value }}\n    </td>\n  </ng-container>\n\n  <ng-container cdkColumnDef=\"phone\">\n    <th\n    uiTableHeaderSort=\"phone\"\n      uiCellHeader\n      *cdkHeaderCellDef\n      scope=\"col\"\n      \n    >\n      phone\n    </th>\n    <td uiCell *cdkCellDef=\"let element\">\n      {{ element.phone.value }}\n    </td>\n  </ng-container>\n\n  <ng-container cdkColumnDef=\"city\">\n    <th\n    uiTableHeaderSort=\"cityVal\"\n      uiCellHeader\n      *cdkHeaderCellDef\n      scope=\"col\"\n      \n    >\n      city\n    </th>\n    <td uiCell *cdkCellDef=\"let element\">\n      {{ element.cityVal }}\n    </td>\n  </ng-container>\n\n  <ng-container cdkColumnDef=\"active\">\n    <th\n      uiCellHeader\n      *cdkHeaderCellDef\n      scope=\"col\"\n      \n    >\n      active\n    </th>\n    <td uiCell *cdkCellDef=\"let element\">\n    <div class=\"flex items-center justify-end gap-x-2 sm:justify-start\">\n    <div [ngClass]=\"{'text-rose-400 bg-rose-400/10': !element.isValid, 'text-green-400 bg-green-400/10': element.isValid}\" class=\"flex-none rounded-full p-1\">\n      <div class=\"h-1.5 w-1.5 rounded-full bg-current\"></div>\n    </div>\n    <div class=\"text-neutral sm:block\">{{element.isValid ? 'Completed' : 'Error' }}</div>\n  </div>\n    </td>\n  </ng-container>\n\n  <ng-container cdkColumnDef=\"selected\">\n    <th\n      uiCellHeader\n      *cdkHeaderCellDef\n      scope=\"col\"\n      \n    >\n      selected\n    </th>\n    <td uiCell *cdkCellDef=\"let element\">\n      <ui-toggle></ui-toggle>\n    </td>\n  </ng-container>\n\n  <ng-container cdkColumnDef=\"id\">\n    <th\n      uiCellHeader\n      *cdkHeaderCellDef\n      scope=\"col\"\n      \n    >\n      id\n    </th>\n    <td uiCell *cdkCellDef=\"let element\">\n      {{ element.id }}\n    </td>\n  </ng-container>\n  <tr cdk-header-row *cdkHeaderRowDef=\"columnDefinitionArray\"></tr>\n  <tr cdk-row *cdkRowDef=\"let row; columns: columnDefinitionArray\"></tr>\n</table>`,\n    props: {\n      ...args,\n      pagedTableData,\n      sortTableByKey,\n      columnDefinitionArray,\n    },\n  };\n}",
                    "rawdescription": "Template divider for table",
                    "description": "<p>Template divider for table</p>\n"
                }
            ],
            "libs/ui/.storybook/main.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/.storybook/main.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StorybookConfig",
                    "defaultValue": "{\n  stories: ['../**/*.stories.@(js|jsx|ts|tsx|mdx)'],\n  addons: ['@storybook/addon-mdx-gfm', '@storybook/addon-essentials'],\n  staticDirs: [\n    {\n      from: '../../../assets',\n      to: '/assets',\n    },\n    {\n      from: '../../../libs/shared/src/i18n',\n      to: '/assets/i18n',\n    },\n  ],\n  framework: {\n    name: '@storybook/angular',\n    options: {},\n  },\n}",
                    "rawdescription": "Storybook configuration",
                    "description": "<p>Storybook configuration</p>\n"
                }
            ],
            "libs/ui/src/lib/breadcrumbs/breadcrumbs.component.stories.ts": [
                {
                    "name": "Contained",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/breadcrumbs/breadcrumbs.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<BreadcrumbsComponent>",
                    "defaultValue": "{\n  args: {\n    breadcrumbs: [\n      {\n        text: 'item 0',\n        uri: '#',\n        showLabel: true,\n      },\n      {\n        text: 'item 1',\n        uri: '#',\n        showLabel: true,\n      },\n      {\n        text: 'item 2',\n        uri: '#',\n        showLabel: true,\n      },\n    ],\n    separator: 'chevron',\n    display: 'contained',\n  },\n}",
                    "rawdescription": "Container story",
                    "description": "<p>Container story</p>\n"
                },
                {
                    "name": "Full",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/breadcrumbs/breadcrumbs.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<BreadcrumbsComponent>",
                    "defaultValue": "{\n  args: {\n    breadcrumbs: [\n      {\n        text: 'item 0',\n        uri: '#',\n        showLabel: true,\n      },\n      {\n        text: 'item 1',\n        uri: '#',\n        showLabel: true,\n      },\n      {\n        text: 'item 2',\n        uri: '#',\n        showLabel: true,\n      },\n    ],\n    separator: 'chevron',\n    display: 'full',\n  },\n}",
                    "rawdescription": "Full width story",
                    "description": "<p>Full width story</p>\n"
                },
                {
                    "name": "SimpleChevron",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/breadcrumbs/breadcrumbs.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<BreadcrumbsComponent>",
                    "defaultValue": "{\n  args: {\n    breadcrumbs: [\n      {\n        text: 'item 0',\n        uri: '#',\n        showLabel: true,\n      },\n      {\n        text: 'item 1',\n        uri: '#',\n        showLabel: true,\n      },\n      {\n        text: 'item 2',\n        uri: '#',\n        showLabel: true,\n      },\n    ],\n    separator: 'chevron',\n    display: 'simple',\n  },\n}",
                    "rawdescription": "Simple Chevron story",
                    "description": "<p>Simple Chevron story</p>\n"
                },
                {
                    "name": "SimpleSlash",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/breadcrumbs/breadcrumbs.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<BreadcrumbsComponent>",
                    "defaultValue": "{\n  args: {\n    breadcrumbs: [\n      {\n        text: 'item 0',\n        uri: '#',\n        showLabel: true,\n      },\n      {\n        text: 'item 1',\n        uri: '#',\n        showLabel: true,\n      },\n      {\n        text: 'item 2',\n        uri: '#',\n        showLabel: true,\n      },\n    ],\n    separator: 'slash',\n    display: 'simple',\n  },\n}",
                    "rawdescription": "Simple slash story",
                    "description": "<p>Simple slash story</p>\n"
                }
            ],
            "libs/ui/src/lib/alert/alert.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<StoryType>",
                    "defaultValue": "{\n  args: {\n    content:\n      'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam pellentesque rhoncus odio, a accumsan purus venenatis eget. Suspendisse pretium nunc non tellus pulvinar, ut dapibus velit mollis. Vivamus dictum tempus ligula, vitae condimentum justo scelerisque sit amet. Donec ultrices quis turpis vitae tincidunt.',\n  },\n}",
                    "rawdescription": "Alert story",
                    "description": "<p>Alert story</p>\n"
                }
            ],
            "libs/ui/src/lib/dialog/dialog.component.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/dialog/dialog.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Primary launchDialog",
                    "description": "<p>Primary launchDialog</p>\n"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/dialog/dialog.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<LaunchDialogComponent>",
                    "defaultValue": "(\n  args: LaunchDialogComponent\n) => ({\n  props: args,\n})",
                    "rawdescription": "Template launchDialog",
                    "description": "<p>Template launchDialog</p>\n"
                }
            ],
            "libs/ui/src/lib/tabs/tabs.component.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/tabs/tabs.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<TabsComponent>",
                    "defaultValue": "{\n  args: {\n    vertical: false,\n  },\n}",
                    "rawdescription": "Default story",
                    "description": "<p>Default story</p>\n"
                },
                {
                    "name": "Vertical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/tabs/tabs.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<TabsComponent>",
                    "defaultValue": "{\n  args: {\n    vertical: true,\n  },\n}",
                    "rawdescription": "Vertical story",
                    "description": "<p>Vertical story</p>\n"
                }
            ],
            "libs/ui/src/lib/avatar/avatar.component.stories.ts": [
                {
                    "name": "Defaut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<AvatarComponent>",
                    "defaultValue": "{\n  args: {},\n}",
                    "rawdescription": "Default inputs",
                    "description": "<p>Default inputs</p>\n"
                },
                {
                    "name": "PrimaryCircleAvatarLarge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<AvatarComponent>",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    shape: 'circle',\n    initials: '',\n    image: '',\n    variant: 'primary',\n  },\n}",
                    "rawdescription": "Primary large circle avatar story",
                    "description": "<p>Primary large circle avatar story</p>\n"
                },
                {
                    "name": "PrimaryCircleAvatarMedium",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<AvatarComponent>",
                    "defaultValue": "{\n  args: {\n    size: 'medium',\n    shape: 'circle',\n    initials: '',\n    image: '',\n    variant: 'primary',\n  },\n}",
                    "rawdescription": "Primary medium circle avatar story",
                    "description": "<p>Primary medium circle avatar story</p>\n"
                },
                {
                    "name": "PrimaryCircleAvatarSmall",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<AvatarComponent>",
                    "defaultValue": "{\n  args: {\n    size: 'small',\n    shape: 'circle',\n    initials: '',\n    image: '',\n    variant: 'primary',\n  },\n}",
                    "rawdescription": "Primary small circle avatar story",
                    "description": "<p>Primary small circle avatar story</p>\n"
                },
                {
                    "name": "PrimaryCircleImageAvatarLarge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<AvatarComponent>",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    shape: 'circle',\n    initials: '',\n    image:\n      'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80',\n    variant: 'primary',\n  },\n}",
                    "rawdescription": "Primary large circle avatar with image story",
                    "description": "<p>Primary large circle avatar with image story</p>\n"
                },
                {
                    "name": "PrimaryRectangleAvatarLarge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<AvatarComponent>",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    shape: 'rectangle',\n    initials: '',\n    image: '',\n    variant: 'primary',\n  },\n}",
                    "rawdescription": "Primary large rectangle avatar story",
                    "description": "<p>Primary large rectangle avatar story</p>\n"
                },
                {
                    "name": "PrimaryRectangleAvatarMedium",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<AvatarComponent>",
                    "defaultValue": "{\n  args: {\n    size: 'medium',\n    shape: 'rectangle',\n    initials: '',\n    image: '',\n    variant: 'primary',\n  },\n}",
                    "rawdescription": "Primary medium rectangle avatar story",
                    "description": "<p>Primary medium rectangle avatar story</p>\n"
                },
                {
                    "name": "PrimaryRectangleAvatarSmall",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<AvatarComponent>",
                    "defaultValue": "{\n  args: {\n    size: 'small',\n    shape: 'rectangle',\n    initials: '',\n    image: '',\n    variant: 'primary',\n  },\n}",
                    "rawdescription": "Primary small rectangle avatar story",
                    "description": "<p>Primary small rectangle avatar story</p>\n"
                },
                {
                    "name": "PrimaryRectangleImageAvatarLarge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<AvatarComponent>",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    shape: 'rectangle',\n    initials: '',\n    image:\n      'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80',\n    variant: 'primary',\n  },\n}",
                    "rawdescription": "Primary large rectangle with image avatar story",
                    "description": "<p>Primary large rectangle with image avatar story</p>\n"
                },
                {
                    "name": "SecondaryCircleAvatarLarge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<AvatarComponent>",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    shape: 'circle',\n    initials: '',\n    image: '',\n    variant: 'secondary',\n  },\n}",
                    "rawdescription": "Secondary large circle avatar story",
                    "description": "<p>Secondary large circle avatar story</p>\n"
                },
                {
                    "name": "SecondaryRectangleAvatarLarge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<AvatarComponent>",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    shape: 'rectangle',\n    initials: '',\n    image: '',\n    variant: 'secondary',\n  },\n}",
                    "rawdescription": "Secondary large rectangle avatar story",
                    "description": "<p>Secondary large rectangle avatar story</p>\n"
                },
                {
                    "name": "TertiaryCircleAvatarLarge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<AvatarComponent>",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    shape: 'circle',\n    initials: '',\n    image: '',\n    variant: 'tertiary',\n  },\n}",
                    "rawdescription": "Tertiary large circle avatar story",
                    "description": "<p>Tertiary large circle avatar story</p>\n"
                },
                {
                    "name": "TertiaryRectangleAvatarLarge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<AvatarComponent>",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    shape: 'rectangle',\n    initials: '',\n    image: '',\n    variant: 'tertiary',\n  },\n}",
                    "rawdescription": "Tertiary large rectangle avatar story",
                    "description": "<p>Tertiary large rectangle avatar story</p>\n"
                }
            ],
            "libs/ui/src/lib/checkbox/checkbox.component.stories.ts": [
                {
                    "name": "FormCheckbox",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/checkbox/checkbox.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "FormControlTemplate.bind({})",
                    "rawdescription": "Form control checkbox",
                    "description": "<p>Form control checkbox</p>\n"
                },
                {
                    "name": "FormControlTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/checkbox/checkbox.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<CheckboxComponent>",
                    "defaultValue": "(\n  args: CheckboxComponent\n) => {\n  const formGroup = new FormGroup({\n    checkbox: new FormControl(false),\n  });\n  args.variant = 'default';\n  return {\n    component: CheckboxComponent,\n    template: `\n      <form [formGroup]=\"formGroup\">\n      <ui-checkbox [variant]=\"'${args.variant}'\" formControlName=\"checkbox\">\n      <ng-container ngProjectAs=\"label\">Form control checkbox</ng-container>\n      </ui-checkbox>\n        </form>\n        <br>\n        <p>value: {{formGroup.get('checkbox').value}}</p>\n        <p>touched: {{formGroup.get('checkbox').touched}}</p>\n        `,\n    props: {\n      ...args,\n      formGroup,\n    },\n  };\n}",
                    "rawdescription": "Form control template checkbox",
                    "description": "<p>Form control template checkbox</p>\n"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/checkbox/checkbox.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Primary checkbox",
                    "description": "<p>Primary checkbox</p>\n"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/checkbox/checkbox.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<CheckboxComponent>",
                    "defaultValue": "(args: CheckboxComponent) => {\n  args.variant = 'default';\n  return {\n    component: CheckboxComponent,\n    template: `\n      <ui-checkbox [variant]=\"'${args.variant}'\">\n      <ng-container ngProjectAs=\"label\">Checkbox text</ng-container>\n      <ng-container ngProjectAs=\"description\">Description text text text.</ng-container>\n      <ng-container ngProjectAs=\"icon\">\n      <ui-icon\n      icon=\"info_outline\"\n      [inline]=\"true\"\n      [size]=\"18\"\n      variant=\"grey\"\n    ></ui-icon>\n      </ng-container>\n      </ui-checkbox>\n        `,\n    props: {\n      ...args,\n    },\n  };\n}",
                    "rawdescription": "Template checkbox",
                    "description": "<p>Template checkbox</p>\n"
                }
            ],
            "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts": [
                {
                    "name": "formControl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FormGroup({\n  name: new FormControl(''),\n})",
                    "rawdescription": "Form group to test story with disable option",
                    "description": "<p>Form group to test story with disable option</p>\n"
                },
                {
                    "name": "options",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  'french',\n  'spanish',\n  'english',\n  'japanese',\n  'javanese',\n  'chinese',\n]",
                    "rawdescription": "List of options for the select menu included template",
                    "description": "<p>List of options for the select menu included template</p>\n"
                },
                {
                    "name": "OutlineFalse",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Outline = False design",
                    "description": "<p>Outline = False design</p>\n"
                },
                {
                    "name": "OutlineFalseAutocomplete",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateAutocomplete.bind({})",
                    "rawdescription": "Outline = False design + use of autocomplete",
                    "description": "<p>Outline = False design + use of autocomplete</p>\n"
                },
                {
                    "name": "OutlineFalseSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateSelect.bind({})",
                    "rawdescription": "Outline = False design + use of select menu",
                    "description": "<p>Outline = False design + use of select menu</p>\n"
                },
                {
                    "name": "OutlineTrue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Outline = True design",
                    "description": "<p>Outline = True design</p>\n"
                },
                {
                    "name": "OutlineTrueAutocomplete",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateAutocomplete.bind({})",
                    "rawdescription": "Outline = True design + use of autocomplete",
                    "description": "<p>Outline = True design + use of autocomplete</p>\n"
                },
                {
                    "name": "OutlineTrueSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateSelect.bind({})",
                    "rawdescription": "Outline = True design + use of select menu",
                    "description": "<p>Outline = True design + use of select menu</p>\n"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<any>",
                    "defaultValue": "(args: any) => {\n  return {\n    template: `<div uiFormFieldDirective [outline]=\"${args.outline}\">\n    <label>Phone Number</label>\n    <input type=\"text\" name=\"account-number\" id=\"account-number\" placeholder=\"000-00-0000\"/>\n    <ui-spinner [size]=\"'medium'\" uiSuffix></ui-spinner>\n    <ui-icon icon=\"search\" uiPrefix></ui-icon>\n  </div>`,\n    props: {\n      ...args,\n    },\n  };\n}",
                    "rawdescription": "Template to create form wrapper component's story",
                    "description": "<p>Template to create form wrapper component&#39;s story</p>\n"
                },
                {
                    "name": "TemplateAutocomplete",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<any>",
                    "defaultValue": "(args: any) => {\n  return {\n    template: `\n    <div [formGroup]=\"formControl\">\n      <div uiFormFieldDirective  [outline]=\"${args.outline}\">\n        <label>Choose language</label>\n        <input\n          formControlName=\"name\"\n          type=\"text\"\n          placeholder=\"Select a value\"\n          [uiAutocomplete]=\"auto\"\n          (optionSelected)=\"selectedOption($event)\"\n        >\n        <ui-autocomplete #auto>\n          <ui-option *ngFor=\"let option of options\" [value]=\"option\">\n            {{option}}\n            <ng-container ngProjectsAs=\"icon\">\n              <ui-icon\n                [icon]=\"'edit'\"\n                [size]=\"18\"\n              ></ui-icon>\n            </ng-container>\n          </ui-option>\n        </ui-autocomplete>\n        <ui-spinner [size]=\"'medium'\" uiSuffix></ui-spinner>\n        <ui-icon icon=\"search\" uiPrefix></ui-icon>\n    </div>\n  </div>\n  <ui-button (click)=\"toggleDisabled()\">\n    Enable/disabled\n  </ui-button>\n  `,\n    props: {\n      ...args,\n      options,\n      toggleDisabled,\n      formControl,\n    },\n  };\n}",
                    "rawdescription": "Template to create form wrapper component's story using autocomplete",
                    "description": "<p>Template to create form wrapper component&#39;s story using autocomplete</p>\n"
                },
                {
                    "name": "TemplateSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<any>",
                    "defaultValue": "(args: any) => {\n  return {\n    template: `<div uiFormFieldDirective [outline]=\"${args.outline}\">\n    <label>Choose language</label>\n    <ui-select-menu \n      [multiselect]=\"false\"\n      [disabled]=\"false\">\n        <ui-select-option *ngFor=\"let option of options\" [value]=\"option\">\n          {{option}}\n        </ui-select-option>\n    </ui-select-menu>\n    <ui-spinner [size]=\"'medium'\" uiSuffix></ui-spinner>\n    <ui-icon icon=\"search\" uiPrefix></ui-icon>\n  </div>`,\n    props: {\n      ...args,\n      options,\n    },\n  };\n}",
                    "rawdescription": "Template to create form wrapper component's story using select menu",
                    "description": "<p>Template to create form wrapper component&#39;s story using select menu</p>\n"
                },
                {
                    "name": "toggleDisabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {\n  if (formControl.disabled) {\n    formControl.enable();\n  } else {\n    formControl.disable();\n  }\n}",
                    "rawdescription": "Callback to test story with disable option",
                    "description": "<p>Callback to test story with disable option</p>\n"
                }
            ],
            "libs/ui/src/lib/radio/radio.component.stories.ts": [
                {
                    "name": "formControl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/radio/radio.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FormControl()",
                    "rawdescription": "Form control for story testing",
                    "description": "<p>Form control for story testing</p>\n"
                },
                {
                    "name": "FormControlTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/radio/radio.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<RadioComponent>",
                    "defaultValue": "(args: RadioComponent) => {\n  args.name = 'notification-method';\n  return {\n    component: RadioComponent,\n    template: `\n    <div class=\"space-y-4\" [formControl]=\"formControl\" [uiRadioGroupDirective]=\"'${args.name}'\">\n    <ui-radio *ngFor=\"let option of radioOptions\" [disabled]=\"${args.disabled}\" [variant]=\"'${args.variant}'\" [value]=\"option.value\" >\n      <ng-container ngProjectAs=\"label\">{{option.label}}</ng-container>\n    </ui-radio>\n    </div>\n    <br>\n    <p>value: {{formControl.value}}</p>\n    <p>touched: {{formControl.touched}}</p>\n`,\n    props: {\n      ...args,\n      formControl,\n      radioOptions,\n    },\n  };\n}",
                    "rawdescription": "Form control template radio",
                    "description": "<p>Form control template radio</p>\n"
                },
                {
                    "name": "FormRadio",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/radio/radio.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "FormControlTemplate.bind({})",
                    "rawdescription": "Form control radio",
                    "description": "<p>Form control radio</p>\n"
                },
                {
                    "name": "getRadioChangeSelection",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/radio/radio.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(radioSelectionChange: any) => {\n  selectedOption = radioSelectionChange;\n  addons.getChannel().emit(FORCE_RE_RENDER);\n}",
                    "rawdescription": "Function to test radio change callback when no form control is used",
                    "description": "<p>Function to test radio change callback when no form control is used</p>\n"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/radio/radio.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Primary radio",
                    "description": "<p>Primary radio</p>\n"
                },
                {
                    "name": "radioOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/radio/radio.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RadioOption[]",
                    "defaultValue": "[\n  {\n    label: 'Email',\n    value: 'email',\n  },\n  {\n    label: 'Phone (SMS)',\n    value: 'sms',\n  },\n  {\n    label: 'Push Notification',\n    value: 'push',\n  },\n]"
                },
                {
                    "name": "selectedOption",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/radio/radio.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/radio/radio.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<RadioComponent>",
                    "defaultValue": "(args: RadioComponent) => {\n  args.name = 'notification-method';\n  return {\n    component: RadioComponent,\n    template: `<div class=\"space-y-4\" (groupValueChange)=\"getRadioChangeSelection($event)\" [uiRadioGroupDirective]=\"'${args.name}'\">\n    <ui-radio *ngFor=\"let option of radioOptions; let i = index\" [checked]=\"i === 0\" [disabled]=\"${args.disabled}\" [variant]=\"'${args.variant}'\" [value]=\"option.value\">\n      <ng-container ngProjectAs=\"label\">{{option.label}}</ng-container>\n    </ui-radio>\n    </div>\n    <br>\n    <p>value: {{selectedOption}}</p>`,\n    props: {\n      ...args,\n      radioOptions,\n      getRadioChangeSelection,\n      selectedOption,\n    },\n  };\n}",
                    "rawdescription": "Template radio group",
                    "description": "<p>Template radio group</p>\n"
                }
            ],
            "libs/ui/src/lib/textarea/textarea.component.stories.ts": [
                {
                    "name": "FormControlTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/textarea/textarea.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<TextareaComponent>",
                    "defaultValue": "(\n  args: TextareaComponent\n) => {\n  const formGroup = new FormGroup({\n    textarea: new FormControl('Default value'),\n  });\n  return {\n    component: TextareaComponent,\n    template: `\n      <form [formGroup]=\"formGroup\">\n      <ui-textarea [placeholder]=\"'${args.placeholder}'\" formControlName=\"textarea\"></ui-textarea>\n        </form>\n        <br>\n        <p>value: {{formGroup.get('textarea').value}}</p>\n        <p>touched: {{formGroup.get('textarea').touched}}</p>\n        `,\n    props: {\n      ...args,\n      formGroup,\n    },\n  };\n}",
                    "rawdescription": "Form control template textarea",
                    "description": "<p>Form control template textarea</p>\n"
                },
                {
                    "name": "FormTextarea",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/textarea/textarea.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "FormControlTemplate.bind({})",
                    "rawdescription": "Form control textarea",
                    "description": "<p>Form control textarea</p>\n"
                },
                {
                    "name": "KendoFocusTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/textarea/textarea.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<TextareaComponent>",
                    "defaultValue": "(\n  args: TextareaComponent\n) => {\n  return {\n    component: TextareaComponent,\n    template: `\n      <ui-textarea kendoGridFocusable [placeholder]=\"'${args.placeholder}'\"></ui-textarea>\n        `,\n    props: {\n      ...args,\n    },\n  };\n}",
                    "rawdescription": "Kendo focusable template textarea",
                    "description": "<p>Kendo focusable template textarea</p>\n"
                },
                {
                    "name": "KendoFocusTextarea",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/textarea/textarea.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "KendoFocusTemplate.bind({})",
                    "rawdescription": "Kendo focus textarea",
                    "description": "<p>Kendo focus textarea</p>\n"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/textarea/textarea.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Primary textarea",
                    "description": "<p>Primary textarea</p>\n"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/textarea/textarea.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<TextareaComponent>",
                    "defaultValue": "(args: TextareaComponent) => ({\n  props: args,\n})",
                    "rawdescription": "Template textarea",
                    "description": "<p>Template textarea</p>\n"
                }
            ],
            "libs/ui/src/lib/toggle/toggle.component.stories.ts": [
                {
                    "name": "FormControlTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/toggle/toggle.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<ToggleComponent>",
                    "defaultValue": "(\n  args: ToggleComponent\n) => {\n  const formGroup = new FormGroup({\n    toggle: new FormControl(true),\n  });\n  return {\n    component: ToggleComponent,\n    template: `\n      <form [formGroup]=\"formGroup\">\n      <ui-toggle [type]=\"'${args.type}'\" [variant]=\"'${args.variant}'\" [labelPosition]=\"'${args.labelPosition}'\" formControlName=\"toggle\">\n        <ng-container ngProjectAs=\"label\">Test test test!</ng-container>\n        <ng-container ngProjectAs=\"description\">\n          Test test test test test test test test test test test test test\n        </ng-container>\n      </ui-toggle>\n        </form>\n        <br>\n        <p>value: {{formGroup.get('toggle').value}}</p>\n        <p>touched: {{formGroup.get('toggle').touched}}</p>\n        `,\n    props: {\n      ...args,\n      formGroup,\n    },\n  };\n}",
                    "rawdescription": "Form control template toggle",
                    "description": "<p>Form control template toggle</p>\n"
                },
                {
                    "name": "FormToggle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/toggle/toggle.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "FormControlTemplate.bind({})",
                    "rawdescription": "Form control toggle",
                    "description": "<p>Form control toggle</p>\n"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/toggle/toggle.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "PrimaryTemplate.bind({})",
                    "rawdescription": "Primary toggle",
                    "description": "<p>Primary toggle</p>\n"
                },
                {
                    "name": "PrimaryTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/toggle/toggle.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<ToggleComponent>",
                    "defaultValue": "(args: ToggleComponent) => {\n  args.icon = {\n    disableIcon: 'close',\n    enableIcon: 'save',\n  };\n  return {\n    component: ToggleComponent,\n    template: `\n      <ui-toggle [type]=\"'${args.type}'\" [icon]=\"icon\" [variant]=\"'${args.variant}'\" [labelPosition]=\"'${args.labelPosition}'\">\n        <ng-container ngProjectAs=\"label\">Test test test!</ng-container>\n        <ng-container ngProjectAs=\"description\">\n          Test test test test test test test test test test test test test\n        </ng-container>\n      </ui-toggle>\n        `,\n    props: {\n      ...args,\n    },\n  };\n}",
                    "rawdescription": "Primary template toggle",
                    "description": "<p>Primary template toggle</p>\n"
                }
            ],
            "libs/ui/src/lib/slider/slider.component.stories.ts": [
                {
                    "name": "formGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/slider/slider.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FormGroup({\n  slider: new FormControl(4),\n})",
                    "rawdescription": "Form group to test slider control value accessor",
                    "description": "<p>Form group to test slider control value accessor</p>\n"
                },
                {
                    "name": "Slider",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/slider/slider.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "One to fourteen slider version",
                    "description": "<p>One to fourteen slider version</p>\n"
                },
                {
                    "name": "sliderTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/slider/slider.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`<div [formGroup]=\"formGroup\" class=\"py-5\">\n<ui-slider formControlName=\"slider\" [minValue]=\"minValue\" [maxValue]=\"maxValue\"></ui-slider>\n</div>\n<br>\n<p>value: {{formGroup.get('slider').value}}</p>\n<p>touched: {{formGroup.get('slider').touched}}</p>\n`",
                    "rawdescription": "Slider default template",
                    "description": "<p>Slider default template</p>\n"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/slider/slider.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SliderComponent>",
                    "defaultValue": "(args: SliderComponent) => {\n  args.minValue = 1;\n  args.maxValue = 14;\n  return {\n    component: SliderComponent,\n    template: sliderTemplate,\n    props: {\n      ...args,\n      formGroup,\n    },\n  };\n}",
                    "rawdescription": "Template for storybook's test of the component",
                    "description": "<p>Template for storybook&#39;s test of the component</p>\n"
                }
            ],
            "libs/ui/src/lib/divider/divider.component.stories.ts": [
                {
                    "name": "Horizontal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/divider/divider.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<DividerComponent>",
                    "defaultValue": "{\n  args: {\n    position: 'center',\n    text: 'Test',\n    orientation: 'horizontal',\n  },\n}",
                    "rawdescription": "Horizontal divider",
                    "description": "<p>Horizontal divider</p>\n"
                },
                {
                    "name": "Vertical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/divider/divider.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<DividerComponent>",
                    "defaultValue": "{\n  args: {\n    position: 'center',\n    orientation: 'vertical',\n  },\n}",
                    "rawdescription": "Vertical divider",
                    "description": "<p>Vertical divider</p>\n"
                }
            ],
            "libs/ui/src/lib/paginator/paginator.component.stories.ts": [
                {
                    "name": "itemsArray",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/paginator/paginator.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "defaultValue": "[...Array(100).keys()]",
                    "rawdescription": "Total items for the paginator",
                    "description": "<p>Total items for the paginator</p>\n"
                },
                {
                    "name": "pageChange",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/paginator/paginator.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(event: UIPageChangeEvent) => {\n  console.log('UIPageChangeEvent: ', event);\n  pagedItems = [...itemsArray.slice(event.skip, event.skip + event.pageSize)];\n  addons.getChannel().emit(FORCE_RE_RENDER);\n}",
                    "rawdescription": "Custom method to update paged items for story testing",
                    "description": "<p>Custom method to update paged items for story testing</p>\n"
                },
                {
                    "name": "pagedItems",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/paginator/paginator.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "defaultValue": "itemsArray.filter((value) => value < 10)"
                },
                {
                    "name": "Paginator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/paginator/paginator.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Paginator story",
                    "description": "<p>Paginator story</p>\n"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/paginator/paginator.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<PaginatorComponent>",
                    "defaultValue": "(args: PaginatorComponent) => {\n  return {\n    component: PaginatorComponent,\n    template: `\n    <div class=\"overflow-y-auto max-h-70\">\n      <ng-container *ngFor=\"let item of pagedItems\">\n        <p>{{item}}</p>\n      </ng-container>\n    </div>\n    <ui-paginator [disabled]=\"${args.disabled}\" (pageChange)=\"pageChange($event)\" [totalItems]=\"itemsArray.length\" ></ui-paginator>\n        `,\n    props: {\n      ...args,\n      itemsArray,\n      pagedItems,\n      pageChange,\n    },\n  };\n}",
                    "rawdescription": "Paginator template",
                    "description": "<p>Paginator template</p>\n"
                }
            ],
            "libs/ui/src/lib/spinner/spinner.component.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/spinner/spinner.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Large spinner",
                    "description": "<p>Large spinner</p>\n"
                },
                {
                    "name": "largeSpinner",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/spinner/spinner.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  size: 'large',\n}",
                    "rawdescription": "Large spinner",
                    "description": "<p>Large spinner</p>\n"
                },
                {
                    "name": "Medium",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/spinner/spinner.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Medium spinner",
                    "description": "<p>Medium spinner</p>\n"
                },
                {
                    "name": "mediumSpinner",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/spinner/spinner.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  size: 'medium',\n}",
                    "rawdescription": "Medium spinner",
                    "description": "<p>Medium spinner</p>\n"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/spinner/spinner.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Small spinner",
                    "description": "<p>Small spinner</p>\n"
                },
                {
                    "name": "smallSpinner",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/spinner/spinner.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  size: 'small',\n}",
                    "rawdescription": "Small spinner",
                    "description": "<p>Small spinner</p>\n"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/spinner/spinner.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<SpinnerComponent>",
                    "defaultValue": "(args: SpinnerComponent) => ({\n  props: args,\n})",
                    "rawdescription": "Template spinner",
                    "description": "<p>Template spinner</p>\n"
                }
            ],
            "libs/ui/src/lib/expansion-panel/expansion-panel.component.stories.ts": [
                {
                    "name": "MultiPanel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/expansion-panel/expansion-panel.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateMulti.bind({})",
                    "rawdescription": "Multi expansion panel",
                    "description": "<p>Multi expansion panel</p>\n"
                },
                {
                    "name": "onClose",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/expansion-panel/expansion-panel.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {\n  console.log('panel closed');\n}",
                    "rawdescription": "Test panel close",
                    "description": "<p>Test panel close</p>\n"
                },
                {
                    "name": "panelOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/expansion-panel/expansion-panel.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PanelOption[]",
                    "defaultValue": "[\n  {\n    title: 'Item 1',\n    expanded: true,\n    text: 'Lorem ipsum dolor, sit amet consectetur adipisicing elit. Perferendis excepturi incidunt ipsum deleniti labore, tempore non nam doloribus blanditiis veritatis illo autem iure aliquid ullam rem tenetur deserunt velit culpa?',\n  },\n  {\n    title: 'Item 2',\n    expanded: false,\n    text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Repudiandae ab harum eius, ullam, ex expedita animi nihil, et ut fugit commodi quam! Saepe, recusandae quo sapiente id quidem velit, beatae error distinctio asperiores nesciunt officiis iusto. Sed, aliquid labore pariatur, optio sequi recusandae blanditiis voluptas perferendis sint eveniet inventore harum porro nemo consequatur nesciunt quos delectus, id amet quae? Exercitationem ab debitis ipsum sapiente? A, culpa, quaerat assumenda amet nulla id, quod quia facilis tempora fugit aut provident natus omnis doloremque dolorem odit! Voluptatum assumenda, ipsum vel architecto possimus adipisci ipsam. Fugiat hic impedit rem voluptatem expedita architecto fugit.',\n  },\n  {\n    title: 'Item 3',\n    expanded: false,\n    text: 'Lorem ipsum dolor, sit amet consectetur adipisicing elit. Perferendis excepturi incidunt ipsum deleniti labore, tempore non nam doloribus blanditiis veritatis illo autem iure aliquid ullam rem tenetur deserunt velit culpa?',\n  },\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/expansion-panel/expansion-panel.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<ExpansionPanelComponent>",
                    "defaultValue": "(\n  args: ExpansionPanelComponent\n) => {\n  return {\n    component: ExpansionPanelComponent,\n    template: `\n      <cdk-accordion>\n        <ui-expansion-panel \n          *ngFor=\"let panel of panelOptions; let i = index;\" \n          [disabled]=\"${args.disabled}\" \n          [displayIcon]=\"${args.displayIcon}\" \n          [expanded]=\"panel.expanded\"\n          [index]=\"i\"\n          (closePanel)=\"onClose()\"\n        >\n          <ng-container ngProjectAs=\"title\">\n            {{panel.title}}\n          </ng-container>\n          <p class=\"mb-2 text-gray-500\">{{panel.text}}</p>\n        </ui-expansion-panel>\n      </cdk-accordion>\n    `,\n    props: {\n      ...args,\n      panelOptions,\n      onClose,\n    },\n  };\n}",
                    "rawdescription": "Template expansion panel group",
                    "description": "<p>Template expansion panel group</p>\n"
                },
                {
                    "name": "TemplateMulti",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/expansion-panel/expansion-panel.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<ExpansionPanelComponent>",
                    "defaultValue": "(\n  args: ExpansionPanelComponent\n) => {\n  args.displayIcon = true;\n  return {\n    component: ExpansionPanelComponent,\n    template: `\n      <cdk-accordion [multi]=\"true\">\n        <ui-expansion-panel \n          *ngFor=\"let panel of panelOptions; let i = index;\" \n          [disabled]=\"${args.disabled}\" \n          [displayIcon]=\"${args.displayIcon}\" \n          [expanded]=\"panel.expanded\"\n          [index]=\"i\"\n          (closePanel)=\"onClose()\"\n        >\n          <ng-container ngProjectAs=\"title\">\n            {{panel.title}}\n          </ng-container>\n          <p class=\"mb-2 text-gray-500\" >{{panel.text}}</p>\n        </ui-expansion-panel>\n      </cdk-accordion>\n    `,\n    props: {\n      ...args,\n      panelOptions,\n      onClose,\n    },\n  };\n}",
                    "rawdescription": "Template multi expansion panel group",
                    "description": "<p>Template multi expansion panel group</p>\n"
                },
                {
                    "name": "TogglePanel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/expansion-panel/expansion-panel.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "Toggle expansion panel",
                    "description": "<p>Toggle expansion panel</p>\n"
                }
            ],
            "libs/ui/src/lib/sidenav/sidenav.component.stories.ts": [
                {
                    "name": "OverlaySidenav",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/sidenav/sidenav.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "OverlaySidenavTemplate.bind({})",
                    "rawdescription": "Sidenav sidenav",
                    "description": "<p>Sidenav sidenav</p>\n"
                },
                {
                    "name": "OverlaySidenavTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/sidenav/sidenav.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<SidenavContainerComponent>",
                    "defaultValue": "(\n  args: SidenavContainerComponent\n) => {\n  args.showSidenav = [true];\n  return {\n    component: SidenavContainerComponent,\n    template: `\n      <ui-sidenav-container>\n        <ng-container ngProjectAs=\"content\">\n        <div class=\"flex flex-col\">\n        <ui-button class=\"mx-auto\" (click)=\"nav.toggle()\">Toggle sidenav</ui-button>\n          <p class=\"mt-3 mx-auto\">Main content</p>\n          </div>\n        </ng-container>\n        <div\n          uiSidenavDirective\n          #nav=\"uiSidenavDirective\"\n          [(opened)]=\"showSidenav\"\n          [mode]=\"'over'\"\n          ngProjectAs=\"sidenavContent\"\n        >\n          <div *ngFor=\"let i of [].constructor(25)\">Sidenav Content</div>\n        </div>\n      </ui-sidenav-container>\n    `,\n    props: {\n      ...args,\n    },\n  };\n}",
                    "rawdescription": "Overlay sidenav template",
                    "description": "<p>Overlay sidenav template</p>\n"
                },
                {
                    "name": "PushSidenav",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/sidenav/sidenav.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "PushSidenavTemplate.bind({})",
                    "rawdescription": "Sidenav sidenav",
                    "description": "<p>Sidenav sidenav</p>\n"
                },
                {
                    "name": "PushSidenavTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/sidenav/sidenav.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<SidenavContainerComponent>",
                    "defaultValue": "(\n  args: SidenavContainerComponent\n) => {\n  args.showSidenav = [true];\n  return {\n    component: SidenavContainerComponent,\n    template: `\n      <ui-sidenav-container>\n        <ng-container ngProjectAs=\"content\">\n        <ui-button (click)=\"nav.toggle()\">Toggle sidenav</ui-button>\n          <p class=\"mt-3\">Main content</p>\n        </ng-container>\n        <div\n          uiSidenavDirective\n          #nav=\"uiSidenavDirective\"\n          [(opened)]=\"showSidenav\"\n          ngProjectAs=\"sidenavContent\"\n        >\n          <div *ngFor=\"let i of [].constructor(25)\">Sidenav Content</div>\n        </div>\n      </ui-sidenav-container>\n    `,\n    props: {\n      ...args,\n    },\n  };\n}",
                    "rawdescription": "Push sidenav template",
                    "description": "<p>Push sidenav template</p>\n"
                }
            ],
            "libs/ui/src/lib/snackbar/snackbar.component.stories.ts": [
                {
                    "name": "Snackbar",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/snackbar/snackbar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})",
                    "rawdescription": "LaunchSnackbarComponent",
                    "description": "<p>LaunchSnackbarComponent</p>\n"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui/src/lib/snackbar/snackbar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<LaunchSnackbarComponent>",
                    "defaultValue": "(\n  args: LaunchSnackbarComponent\n) => ({\n  props: args,\n})",
                    "rawdescription": "Template LaunchSnackbarComponent",
                    "description": "<p>Template LaunchSnackbarComponent</p>\n"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "libs/ui/src/lib/avatar-group/avatar-group.component.stories.ts": [
                {
                    "name": "MockedAvatar",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "libs/ui/src/lib/avatar-group/avatar-group.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "StoryType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "libs/ui/src/lib/avatar-group/avatar-group.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                }
            ],
            "libs/ui/src/lib/table/table.component.stories.ts": [
                {
                    "name": "MockedTable",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "libs/ui/src/lib/table/table.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "libs/ui/src/lib/expansion-panel/expansion-panel.component.stories.ts": [
                {
                    "name": "PanelOption",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "libs/ui/src/lib/expansion-panel/expansion-panel.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "libs/ui/src/lib/radio/radio.component.stories.ts": [
                {
                    "name": "RadioOption",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "libs/ui/src/lib/radio/radio.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "libs/ui/src/lib/alert/alert.stories.ts": [
                {
                    "name": "StoryType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "libs/ui/src/lib/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                }
            ],
            "libs/ui/src/lib/button/button.component.stories.ts": [
                {
                    "name": "StoryType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "libs/ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 97,
        "status": "very-good",
        "files": [
            {
                "filePath": "libs/ui/.storybook/main.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "closesAutocompletePanel",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FormAutocomplete",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formControl",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FormControlTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GROUPED_OPTIONS",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GroupedAutocompletePanel",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GroupedAutocompletePanelTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "openedAutocompletePanel",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectedOption",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SIMPLE_OPTIONS",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SimpleAutocompletePanel",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/autocomplete/autocomplete.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SimpleAutocompletePanelTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/avatar-group/avatar-group.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "avatars",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/avatar-group/avatar-group.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Defaut",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryCircleAvatarLarge",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryCircleAvatarMedium",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryCircleAvatarSmall",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryCircleImageAvatarLarge",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryRectangleAvatarLarge",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryRectangleAvatarMedium",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryRectangleAvatarSmall",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryRectangleImageAvatarLarge",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SecondaryCircleAvatarLarge",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SecondaryRectangleAvatarLarge",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TertiaryCircleAvatarLarge",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/avatar/avatar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TertiaryRectangleAvatarLarge",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/breadcrumbs/breadcrumbs.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Contained",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/breadcrumbs/breadcrumbs.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Full",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/breadcrumbs/breadcrumbs.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SimpleChevron",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/breadcrumbs/breadcrumbs.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SimpleSlash",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "allButtons",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllButtonsTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "configurations",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "individualBtnArgs",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primaryButton",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "secondaryButton",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Tertiary",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tertiaryButton",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "testClick",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VariantsList",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/checkbox/checkbox.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FormCheckbox",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/checkbox/checkbox.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FormControlTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/checkbox/checkbox.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/checkbox/checkbox.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/chip/chip.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addChipsFromInput",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/chip/chip.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ChipsInputTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/chip/chip.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ChipVariants",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/chip/chip.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ChipVariantsTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/chip/chip.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ChipWithInput",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/chip/chip.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formControl",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/chip/chip.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "removeStatus",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/chip/chip.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "separatorKeysCodes",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/chip/chip.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "statuses",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/date/date-picker/date-picker.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BottomDatePicker",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/date/date-picker/date-picker.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BottomDatePickerTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/date/date-picker/date-picker.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DatePicker",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/date/date-picker/date-picker.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DatePickerTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/date/date-picker/date-picker.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formControl",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/date/date-range/date-range.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "afterTomorrow",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/date/date-range/date-range.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BottomDateRange",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/date/date-range/date-range.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BottomDateRangeTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/date/date-range/date-range.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DateRange",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/date/date-range/date-range.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DateRangeTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/date/date-range/date-range.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formControlEnd",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/date/date-range/date-range.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formControlStart",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/date/date-range/date-range.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "today",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/dialog/dialog.component.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditDialogComponent",
                "coveragePercent": 100,
                "coverageCount": "4/4",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/dialog/dialog.component.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "LaunchDialogComponent",
                "coveragePercent": 42,
                "coverageCount": "3/7",
                "status": "medium"
            },
            {
                "filePath": "libs/ui/src/lib/dialog/dialog.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/dialog/dialog.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/divider/divider.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Horizontal",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/divider/divider.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Vertical",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/expansion-panel/expansion-panel.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultiPanel",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/expansion-panel/expansion-panel.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onClose",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/expansion-panel/expansion-panel.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "panelOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui/src/lib/expansion-panel/expansion-panel.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/expansion-panel/expansion-panel.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateMulti",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/expansion-panel/expansion-panel.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TogglePanel",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formControl",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "options",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OutlineFalse",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OutlineFalseAutocomplete",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OutlineFalseSelect",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OutlineTrue",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OutlineTrueAutocomplete",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OutlineTrueSelect",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateAutocomplete",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateSelect",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/form-wrapper/form-wrapper.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "toggleDisabled",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/icon/icon.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllIconsTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/icon/icon.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/icon/icon.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconList",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/icon/icon.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/menu/menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "clickEvent",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/menu/menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LeftBottomCornerMenu",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/menu/menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LeftBottomCornerMenuTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/menu/menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LeftTopCornerMenu",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/menu/menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LeftTopCornerMenuTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/menu/menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "menuItemsTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/menu/menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RightBottomCornerMenu",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/menu/menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RightBottomCornerMenuTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/menu/menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RightTopCornerMenu",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/menu/menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RightTopCornerMenuTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/paginator/paginator.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "itemsArray",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/paginator/paginator.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pageChange",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/paginator/paginator.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pagedItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui/src/lib/paginator/paginator.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Paginator",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/paginator/paginator.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/radio/radio.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formControl",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/radio/radio.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FormControlTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/radio/radio.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FormRadio",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/radio/radio.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getRadioChangeSelection",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/radio/radio.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/radio/radio.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "radioOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui/src/lib/radio/radio.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectedOption",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui/src/lib/radio/radio.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "closeEvent",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customTriggerSelect",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customTriggerSelectTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DisabledSelection",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formControlSelectTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formGroup",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultiSelection",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "openEvent",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "options",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectEvent",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMenuTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "singleSelectMenuTemplateWithTrigger",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "StandaloneSelection",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "StandaloneSelectionDefaultValue",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateDisabledSelection",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateMultiSelection",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateRefSelection",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateStandaloneSelection",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateStandaloneSelectionDefaultValue",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/select-menu/select-menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateTemplateRefSelection",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/sidenav/sidenav.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OverlaySidenav",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/sidenav/sidenav.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OverlaySidenavTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/sidenav/sidenav.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PushSidenav",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/sidenav/sidenav.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PushSidenavTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/slider/slider.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formGroup",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/slider/slider.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Slider",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/slider/slider.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sliderTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/slider/slider.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/snackbar/snackbar.component.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomSnackbarComponent",
                "coveragePercent": 75,
                "coverageCount": "3/4",
                "status": "good"
            },
            {
                "filePath": "libs/ui/src/lib/snackbar/snackbar.component.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "LaunchSnackbarComponent",
                "coveragePercent": 50,
                "coverageCount": "3/6",
                "status": "medium"
            },
            {
                "filePath": "libs/ui/src/lib/snackbar/snackbar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Snackbar",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/snackbar/snackbar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/spinner/spinner.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/spinner/spinner.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "largeSpinner",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/spinner/spinner.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Medium",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/spinner/spinner.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mediumSpinner",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/spinner/spinner.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/spinner/spinner.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "smallSpinner",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/spinner/spinner.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/table/table.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "columnDefinitionArray",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/table/table.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sortTableByKey",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/table/table.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Table",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/table/table.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tableData",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/table/table.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/tabs/tabs.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/tabs/tabs.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Vertical",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/textarea/textarea.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FormControlTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/textarea/textarea.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FormTextarea",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/textarea/textarea.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "KendoFocusTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/textarea/textarea.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "KendoFocusTextarea",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/textarea/textarea.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/textarea/textarea.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/toggle/toggle.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FormControlTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/toggle/toggle.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FormToggle",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/toggle/toggle.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/toggle/toggle.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryTemplate",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/tooltip/tooltip.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BottomExample",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/tooltip/tooltip.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BottomLeftExample",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/tooltip/tooltip.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BottomRightExample",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/tooltip/tooltip.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LeftExample",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/tooltip/tooltip.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LongTextExample",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/tooltip/tooltip.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RightExample",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/tooltip/tooltip.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/tooltip/tooltip.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TopExample",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/tooltip/tooltip.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TopLeftExample",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/ui/src/lib/tooltip/tooltip.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TopRightExample",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            }
        ]
    }
}